<workunit>
    <invokers>
        <invoker folderid="menu/tc/txn" action="init" caption="AF Control" permission="afcontrol.changemode" />
        <invoker type="home.action" action="init" caption="AF Control" target="window" icon="images/folder.png" permission="afcontrol.changemode" />
        
        <invoker type="formActions" action="_close"          caption="Close"            mnemonic="c" icon="images/cancel.png" />
        <invoker type="formActions" action="createSerial"    caption="New Serial"       mnemonic="n" icon="images/doc-new.png"   />
        <invoker type="formActions" action="createNonSerial" caption="New Non-Serial"   mnemonic="r" icon="images/doc-new.png"  />
        <invoker type="formActions" action="open"            caption="Open"             mnemonic="o" icon="images/deploy.png" visibleWhen="#{selectedItem != null and selectedItem.docstate == 'PENDING' }"/>
        <invoker type="formActions" action="remove"          caption="Delete"           mnemonic="d" icon="images/doc-delete.png" visibleWhen="#{selectedItem != null and selectedItem.docstate == 'PENDING' }"/>
        <invoker type="formActions" action="changeMode"      caption="Change Mode"      mnemonic="m" icon="images/deploy.png" visibleWhen="#{selectedItem != null and selectedItem.docstate != 'PENDING' }"/>
        <invoker type="formActions" action="transfer"        caption="Transfer"         mnemonic="t" icon="images/deploy.png" visibleWhen="#{selectedItem != null and selectedItem.docstate == 'APPROVED' }"/>
        <invoker type="formActions" action="adjustQty"       caption="Adjust Quantity"  mnemonic="j" icon="images/deploy.png" visibleWhen="#{selectedItem != null and selectedItem.docstate == 'APPROVED' and selectedItem.aftype == 'nonserial'  }"/>
    </invokers>
    <code>
<![CDATA[        

import com.rameses.rcp.common.*
import com.rameses.rcp.annotations.*
import com.rameses.osiris2.client.*

class AFControlController
{
    @Binding
    def binding
    
    
    @Service('AFControlService')
    def svc
    
    @Service('ETRACSUserService')
    def userSvc
    
    def collector
    def af
    def selectedItem
    def list
    def afcontrol
    
    void init() {
    }
    
    def oncreateControl = { afcontrol ->
        loadOpenAFControlList()
    }
    
    def createSerial() {
        return InvokerUtil.lookupOpener( 'serialafcontrol.create', [oncreate:oncreateControl] )
    }
    
    def createNonSerial() {
        return InvokerUtil.lookupOpener( 'nonserialafcontrol.create', [oncreate:oncreateControl] )
    }
    
    def transfer() {
        return InvokerUtil.lookupOpener( 'afcontroltransfer.create', [
            afcontrol  : selectedItem, 
            ontransfer : { afcontrol ->
                selectedItem.putAll( afcontrol )
                binding.refresh( 'selectedItem' )
            }
        ])
    }
    
    def open() {
        return InvokerUtil.lookupOpener( selectedItem.aftype+'afcontrol.open' , [afcontrol:selectedItem] )
    }
    
    void remove() {
        if( MsgBox.confirm('Delete selected control?') ) {
            svc.deleteAFControl( selectedItem )
            list.remove( selectedItem )
            listHandler.load()
        }
    }
    
    def changeMode() {
        return InvokerUtil.lookupOpener( 'changemode', [
            oldmode  : selectedItem.mode,
            onselect : { newmode ->
                svc.changeMode( selectedItem.objid, newmode )
                selectedItem.mode   = newmode
                selectedItem.active = 0
                binding.refresh( 'selectedItem' )
            }
        ])
    }
    
    def adjustQty() {
        return InvokerUtil.lookupOpener('afcontroladjust.create', [
            afcontrol : selectedItem,
            onupdate  : { afcontrol ->  
                selectedItem.putAll( afcontrol )
                binding.refresh()
            }
        ])
    }
    
    void setCollector( collector ) {
        this.collector = collector 
        loadOpenAFControlList()
    }
    
    void setAf( af ) {
        this.af = af
        loadOpenAFControlList()
    }
    
    void loadOpenAFControlList() {
        list = []
        if( collector ) {
            list = svc.getOpenAFControlList( collector?.objid, af?.objid )
        }
        listHandler.load()
    }
    
    def listHandler = [
        getRows    : { return 50 },
        getColumns : { 
            return [
                new Column(name:'afid', caption:'AF No.', maxWidth:80),
                new Column(name:'aftype', caption:'Type', maxWidth:80),
                new Column(name:'docstate', caption:'State', maxWidth:150),
                new Column(name:'stubno', caption:'Stub No.', maxWidth:120),
                new Column(name:'startseries', caption:'Start Series', format:'0000000'),
                new Column(name:'endseries', caption:'End Series', format:'0000000'),
                new Column(name:'currentseries', caption:'Current Series', format:'0000000'),
                new Column(name:'qtyreceived', caption:'Qty. Received', type:'integer'),
                new Column(name:'balance', caption:'Balance', type:'integer'),
                new Column(name:'mode', caption:'Mode'),
            ]
        },
        fetchList : {
            return list
        },
    ] as SubListModel
    
    
    List getCollectorlist() {
        return userSvc.getCollectorList()
    }
    
    List getAflist() {
        return svc.getAFList()
    }
}

]]>
    </code>
    <pages>
        <page template="etracs2.tc.af.AFControlPage"/>
    </pages>
</workunit>