<workunit>
    <invokers>
        <invoker type="home.action" action="init" caption="Bank" permission="bank.view" target="window" icon="images/folder.png" index="4"/>
        <invoker folderid="/menu/tc/master" action="init" caption="Bank" permission="bank.view" target="window" index="4"/>
        
        <invoker type="formActions" action="create" shortcut="ctrl N" visibleWhen="#{mode == 'view'}" immediate="true" caption="New" mnemonic="n" icon="images/doc-new.png" permission="bank.create" />
        <invoker type="formActions" action="edit" shortcut="ctrl E" visibleWhen="#{mode == 'view' and entity.objid != null}" immediate="true" caption="Edit" mnemonic="e" icon="images/edit.png" permission="bank.edit" />
        <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view'}" caption="Save" mnemonic="s" icon="images/save.png"/>
        <invoker type="formActions" action="cancel" visibleWhen="#{mode != 'view'}"  immediate="true" caption="Cancel" mnemonic="c" icon="images/doc-cancel.png"/>
        <invoker type="formActions" action="delete" shortcut="ctrl D" visibleWhen="#{mode == 'view' and entity.objid != null}" immediate="true" caption="Delete" mnemonic="d" icon="images/doc-delete.png" permission="bank.delete" />
    </invokers>
    <code>
        <![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;

class BankController extends etracs2.groovy.CRUDController 
{
    @Service('BankiService')
    def svc;
    
    def getService() { return svc; }
    def getCreateFocusComponent() { return "entity.bankcode"; }
    def getEditFocusComponent() { return "entity.bankcode"; }
    def getListHandler() { return listHandler; }
    
    def listHandler = [
        getRows    : { return 20; },
        getColumns : {
            return [
                new Column(name:"bankcode", caption:"Bank Code"),
                new Column(name:"bankname", caption:"Bank Name"),
                new Column(name:"branchname", caption:"Branch Name"),
            ];
        },
        fetchList : { return list; }
    ] as SubListModel;
    
    void edit() {
        def isReferenced = svc.validateEdit( entity );
        if( isReferenced )
            throw new Exception( 'Edit not allowed. Bank is already referenced by a transaction.' );
            
        super.edit();
    }
}

]]>        
        
    </code>
    <pages>
        <page template="etracs2.tc.bank.BankPage"/>
    </pages>
</workunit>