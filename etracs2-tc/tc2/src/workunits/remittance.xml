<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    
    <invokers>
        <invoker folderid="/menu/tc" action="create" caption="Remittance" permission="remittance.create"/>
        
        <invoker type="formActions" action="close"  immediate="true" caption="Close" mnemonic="c" icon="images/cancel.png"/>
        <invoker type="formActions" action="create" shortcut="ctrl N" visibleWhen="#{mode == 'view'}" immediate="true" caption="New" mnemonic="n" icon="images/doc-new.png" permission="remittance.create"/>
        <invoker type="formActions" action="next" shortcut="ctrl N" visibleWhen="#{mode == 'init'}" caption="Next" mnemonic="n" icon="images/next.png"/>
        <invoker type="formActions" action="back" shortcut="ctrl B" visibleWhen="#{mode == 'main'}" caption="Back" mnemonic="b" icon="images/back.png"/>
        <invoker type="formActions" action="submit" shortcut="ctrl S" visibleWhen="#{mode == 'main'}" caption="Submit" mnemonic="s" icon="images/doc-submit.png" permission="remittance.submit"/>
        <invoker type="formActions" action="viewRCD" shortcut="ctrl R" visibleWhen="#{mode == 'view'}" immediate="true" caption="View RCD" mnemonic="r" icon="images/doc-view.png" permission="remittance.create"/>
        <invoker type="formActions" action="viewOtherReports" shortcut="ctrl O" visibleWhen="#{mode == 'view'}" immediate="true" caption="Other Reports" mnemonic="o" icon="images/otherReports.png" permission="remittance.create"/>
        <invoker type="formActions" action="backToMain" shortcut="ctrl B" visibleWhen="#{mode == 'reports' or mode == 'rcd'}" immediate="true" caption="Back" mnemonic="b" icon="images/back.png"/>
        <invoker type="formActions" action="viewReport" shortcut="ctrl V" visibleWhen="#{mode == 'reports'}" immediate="true" caption="View" mnemonic="v" icon="images/doc-view.png" permission="remittance.create"/>
    </invokers>
    
    <code lang="groovy">
        <![CDATA[
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import java.text.DecimalFormat;
        
        public class RemittanceController {
        
            @Service('RemittanceService')
            def svc;
            
            @Service('ETRACSUserService')
            def usersvc;
            
            @Service("DateService")
            def dtsvc;
            
            def entity;
            
            @Caller
            def caller;
            
            @Binding
            def binding;
            
            def mode;
            
            def numformat = new DecimalFormat("#,##0.00");
            
            def collector;
        
            def denominationOpener;
            
            def selectedreport;
            
            def reports;
            
            def create() {
                collector = usersvc.getCollector( OsirisContext.env.USERID );
                mode = 'init';
                entity = [
                    collectorid : collector.objid,
                    info : buildInfo(),
                    receipts : [],
                    otherpayments : [],
                    remittedforms : []
                ];
                
                return 'init';
            }
            
            def open() {
                if (entity)
                    entity = svc.open( entity.objid );
                mode = 'view';
                denominationOpener = InvokerUtil.lookupOpener('cashreceipt:breakdown', [totalAmount:entity.info.totalcash, list:entity.info.denominations, mode:'view']);
                
                return 'main';
            }
            
            def getHtml() {
                return svc.getHtml( entity );
            }
            
            def next() {
                entity = svc.createRemittance( entity );
                mode = 'main';
                denominationOpener = InvokerUtil.lookupOpener('cashreceipt:breakdown', [totalAmount:entity.info.totalcash, list:entity.info.denominations]);
                return 'main';
            }
            
            def back() {
                mode = 'init';
                return 'init';
            }
            
            def submit() {
                if (! MsgBox.confirm( "Do you want to submit this document?" ) )
                    return null;
                entity.info.denominations = denominationOpener.handle.list;
                entity = svc.save( entity );
                if (caller)
                    caller.binding.refresh();
                mode = 'view';
                denominationOpener.handle.mode = 'view' 
                binding.refresh();
                return 'main';
            }
            
            def close() {
                return '_close';
            }
            
            
            def viewOtherPayments() {
                return new PopupOpener( outcome:'otherpayments' );
            }
            
            def viewAccountableForms() {
                return new PopupOpener( outcome:'remittedforms' );
            }
            
            def viewReceipts() {
                return new PopupOpener( outcome:'receipts' );
            }
            
            def buildInfo() {
                return [
                    txndate : dtsvc.getServerDate(),
                    collectorname : collector.name,
                    collectortitle : collector.jobtitle,
                    amount : 0.00,
                    totalcash : 0.00,
                    totalotherpayment : 0.00
                ];
            }
            
            def otherPaymentHandler = [
            
                getRows    : { return 50; },
                
                getColumns : {
                    return [
                        new Column( name:"paytype", caption:"Type" ),
                        new Column( name:"particulars", caption:"Info" ),
                        new Column( name:"amount", caption:"Amount", format: "#,##0.00", width:100 )
                    ];
                },
                
                fetchList : { 
                    return entity.otherpayments;
                }
            
            ] as PageListModel;
            
            def getTotalOtherPayment() {
                return numformat.format( entity.info.totalotherpayment );
            }
            
            def receiptHandler = [
                
                getRows    : { return 50; },
                
                getColumns : {
                    return [
                        new Column( name:"collectiontype", caption:"Type" ),
                        new Column( name:"serialno", caption:"Serial No." ),
                        new Column( name:"txndate", caption:"Txn Date", format: "yyyy-MM-dd" ),
                        new Column( name:"mode", caption:"Mode" ),
                        new Column( name:"paidby", caption:"Payor" ),
                        new Column( name:"paidbyaddress", caption:"Payor Address" ),
                        new Column( name:"voided", caption:"Voided" ),
                        new Column( name:"amount", caption:"Amount", format: "#,##0.00", width:100 )
                    ];
                },
                
                fetchList : { 
                    return entity.receipts;
                }
            
            ] as PageListModel;
            
            def getTotalAmount() {
                return numformat.format( entity.info.amount );
            }
            
            def remittedFormHandler = [
                
                getRows    : { return 50; },
                
                getColumns : {
                    return [
                        new Column( name:"afid", caption:"AF No."),
                        new Column( name:"stubno", caption:"Stub No." ),
                        new Column( name:"beginfrom", caption:"Begin From"),
                        new Column( name:"beginto", caption:"Begin To"),
                        new Column( name:"beginqty", caption:"Begin Qty"),
                        new Column( name:"receivedfrom", caption:"Received From"),
                        new Column( name:"receivedto", caption:"Received To"),
                        new Column( name:"receivedqty", caption:"Received Qty"),
                        new Column( name:"issuedfrom", caption:"Issued From"),
                        new Column( name:"issuedto", caption:"Issued To"),
                        new Column( name:"issuedqty", caption:"Issued Qty"),
                        new Column( name:"endingfrom", caption:"Ending From"),
                        new Column( name:"endingto", caption:"Ending To"),
                        new Column( name:"endingqty", caption:"Ending Qty")
                    ];
                },
                
                fetchList : { 
                    return entity.remittedforms;
                }
            
            ] as PageListModel;
            
            
            def viewRCD() {
                return new Opener( name:'tc2:remittance_report_rcd', action:'view', params:[entity:entity] );
            }
            
            def getReportList() {
                if( !reports ) reports = InvokerUtil.lookupOpeners("remittance:report", [entity: entity] );
                return reports;
            } 
            
            def viewOtherReports() {
                mode = 'reports';
                return 'otherreports';
            }
            
            def viewReport() {
                if (!selectedreport) return null;
                return selectedreport;
            }
            
            def backToMain() {
                mode = 'view';
                return 'main';
            }

        }
        
        ]]>
    </code>
    
    <pages>
        <!--page name="view" template="etracs2.tc.HTMLViewPage" /-->
        <page name="main" template="etracs2.tc.remittance.RemittancePage" />
        <page name="init" template="etracs2.tc.remittance.RemittanceInitPage" />
        <page name="otherpayments" template="etracs2.tc.remittance.OtherPaymentListPage" />
        <page name="remittedforms" template="etracs2.tc.remittance.RemittedFormListPage" />
        <page name="receipts" template="etracs2.tc.remittance.ReceiptListPage" />
        <page name="otherreports" template="etracs2.tc.remittance.OtherReportsPage" />
    </pages>
</workunit>
