<workunit>
    <invokers>
        <invoker folderid="/menu/tc/master" action="init" caption="Accountable Form" permission="af.viewlist" />
        
        <invoker type="formActions" action="create" shortcut="ctrl N" visibleWhen="#{mode == 'view'}" immediate="true" caption="New" mnemonic="n" icon="images/doc-add.png" permission="af.create" />
        <invoker type="formActions" action="edit" shortcut="ctrl E" visibleWhen="#{mode == 'view' and entity.objid != null}" immediate="true" caption="Edit" mnemonic="e" icon="images/doc-edit.png" permission="af.edit" />
        <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view'}" caption="Save" mnemonic="s" icon="images/doc-save.png"/>
        <invoker type="formActions" action="cancel" visibleWhen="#{mode != 'view'}"  immediate="true" caption="Cancel" mnemonic="c" icon="images/doc-cancel.png"/>
        <invoker type="formActions" action="delete" shortcut="ctrl D" visibleWhen="#{mode == 'view' and entity.objid != null}" immediate="true" caption="Delete" mnemonic="d" icon="images/doc-delete.png" permission="af.delete" />
        <invoker type="formActions" action="approve" shortcut="ctrl A" visibleWhen="#{mode == 'view' and entity.objid != null and entity.docstate == 'DRAFT'}" immediate="true" caption="Approve" mnemonic="a" icon="images/doc-approve.png" permission="af.approve" />
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;

class AFController extends etracs2.groovy.CRUDController 
{
    @Service("AFService")
    def svc;
    
    def getService() { return svc; }
    def getCreateFocusComponent() { return "entity.objid"; }
    def getEditFocusComponent() { return "entity.description"; }
    def getListHandler() { return listHandler; }
    
    def createEntity() {
        return [
            docstate     : "DRAFT",
            denomination : 0.0
        ];
    }
    
    def listHandler = [
        getRows    : { return 20; },
        getColumns : {
            return [
                new Column(name:"objid", caption:"AF No."),
                new Column(name:"description", caption:"Description"),
                new Column(name:"aftype", caption:"Type"),
                new Column(name:"docstate", caption:"State"),
            ];
        },
        fetchList : { return list; },
    ] as SubListModel;
    
    def getTypeList() {
        return ["serial", "nonserial"];
    }
    
    def getUnitList() {
        return ["pad", "stub"];
    }
    
    void setAftype( aftype ){
        entity.aftype = aftype;
        
        if( entity.aftype == "serial" ){
            entity.unit = "stub";
            entity.pcsperunit = 50;
            entity.serieslength = '0000000';
        }else{
            entity.unit = "pad";
            entity.pcsperunit = 1000;
            entity.denomination = 0;
        }
    }
    
    def getAftype(){
        return entity.aftype;
    }
}

]]>        
        
    </code>
    <pages>
        <page template="etracs2.tc.af.AFPage"/>
    </pages>
</workunit>