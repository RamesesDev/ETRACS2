<workunit>
    <invokers>
        <invoker type="home.action" caption="Deposit" permission="deposit.create" icon="images/cash.png" target="window" index="131"/>
        <invoker folderid="menu/tc/txn" caption="Deposit" permission="deposit.create" target="window" index="131"/>
        
        <invoker type="initActions" action="doNext" caption="Next" mnemonic="n" shortcut="ctrl N" icon="images/next.png"/>
        <invoker type="mainActions" action="_close" caption="Close" mnemonic="c" shortcut="ctrl W" icon="images/cancel.png"/>
        <invoker type="mainActions" action="deposit" caption="Deposit" mnemonic="d" shortcut="ctrl D" icon="images/cash.png"/>
        <invoker type="viewActions" action="closeDeposit" caption="Close Deposit" mnemonic="d" shortcut="ctrl D" visibleWhen="#{entity.docstate == 'OPEN'}" permission="deposit.close" />        
        <invoker type="noncashActions" action="addNonCashPayments" caption="Add Non-Cash Payment" mnemonic="a" shortcut="ctrl a" visibleWhen="#{selectedSummary != null}" permission="deposit.addnoncash" />
        <invoker type="noncashActions" action="addExternalPayment" caption="Add External Non-Cash Payment" mnemonic="e" shortcut="ctrl e" visibleWhen="#{selectedSummary != null}" permission="deposit.addexternalnoncash"/>
        
        <invoker type="deposit.view" action="doView" caption="View" mnemonic="v" shortcut="ctrl V" permission="deposit.view"/>
    </invokers>
    <code>

<![CDATA[
import com.rameses.rcp.common.*
import com.rameses.rcp.annotations.*
import com.rameses.osiris2.client.*
import com.rameses.osiris2.reports.*
import etracs2.groovy.*
import java.math.BigDecimal;


class DepositController 
{
    @Binding
    def binding

    @Service('DepositService')
    def svc
    
    @Service('DepositHtmlService')
    def htmlSvc
    
    @Service("NumberService")
    def numSvc
	
    @Service("Var")
    def var
    
    @Service('DateService')
    def dateSvc
    
    def entity
    def selectedSummary
    def denominationOpener
    def openNonCashPayments = []
    def selectedFundTotal
    
    
    void init() {
        entity = [:]
    }
    
    void setSelectedSummary( selectedSummary ) {
        resetSummaryDenominations()
        this.selectedSummary = selectedSummary
        lookupDenominationOpener()
    }
    
    def doNext() {
        entity = svc.createDeposit( cashierid )
        openNonCashPayments.addAll( entity.noncashpayments )
        entity.noncashpayments = null
        return 'main' 
    }
    
    def addDeposit() {
        return InvokerUtil.lookupOpener('depositadd.create', [
            svc         : svc,
            deposit     : entity, 
            onadd       : { summary ->
                entity.fundsummaries.add( summary )
                summaryHandler.load()
                binding.refresh( 'summarytotal|selectedFundTotal' )
            },
        ])
    }
    
    
    
    def deposit() {
        resetSummaryDenominations()
        if( MsgBox.confirm('Post Deposit?') ) {
            entity = svc.create( entity )
            return 'view'
        }
        return 'main' 
    }
    
    def doView() {
        entity = svc.open( entity.objid )
        return 'view'
    }
    
    def closeDeposit() {
        return InvokerUtil.lookupOpener('closedeposit', [entity:entity])
    }
    
    void printCashDepositSlip( bankacctid ) {
        try {
            def reportName = "depositslip/cash"
             
            def fundsummary = entity.fundsummaries.find{ it.bankacctid == bankacctid }
            if( fundsummary && fundsummary?.bankaccount?.checkreport ) {
                reportName = 'depositslip/' + fundsummary.bankaccount.cashreport
            }
        
            println 'reportName -> ' + reportName 
            
             def cashReport = [
                getReportName : { return reportName },
                getReportData : { return buildCashReportData( bankacctid ) },
            ] as ServerReportModel
            cashReport.viewReport()
            ReportUtil.print( cashReport.report, true )
        }
        catch( e ) {
            e.printStackTrace()
            //ignore
        }
    }
    
    void printCashBreakdown( bankacctid  ){
        try {
            def reportName = "depositslip/cashbreakdown"
            
            def fundsummary = entity.fundsummaries.find{ it.bankacctid == bankacctid }
            if( fundsummary && fundsummary?.bankaccount?.checkreport ) {
                reportName = 'depositslip/' + fundsummary.bankaccount.cashbreakdownreport
            }
            
            def cashReport = [
                getReportName : { return reportName },
                getReportData : { return buildCashBreakdownReportData( bankacctid ) },
            ] as ServerReportModel
            cashReport.viewReport()
            ReportUtil.print( cashReport.report, true )
        }
        catch( e ) {
            e.printStackTrace()
            //ignore
        }
    
    }
    
    def selectCheckTypeHandler = { checktype ->
        doPrintCheckDepositSlip( bankacctid, checktype )
    }
    
    def bankacctid
    def printCheckDepositSlip( bankacctid )  {
        this.bankacctid = bankacctid 
        return InvokerUtil.lookupOpener('checktype.select', [selectHandler:selectCheckTypeHandler])
    }
    
    void doPrintCheckDepositSlip( bankacctid,  checktype ) {
        def reportName = "depositslip/check"
        
        def fundsummary = entity.fundsummaries.find{ it.bankacctid == bankacctid }
        if( fundsummary && fundsummary?.bankaccount?.checkreport ) {
            reportName = 'depositslip/' + fundsummary.bankaccount.checkreport
        }
            
        println 'reportName -> ' + reportName 
        
         def checkReport  = [
            getReportName : { return reportName },
            getReportData : { return buildCheckReportData( bankacctid, checktype ) },
        ] as ServerReportModel
        checkReport.viewReport()
        ReportUtil.print( checkReport.report, true )
    }
    
    def buildDepositReportData( fundSummary ) {
        if( ! fundSummary ) throw new Exception('Fund does not exists or invalid.\nReload deposit record and try again.')
	def dt = dateSvc.parse("yyyy-MM-dd", entity.txndate)
        return [
            txndate      : dt,
            bankacctno   : fundSummary.bankacctno,
            bankacctname : (fundSummary.bankacctname ? fundSummary.bankacctname : "LGU " + var.get('lgu_name') ),
            cash         : fundSummary.cash,
            noncash      : fundSummary.noncash,
        ]
    }
    
    def buildCashReportData( bankacctid  ) {
        def fundSummary = entity.fundsummaries.find{ it.bankacctid == bankacctid }
        def data = buildDepositReportData( fundSummary )
        if( fundSummary.cash == 0 ) throw new Exception('There is no cash for deposit.')
        data.denominations = []
        fundSummary.denominations.each {
            def dqty = 'dqty' + it.caption.toString().replace('.00','')
            def damt = 'damt' + it.caption.toString().replace('.00','')
            data."$dqty" = null
            data."$damt" = null
            if( it.amount > 0 ) {
                data.denominations.add([
                    denomination : it.caption,
                    qty          : new BigDecimal(it.qty+''),
                    amount       : new BigDecimal(it.amount+'') ,
                ])
                data."$dqty" = it.qty + 0.0
                data."$damt" = it.amount
            }            
        }
        data.branchname = fundSummary.branchname
        data.depositedbyname = entity.depositedbyname
        data.amountinwords = numSvc.convertString( data.cash + "" )
        data.txndate = dateSvc.format( 'MM-dd-yyyy', dateSvc.parse('yyyy-MM-dd', data.txndate ))
        return data
    }
    
    def buildCashBreakdownReportData( bankacctid  ) {
        def fundSummary = entity.fundsummaries.find{ it.bankacctid == bankacctid }
        if( fundSummary.cash == 0 ) throw new Exception('There is no cash for deposit.')
        def denominations = []
        fundSummary.denominations.each {
            if( it.amount > 0 ) {
                denominations.add([
                    denomination : it.caption,
                    qty          : new BigDecimal(it.qty+''),
                    amount       : new BigDecimal(it.amount+'') ,
                ])
            }
        }
        return denominations
    }
    
    def buildCheckReportData( bankacctid, checktype ) {
        def fundSummary = entity.fundsummaries.find{ it.bankacctid  == bankacctid }
        def data = buildDepositReportData( fundSummary )
        if( ! fundSummary.noncashpayments ) throw new Exception('There are no checks for deposit.')
        def checks = fundSummary.noncashpayments.findAll{ it.checktype == checktype  }
        if( !checks ) throw new Exception('There are no ' + checktype + ' Checks for deposit.')
        data.noncashpayments = []
        checks.each {
            def extended = GroovyObjectDeserializer.instance.deserialize( it.extended )
            data.noncashpayments.add([
                bankname  : ( extended ? extended.bank : it.bank ),
                checkno   : ( extended ? extended.checkno : it.checkno ),
                checkdate : ( extended ? extended.checkdate : it.checkdate ),
                amount    : it.amount,
                
            ])
        }
        data.checktype = checktype
        data.branchname = fundSummary.branchname
        data.depositedbyname = entity.depositedbyname
        data.amountinwords = numSvc.convertString( data.noncash + "" )
        data.txndate = dateSvc.format( 'MM-dd-yyyy', dateSvc.parse('yyyy-MM-dd', data.txndate ))
        return data
    }
    
    void resetSummaryDenominations() {
        if( selectedSummary ) {
            selectedSummary.denominations = denominationOpener.handle.list 
        }
    }
    
    def addPaymentsHandler = { payments ->
        if( ! selectedSummary.noncashpayments ) {
            selectedSummary.noncashpayments = []
        }
        checkOverDeposit( payments )
        selectedSummary.noncashpayments.addAll( payments ) 
        openNonCashPayments.removeAll( payments )
        calculateSummaryDeposits()
        updateDenominationHandlerAmount()
        noncashHandler.load()
    }
    
    def addNonCashPayments() {
        def params = [cashierid:cashierid, addHandler:addPaymentsHandler, payments:openNonCashPayments]
        return InvokerUtil.lookupOpener('noncashpayment.select', params )
    }
    
    def addExternalPaymentHandler = { pmt ->
        pmt.source = 'MANUAL'
        addPaymentsHandler( [pmt] )
    }
    
    def addExternalPayment() {
        def params = [cashierid:cashierid, acceptHandler:addExternalPaymentHandler]
        return InvokerUtil.lookupOpener('payment.type.externalcheck', params )
    }
    
    void updateDenominationHandlerAmount() {
        denominationOpener?.handle.totalAmount = selectedSummary.cash
    }
    
    void calculateSummaryDeposits() {
        selectedSummary.noncash = selectedSummary.noncashpayments.sum( {it.amount} )
        selectedSummary.cash = selectedSummary.amount - selectedSummary.noncash
        binding.refresh('selectedSummary|totalNonCashPayment') 
    }
    
    void checkOverDeposit( payments ) {
        def totalDeposits = payments.sum( {it.amount} ) + selectedSummary.noncash 
        if( totalDeposits > selectedSummary.amount ) {
            throw new Exception('Total of selected payments is more than amount to be deposited.')
        }
    }
    
    void doRemoveItem( pmt ) {
        if( MsgBox.confirm('Remove selected non-cash payment?') ) {
            selectedSummary.noncashpayments.remove( pmt )
            pmt.checked = false 
            openNonCashPayments.add( pmt )
            selectedSummary.cash += pmt.amount 
            selectedSummary.noncash -= pmt.amount
            updateDenominationHandlerAmount()
            noncashHandler.load()
            binding.refresh('selectedSummary|totalNonCashPayment|denominationOpener')
        }
    }
    
    def summaryHandler = [
        getRows    : { return 50 },
        getColumns : {
            return [
                new Column(name:'fundname', caption:'Fund'),
                new Column(name:'bankacctno', caption:'Account No.', minWidth:100),
                new Column(name:'bankname', caption:'Bank Name', minWidth:100),
                new Column(name:'branchname', caption:'Branch', , minWidth:100),
                new Column(name:'accttype', caption:'Account', minWidth:100),
                new Column(name:'cash', caption:'Cash', type:'decimal', minWidth:120),
                new Column(name:'noncash', caption:'Non-Cash', type:'decimal', minWidth:120),
                new Column(name:'amount', caption:'Amount', type:'decimal', minWidth:120),
            ]
        },
        fetchList : { return entity.fundsummaries },
    ] as SubListModel
    
    def noncashHandler =[
        getRows    : { return 50 },
        getColumns : { 
            return [
                new Column(name:'paytype', caption:'Pay Type', maxWidth:80),
                new Column(name:'particulars', caption:'Particulars'),
                new Column(name:'amount', caption:'Amount', maxWidth:250),
            ]        
        },
        onRemoveItem : { pmt -> doRemoveItem(pmt) },
        fetchList    : { return selectedSummary?.noncashpayments },
    ] as SubListModel
    
    def liquidationHandler = [
        getRows    : { return 50 },
        getColumns : { 
            return [
                new Column(name:'liquidatingofficername', caption:'Liquidating Officer'),
                new Column(name:'liquidatingofficertitle', caption:'Job Title'),
                new Column(name:'txnno', caption:'Liquidation No.'),
                new Column(name:'txndate', caption:'Liquidation Date'),
                new Column(name:'amount', caption:'Amount', type:'decimal'),
            ]
        },
        fetchList  : { return entity.liquidations },
    ] as SubListModel
    
    def listHandler = [
        getRows     : { return 50 },
        getColumns  : { return [
            new Column( name:'fundname', caption:'Fund' ),
            new Column( name:'amount', caption:'Collection', type:'decimal', format:'#,##0.00' ),
            new Column( name:'amtdeposited', caption:'Amount to Deposit', type:'decimal', format:'#,##0.00' ),
        ]},
        fetchList   : { return entity.fundtotals },
    ] as PageListModel
    
    def getTotalNonCashPayment() {
        return CommonUtil.formatNumber('#,##0.00', selectedSummary?.noncash )
    }
    
    def getTotalCash() {
        return CommonUtil.formatNumber('#,##0.00', selectedSummary?.cash )
    }
    
    def getCashierid() {
        return OsirisContext.env.USERID 
    }
    
    def getCashiername() {
        return OsirisContext.env.USERNAME
    }    
    
    void lookupDenominationOpener() {
        denominationOpener = null
        if( selectedSummary ) {
            println '-'*50
            println selectedSummary
            denominationOpener = InvokerUtil.lookupOpener('cashreceipt:breakdown', [totalAmount:selectedSummary.cash, list:selectedSummary.denominations])
        }
    }
    
    def getSummarytotal() {
        if( entity && entity.fundsummaries ) {
            def total = entity.fundsummaries.amount.sum()
            if( ! total ) total = 0.0
            return total 
        }
        else {
            return 0.0 
        }
    }
 
    def getHtml() {
        return htmlSvc.getHtml( entity.objid )
    }
}

]]>

    </code>
    <pages>
        <page template="etracs2.tc.deposit.DepositInitPage"/>
        <page name="main" template="etracs2.tc.deposit.DepositPage"/>
        <page name="view" template="etracs2.tc.deposit.DepositViewPage"/>
    </pages>
        
</workunit>