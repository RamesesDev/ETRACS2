<workunit>
    <invokers>
        <invoker folderid="/menu/tc/master" action="init" caption="Chart of Account"/>
        <invoker type="formActions" action="_close" caption="Close"  />
        <invoker type="formActions" action="createCategory" caption="New Category" visibleWhen="#{account != null and (account.accttype=='CHART' or account.accttype=='CATEGORY') }" />
        <invoker type="formActions" action="createGLAccount" caption="New GLAccount" visibleWhen="#{account != null and account.accttype=='CATEGORY'}" />
        <invoker type="formActions" action="createSubAccount" caption="New Sub Account" visibleWhen="#{account != null and account.accttype=='GLACCOUNT'}" />
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;


class AccountMgmtController
{
    @Binding
    def binding;
    
    @Service("AccountService")
    def svc;
    
    def selectedItem;
    def searchText;
    def list;
    def opener;
    def mode = "view" ;
    
    void init() {
        list = svc.getList(null, 0);
        if( !list ) svc.init();
    }
    
    def listViewHandler = { smode -> 
        mode = smode;
        binding.refresh();
    }
    
    def createHandler = { account -> 
        addToSubList( account );
        mode = "view";
        binding.refresh();
    }
    
    def updateHandler = { acct ->
        acct.expanded = account.expanded;
        mode = "view";
        list.set( list.indexOf( account ), acct);
        binding.refresh();
    }
    
    def deleteHandler = { acct -> 
        list.remove( account );
        removeSubAccounts( account.objid );
        binding.refresh();
    }
    
    def editHandler = {
        mode = "edit";
        binding.refresh();
    }
    
    def cancelHandler = {
        mode = "view";
        binding.refresh();
    }

    def createCategory() {
        return InvokerUtil.lookupOpener("acctcategory:new", [
            parentAccount : account,
            createHandler : createHandler,
        ]);
    }
    
    def createGLAccount() {
        return InvokerUtil.lookupOpener("glaccount:new", [
            parentAccount : account,
            createHandler : createHandler,
        ]);
    }
    
    def createSubAccount() {
        return InvokerUtil.lookupOpener("subaccount:new", [
            parentAccount : account,
            createHandler : createHandler,
        ]);
    }
    
    void setSelectedItem( sitem ) {
        selectedItem = sitem;
        if( account ) {
            def openerType = "account:$account.accttype";
            opener = InvokerUtil.lookupOpener(openerType,[
                account         : account, 
                listViewHandler : listViewHandler,
                updateHandler   : updateHandler,
                deleteHandler   : deleteHandler,
                editHandler     : editHandler,
                cancelHandler   : cancelHandler,
            ]);
        }
        else {
            opener?.handle?.account = [:];
        }
    }
    
    def listHandler = [
        getRows    : { return 20; },
        getColumns : {
            return [
                new Column(name:"nodetext", caption:"Code", width:50)
            ];
        },
        fetchList : { return list; },
        onOpenItem  : { item, colName -> openItem(item) },
    ] as SubListModel;
    
    
    def openItem( item ) {
        if( ! item.expanded  ) {
            insertSubAccounts( item );
            item.expanded = true;    
        }
        else {
            removeSubAccounts( account.objid );
            item.expanded = false;
        }
        binding.refresh();
    }
    
    def getParentId() {
        return account?.objid;
    }
    
    void insertSubAccounts( item ) {
        def sublist = svc.getList( parentId, item.acctlevel+1 );
        list.addAll( list.indexOf(item)+1, sublist );
    }
    
    void addToSubList( newAccount ) {
        def itemSize = getSubAccountSize( account.objid );
        def index = list.indexOf( account ) + itemSize + 1;
        list.add(index, newAccount);
        if( itemSize == 0 ) account.expanded = true;
    }
    
    void removeSubAccounts( parentid ) {
        def subaccounts = getSubAccounts( parentid );
        subaccounts.each { acct -> 
            removeSubAccounts( acct.objid );
            list.removeAll( subaccounts );
        }
    }
    
    def getSubAccounts( parentid ) {
        def items = list.findAll { a -> a.parentid == parentid }
    }
    
    def getSubAccountSize( parentid ) {
        int size = 0;
        def items = list.findAll { a -> a.parentid == parentid }
        size += items.size();
        items.each { subacct ->
            size += getSubAccountSize( subacct.objid );
        }
        return size;
    }

    def getAccount() {
        return selectedItem;
    }    
}

]]>        
        
    </code>
    <pages>
        <page template="etracs2.tc.account.AcctMgmtPage"/>
    </pages>
</workunit>