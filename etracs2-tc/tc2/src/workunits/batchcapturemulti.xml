<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker folderid="/menu/tc" action="init" caption="Batch Capture (Multi-Account)" permission="batchcapture.create" />
        <invoker type="batchcapturemulti.create" action="init" caption="Batch Capture (New)" target="window" permission="batchcapture.create"/>
        <invoker type="batchcapturemulti.view"  action="open" caption="Batch Capture" target="window" permission="batchcapture.view"/>
        
        <invoker type="formActions" action="_close" caption="Close" mnemonic="c" shortcut="ctrl+W" icon="images/cancel.png" />
        <invoker type="formActions" action="save" caption="Save" mnemonic="s" shortcut="ctrl + S" icon="images/doc-save.png" visibleWhen="#{entity.docstate == DRAFT_STATE}" />
        <invoker type="formActions" action="delete" caption="Delete" mnemonic="d" shortcut="ctrl + D" icon="images/doc-delete.png" visibleWhen="#{entity.docstate == DRAFT_STATE and entity.objid != null }" permission="batchcapture.delete" />
        <invoker type="formActions" action="post" caption="Post" mnemonic="p" shortcut="ctrl + P" icon="images/doc-approve.png" visibleWhen="#{entity.docstate == DRAFT_STATE and entity.objid != null }" permission="batchcapture.post" />
    </invokers>
    
    <code lang="groovy">
<![CDATA[

import com.rameses.rcp.annotations.*
import com.rameses.rcp.common.*
import com.rameses.osiris2.client.*


public class BatchCaptureMultiController
{
    @Binding
    def binding

    @Service('ETRACSUserService')
    def userSvc

    @Service('AFControlService')
    def afcontrolSvc

    @Service('CollectionTypeService')
    def colltypeSvc 
    
    @Service('BatchCaptureService')
    def svc
    
    @Service('DateService')
    def dateSvc

    @Service('Var')
    def VAR
    
    def ondelete //handler

    def collector
    def afcontrol
    def collectiontype
    def defaulttxndate 
    def entity 
    def errormsg 
    def DRAFT_STATE = 'DRAFT'
    def POSTED_STATE = 'POSTED' 
    def selectedItem 
    
    
    def init() {
        return 'init' 
    }
    
    def open() {
        entity = svc.open( entity.objid )
        collector = entity.collector
        collectiontype = entity.collectiontype
        afcontrol = entity.afcontrol 
        defaulttxndate = entity.defaulttxndate
    }
    
    void save() {
        entity.amount = getTotal()
        def batch = svc.save( entity )
        entity.objid = batch.objid 
        entity.schemaname = batch.schemaname 
        entity.schemaversion = batch.schemaversion 
    }
    
    def delete() {
        if( MsgBox.confirm('Delete capture collection?') ) {
            svc.delete( entity.objid )
            if( ondelete ) ondelete()
            return '_close' 
        }
    }
    
    void post() {
        if( MsgBox.confirm('Post capture collection?') ) {
            svc.save( entity )
            svc.post( entity )
            entity.docstate = POSTED_STATE 
        }
    }

    def addItem() {
        if( entity.series > afcontrol.endseries ) 
            throw new Exception('Last series has already been added.')
            
        return InvokerUtil.lookupOpener('batchcapturemulti.add', [
            batch       : entity,
            afcontrol   : afcontrol, 
            onadd       : { receipt ->
                entity.items.add( receipt )
                entity.series += 1
                listHandler.load()
                binding.refresh('total')
            }
        ]) 
    }
    
    def editItem() {
        if( !selectedItem) return 
        return InvokerUtil.lookupOpener('batchcapturemulti.edit', [
            batch       : entity,
            entity      : selectedItem ,
            afcontrol   : afcontrol, 
            onedit    : { receipt ->
                listHandler.load()
                binding.refresh('total')
            }
        ]) 
    }
    
    void deleteLastItem() {
        if( ! entity.items ) return 
        if( MsgBox.confirm('Delete last item?') ) {
            entity.items.remove( entity.items.size() -1 )
            entity.series -= 1 
        }
    }
    
    
    def createBatch() {
        defaulttxndate = svc.validateTxnDate( defaulttxndate )
        entity = [
                docstate        : DRAFT_STATE, 
                opener          : 'batchcapturemulti', 
                collector 	: collector, 
                afcontrol	: afcontrol,
                collectiontype	: collectiontype,
                defaulttxndate  : defaulttxndate,
                items		: [],
                afid            : afcontrol.afid, 
                startseries     : afcontrol.currentseries,
                series          : afcontrol.currentseries,
                encodedbyid     : OsirisContext.env.USERID, 
                encodedby       : OsirisContext.env.USERNAME,
                collectorid     : collector.objid,
                collectorname   : collector.name, 
        ]
        return 'default'
    }
    
    def formatSeries( series, prefix, suffix, serieslength ) {
        if( !serieslength ) serieslength = 7
        def p = (prefix ? prefix + '-' : '')
        def s  = (suffix ? '-' + suffix : '')
        return p + (series+'').padLeft(serieslength, '0') + s  
    }

    public List getCollectorlist() {
        return userSvc.getCollectorList()
    }

    public List getAfcontrollist() {
        return afcontrolSvc.getInactiveSerialCaptureList( collector?.objid )
    }   

    public List getCollectiontypelist() {
        return colltypeSvc.getListByAfId( afcontrol?.afid ) 
    }
    
    def getTotal() {
        
        def total = entity.items.findAll{it.voided == false}.amount.sum()
        if( ! total ) 
            return 0.0
        return total
    }
    
    def listHandler = [
        getRows     : { return 50 },
        getColumns  : { return [
            new Column( name:'serialno', caption:'Serial No.', maxWidth:130 ),
            new Column( name:'txndate', caption:'Txn Date*', maxWidth:110),
            new Column( name:'paidby', caption:'Paid By*' ),
            new Column( name:'paidbyaddress', caption:'Address*' ),
            new Column( name:'amount', caption:'Amount*', type:'decimal', format:'#,##0.00'),
            new Column( name:'remarks', caption:'Remarks' ),
            new Column( name:'voided', caption:'Voided', type:'boolean'),
        ]},
        fetchList : { return entity?.items },
    ] as SubListModel 
    
    def itemHandler = [
        getColumns  : { return [
            new Column( name:'account', caption:'Account', expression:'#{accttitle}' ),
            new Column( name:'amount', caption:'Amount' ),
            new Column( name:'remarks', caption:'Remarks'),
        ]},
        fetchList 	: { return selectedItem?.items },
    ] as SubListModel 
}

]]>
    </code>
    
    <pages>
       <page name="init" template="etracs2.tc.collection.BatchCaptureInitPage" />
       <page template="etracs2.tc.collection.BatchCaptureMultiPage" />
    </pages>
</workunit>

