<workunit>
    <invokers>
        <invoker folderid="/menu/tc/txn" action="init" caption="Issuance of Receipt and Accountable Form" permission="iraf.viewlist"/>
        
        <invoker type="formActions" action="create" shortcut="ctrl N" visibleWhen="#{mode == 'view'}" immediate="true" caption="New" mnemonic="n" icon="images/doc-new.png" permission="iraf.create"/>
        <invoker type="formActions" action="edit" visibleWhen="#{mode == 'view' and entity.objid != null and entity.docstate == 'DRAFT'}" immediate="true" caption="Edit" mnemonic="e" icon="images/edit.png" permission="iraf.edit"/>
        <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view' and entity.docstate == 'DRAFT'}" caption="Save" mnemonic="s" icon="images/save.png"/>
        <invoker type="formActions" action="cancel" visibleWhen="#{mode != 'view' and entity.docstate == 'DRAFT' }"  immediate="true" caption="Cancel" mnemonic="c" icon="images/doc-cancel.png"/>
        <invoker type="formActions" action="delete" visibleWhen="#{mode == 'view' and entity.objid != null and entity.docstate == 'DRAFT'}" immediate="true" caption="Delete" mnemonic="d" icon="images/doc-delete.png" permission="iraf.delete"/>
        <invoker type="formActions" action="approve" visibleWhen="#{mode == 'view' and entity.objid != null and entity.docstate == 'DRAFT'}" immediate="true" caption="Approve" mnemonic="a" icon="images/doc-approve.png" permission="iraf.approve"/>
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import java.rmi.server.UID;

class IRAFController
{
    @ChangeLog(prefix=["entity"])
    def changeLog;
    
    @Binding
    def binding;
    
    @Service("IRAFService")
    def svc;
    
    def selectedItem;
    def mode = "view" ;
    def entity = [:];
    def searchText;
    def riv 
    
    public void init(){
        create();
        mode = "view";
    }
    
    public void search(){
        listHandler.load();
        binding.refresh("selectedItem");
    }
    
    def listHandler = [
        getRows    : { return 25; },
        getColumns : {
            return [
                new Column(name:"txnno", caption:"IRAF No.", minWidth:90),
                new Column(name:"docstate", caption:"State", minWidth:50),
                new Column(name:"preparedby", caption:"Prepared By", width:200),
                new Column(name:"rivrequestedby", caption:"Requested By", width:200)
            ];
        },
        fetchList : { 
            return svc.getList( searchText, it );
        }
    ] as PageListModel;
    
    def receivedHandler = [
        getRows    : { return 10; },
        onRemoveItem : { item -> 
            if( mode == "view" ) return false;
            if( MsgBox.confirm("Remove selected item?") ) {
                def ri = entity.requesteditems.find{ it.afid == item.afid };
                ri.qtyreceived -= item.qtyreceived;
                entity.rcvitems.remove( item );
                binding.refresh();
            }
        },
        
        getColumns : {
            return [
                new Column(name:"afid", name:"afid", caption:"AF No."),
                new Column(name:"stuborqty", caption:"Stub No./Qty Received"),
                new Column(name:"prefix", caption:"Preffix"),
                new Column(name:"startseries", caption:"Start Series", format:"#"),
                new Column(name:"endseries", caption:"End Series", format:"#", type:"integer"),
                new Column(name:"suffix", caption:"Suffix")
            ];
        },
        
        fetchList : {
            return entity.rcvitems.each{
                it.stuborqty = ( entity.info.rivtype == 'LGU' ) ? it.qtyreceived : it.stubno;
            };
        }
        
    ] as SubListModel;
    
    def receivedItem;
    def requestedHandler = [
        getRows    : { return 10; },
        getColumns : {
            return [
                new Column(name:"afid", caption:"AF No.", minWidth:60),
                new Column(name:"qtyrequested", caption:"Qty. Requested"),
                new Column(name:"qtydelivered", caption:"Qty. Delivered"),
                new Column(name:"qtyreceived", caption:"Qty. Received")
            ];
        },
        fetchList    : { return entity.requesteditems; }
    ] as SubListModel;
    
    public void create(){
        entity = [
            docstate: "DRAFT",
            info: [:],
            rcvitems: []
        ];
        riv = null
        mode = "create";
    }
    
    void setRiv( riv ){
        this.riv = riv 
        if( riv ){
            def txnno = this.entity.txnno;
            this.entity = svc.create( riv.objid );
            
            if( !this.entity.txnno ){
                this.entity.txnno = txnno;
            }
            
            this.entity.info.txnno = this.entity.info.txnno;
            this.entity.preparedby = (env.USERNAME) ? env.USERNAME : 'SYSTEM';
            this.entity.preparedbytitle = (env.JOBTITLE) ? env.JOBTITLE : 'SYSTEM';
            
            this.entity.info.preparedby = this.entity.preparedby;
            this.entity.info.preparedbytitle = this.entity.preparedbytitle;
            binding.refresh();
        }
        else {
            create()
            requestedHandler.load()
            receivedHandler.load()
            binding.refresh('entity.*')
        }
    }
    
    def getLookupRiv() {
        return InvokerUtil.lookupOpener("riv:lookup", [:] );
    }
    
    def refreshHandler = {
        binding.refresh();
    }
    
    def add(){
        return InvokerUtil.lookupOpener("iraf:${entity.info.rivtype}", [ refreshHandler: refreshHandler, iraf: entity, svc: svc ] );
    }
    
    void save(){
        entity = svc.save( entity );
        mode = 'view';
    }
    
    void delete(){
        if( MsgBox.confirm( "Are you sure you want to delete this record?" ) ){
            svc.delete( entity.objid );
            init();
        }
    }
    
    void edit(){
        mode = 'create';
    }
    
    void approve(){
        if( MsgBox.confirm("Do you want approve?") )
            entity = svc.approve( entity.objid );
    }
    
    void cancel(){
        init();
        if( selectedItem ){
            setSelectedItem( selectedItem );
        }
    }
    
    def getEnv() {
        return OsirisContext.env;
    }
    
    void setSelectedItem( item ) {
        selectedItem = item;
        if( mode !=  "create") {
            this.entity = svc.open( selectedItem?.objid );
            riv = [txnno:entity.rivno]
        }
    }
    
    def viewCancelledSeries(){
        return InvokerUtil.lookupOpener("iraf:irafcancelledseries", [iraf: this.entity, svc: svc, rcvitem: receivedItem]);
    }
    
}
]]>        
        
    </code>
    <pages>
        <page template="etracs2.tc.af.IRAFPage"/>
    </pages>
</workunit>