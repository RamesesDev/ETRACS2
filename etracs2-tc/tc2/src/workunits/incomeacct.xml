<workunit>
    <invokers>
        <invoker type="tc.master" action="init" caption="Income Accounts" permission="incomeacct.viewlist" icon="images/folder.png" target="window" index="3"/>
        <invoker folderid="/menu/tc/master" action="init" caption="Income Accounts" permission="incomeacct.viewlist" target="window"/>
        
        <invoker type="formActions" action="create" shortcut="ctrl N" visibleWhen="#{mode == 'view'}" immediate="true" caption="New" mnemonic="n" icon="images/doc-new.png"  permission="incomeacct.create"/>
        <invoker type="formActions" action="edit" shortcut="ctrl E" visibleWhen="#{mode == 'view' and entity.objid != null and entity.docstate != 'DRAFT'}" immediate="true" caption="Edit" mnemonic="e" icon="images/edit.png" permission="incomeacct.edit"/>
        <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view'}" caption="Save" mnemonic="s" icon="images/save.png"/>
        <invoker type="formActions" action="cancel" visibleWhen="#{mode != 'view'}"  immediate="true" caption="Cancel" mnemonic="c" icon="images/doc-cancel.png"/>
        <invoker type="formActions" action="delete" shortcut="ctrl D" visibleWhen="#{mode == 'view' and entity.objid != null}" immediate="true" caption="Delete" mnemonic="d" icon="images/doc-delete.png" permission="incomeacct.delete" />
        <invoker type="formActions" action="approve" shortcut="ctrl A" visibleWhen="#{mode == 'view' and selectedItem.objid != null and selectedItem.docstate == 'DRAFT'}" immediate="true" caption="Approve" mnemonic="a" icon="images/doc-approve.png" permission="incomeacct.approve"/>
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import java.rmi.server.UID

class IncomeAcctController extends etracs2.groovy.CRUDController
{
    @Service("IncomeAcctService")
    def svc;
    
    @Service("IncomeAcctGroupService")
    def groupSvc;
    
    
    def ngas
    def ngassubacct
    def sre 
    def sresubacct
    
    def getService() { return svc; }
    def getCreateFocusComponent() { return "entity.acctno"; }
    def getEditFocusComponent() { return "entity.acctno"; }
    def getListHandler() { return listHandler; }
    
    
    def getList( searchText, params ) {
        if( ! params ) params = [_start:0, _limit:25]
        list = svc.getList( searchText, params )
        return list
    }
    
    int _start = -1
    
    def listHandler = [
        getRows    : { return 25 },
        getColumns : {
            return [
                new Column(name:"acctno", caption:"Acct No.", minWidth:60),
                new Column(name:"accttitle", caption:"Title", width:250),
                new Column(name:"docstate", caption:"State", width:120),
            ];
        },
        fetchList : { 
            if( _start != it._start ) {
                list = getList( searchText, it )
                _start = it._start 
            }
            return list;
        },
    ] as PageListModel
   
        
    
    def createEntity() {
        ngas = null
        ngassubacct =null
        sre = null
        sresubacct = null
        
        return [
            objid        : 'IA' + new UID(),
            docstate     : 'DRAFT',
            defaultvalue : 0.0,
        ];
    }
    
    def getFundList() {
        def fund = svc.getFundList();
        return fund.fundname;
    }
    
    def getSystemTypeList() {
        return svc.getSystemTypeList();
    }
    
    def getAmountTypeList() {
        return ['FIX', 'FIXUNIT'];
    }
    
    
    void open( objid ) {
        super.open( objid )
        ngas = [acctid:entity.ngasid, acctcode:entity.ngascode, accttitle:entity.ngastitle]
        ngassubacct = [acctid:entity.ngassubacctid, acctcode:entity.ngassubacctcode, accttitle:entity.ngassubaccttitle]
        sre = [acctid:entity.sreid, acctcode:entity.srecode, accttitle:entity.sretitle]
        sresubacct = [acctid:entity.sresubacctid, acctcode:entity.sresubacctcode, accttitle:entity.sresubaccttitle]
    }
    
    def getLookupNGAS() {
        return InvokerUtil.lookupOpener("account:lookup.ngas", [:]);        
    }
    
    void setNgas( ngas )  {
        this.ngas = ngas;
        entity.ngasid = ngas?.objid;
        entity.ngascode = ngas?.acctcode;
        entity.ngastitle = ngas?.accttitle;
    }
    
    
    def lookupNgasSubAcct() {
        return InvokerUtil.lookupOpener("account:lookup.subngas", [searchText:entity.ngassubaccttitle, parentid:entity.ngasid, onselect:selectNgasSubAcctHandler]);        
    }
    
    def selectNgasSubAcctHandler = { acct ->
        ngassubacct = acct 
        entity.ngassubacctid = acct?.objid;
        entity.ngassubacctcode = acct?.acctcode;
        entity.ngassubaccttitle = acct?.accttitle;
        binding.refresh("entity.*|acct.*");
    }
    
    def getLookupSRE() {
        return InvokerUtil.lookupOpener("account:lookup.sre", [:]);        
    }
    
    void setSre( sre ) {
        this.sre = sre;
        entity.sreid = sre?.objid;
        entity.srecode  = sre?.acctcode;
        entity.sretitle = sre?.accttitle;
    }
    
    def lookupSreSubAcct() {
        return InvokerUtil.lookupOpener("account:lookup.subsre", [searchText:entity.sresubaccttitle, parentid:entity.sreid, onselect:selectSreSubAcctHandler]);        
    }
    
    def selectSreSubAcctHandler = { acct ->
        entity.sresubacctid = acct?.objid;
        entity.sresubacctcode = acct?.acctcode;
        entity.sresubaccttitle = acct?.accttitle;
        binding.refresh("entity.*");
    }
    
    List getIncomeaccountgrouplist() {
        def list = groupSvc.getList(null, null )
        return list.collect{ it.objid }
    }
    
}

]]>        
        
    </code>
    <pages>
        <page template="etracs2.tc.account.IncomeAcctPage"/>
    </pages>
</workunit>