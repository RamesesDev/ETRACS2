<workunit>
    <invokers>
        <invoker type="home.action" action="init" caption="Accountable Form Inventory" permission="afinventory.view" icon="images/folder.png" target="window"/>
        <invoker folderid="/menu/tc/txn" action="init" caption="Accountable Form Inventory" permission="afinventory.view" target="window"/>
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import com.rameses.osiris2.reports.*;
import java.rmi.server.UID;

class AFInventoryController
{
    @ChangeLog(prefix=["entity"])
    def changeLog;
    
    @Binding
    def binding;
    
    @Service("AFInventoryService")
    def svc;
    
    @Service("Var")
    def var;
    
    def selectedItem;
    def list;
    def listCredit;
    def searchText;
    def docstate;
    def reportData = [];
    def afsummary;
    
    def formActions;
    
    
    void init() {
       println "init";
       list = svc.getList( searchText, docstate );
       formActions = InvokerUtil.lookupActions('afinventory.reports', [:])
    }
    
    def getStateList(){
        return [ 'ALL', 'OPEN', 'CLOSED' ];
    }
    
    void setDocstate( docstate ){
        this.docstate = docstate;
        list = svc.getListByDocState( docstate );
        inventoryHandler.load();
        inventoryCreditHandler.load();
    }
    
    void search(){
        list = svc.getList( searchText, docstate );
        if( !list ) throw new Exception( "No records found." );
        inventoryHandler.load();
        inventoryCreditHandler.load();
    }

    def inventoryHandler = [
        getRows    : { return 20; },
        getColumns : {
            return [
                new Column( name:"docstate", caption:"State" ),
                new Column( name:"irafno", caption:"IRAF No." ),
                new Column( name:"iraftype", caption:"Type" ),
                new Column( name:"afid", caption:"AF No.", minWidth:60 ),
                new Column( name:"aftype", caption:"AF Type", minWidth:60 ),
                new Column( name:"stubfrom", caption:"StubFrom", minWidth:50 ),
                new Column( name:"stubto", caption:"StubTo", minWidth:50 ),
                new Column( name:"qtyonhand", caption:"QtyonHand", minWidth:30 ),
                new Column( name:"qtyissued", caption:"QtyIssued", minWidth:30 ),
                new Column( name:"prefix", caption:"Prefix", minWidth:20 ),
                new Column( name:"startseries", caption:"Start", minWidth:50, format:'#0' ),
                new Column( name:"endseries", caption:"End", minWidth:50, format:'#0' ),
                new Column( name:"suffix", caption:"Suffix", minWidth:20 ),
                new Column( name:"issuedfrom", caption:"IssuedFrom", minWidth:50, format:'#0' ),
                new Column( name:"issuedto", caption:"IssuedTo", minWidth:50, format:'#0'    ),
            ];
        },
        fetchList : { 
            return list;
        },
    ] as SubListModel;
    
    def inventoryCreditHandler = [
        getRows    : { return 20; },
        getColumns : {
            return [
                new Column( name:"docstate", caption:"State" ),
                new Column( name:"irafno", caption:"IRAF No.", minWidth:120 ),
                new Column( name:"iraftype", caption:"Type" ),
                new Column( name:"afid", caption:"AF No.", minWidth:60 ),
                new Column( name:"aftype", caption:"AF Type", minWidth:60 ),
                new Column( name:"qtyissued", caption:"QtyIssued", minWidth:30 ),
                new Column( name:"prefix", caption:"Prefix", minWidth:20 ),
                new Column( name:"startseries", caption:"Start", minWidth:30, format:'#0' ),
                new Column( name:"endseries", caption:"End", minWidth:30,format:'#0' ),
                new Column( name:"suffix", caption:"Suffix", minWidth:30 ),
            ];
        },
        fetchList : { 
            return listCredit;
        },
    ] as SubListModel;
    
    def afListHandler = [
        getRows     : { return 5; },
        getColumns  : {
            return [
                new Column( name:"afid", caption:"AF No." ),
                new Column( name:"aftype", caption:"Type" ),
                new Column( name:"totalqty", caption:"Qty On Hand", type:"integer" )
            ];
        },
        fetchList   : {
            return svc.getSummaryList();
        }
    ] as SubListModel;
    
    void setAfsummary( item ){
        afsummary = item;
        
        if( afsummary ) loadItems( afsummary.afid );
    }
    
    void loadItems( afid ){
        list = svc.loadInventory( afid );
    }
   
    void setSelectedItem( item ) {
        selectedItem = item;
        
        if( selectedItem ) loadCredits( selectedItem );
    }
    
    void loadCredits( item ) {
        listCredit = svc.loadCredit( item );
    }
    
    def view(){
        def viewReport = InvokerUtil.lookupOpener("report:consolidatedreport",[:]);
        return viewReport;
    }
}

]]>        
        
    </code>
    <pages>
        <page template="etracs2.tc.af.AFInventoryPage"/>
    </pages>
</workunit>