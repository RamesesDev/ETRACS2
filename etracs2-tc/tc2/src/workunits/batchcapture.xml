<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker folderid="/menu/tc" action="init" caption="Batch Capture" permission="batchcapture.create" />
        <invoker type="batchcapture.create" action="init" caption="Batch Capture (New)" target="window" permission="batchcapture.create"/>
        <invoker type="batchcapture.view"  action="open" caption="Batch Capture" target="window" permission="batchcapture.view"/>
        
        <invoker type="formActions" action="_close" caption="Close" mnemonic="c" shortcut="ctrl + W" icon="images/cancel.png" />
        <invoker type="formActions" action="save" caption="Save" mnemonic="s" shortcut="ctrl + S" icon="images/doc-save.png" visibleWhen="#{entity.docstate == DRAFT_STATE}" />
        <invoker type="formActions" action="delete" caption="Delete" mnemonic="d" shortcut="ctrl + D" icon="images/doc-delete.png" visibleWhen="#{entity.docstate == DRAFT_STATE and entity.objid != null }" permission="batchcapture.delete" />
        <invoker type="formActions" action="post" caption="Post" mnemonic="p" shortcut="ctrl + P" icon="images/doc-approve.png" visibleWhen="#{entity.docstate == DRAFT_STATE and entity.objid != null }" permission="batchcapture.post" />
    </invokers>
    
    <code lang="groovy">
<![CDATA[

import com.rameses.rcp.annotations.*
import com.rameses.rcp.common.*
import com.rameses.osiris2.client.*


public class BatchCaptureController
{
    @Binding
    def binding

    @Service('ETRACSUserService')
    def userSvc

    @Service('AFControlService')
    def afcontrolSvc

    @Service('CollectionTypeService')
    def colltypeSvc 
    
    @Service('BatchCaptureService')
    def svc
    
    @Service('DateService')
    def dateSvc

    @Service('Var')
    def VAR
    
    def ondelete //handler

    def collector
    def afcontrol
    def collectiontype
    def defaulttxndate 
    def entity 
    def errormsg 
    def DRAFT_STATE = 'DRAFT'
    def POSTED_STATE = 'POSTED' 
    def selectedItem 
    
    
    def init() {
        return 'init' 
    }
    
    def open() {
        entity = svc.open( entity.objid )
        collector = entity.collector
        collectiontype = entity.collectiontype
        afcontrol = entity.afcontrol 
        defaulttxndate = entity.defaulttxndate
    }
    
    void save() {
        entity.amount = getTotal()
        def batch = svc.save( entity )
        entity.objid = batch.objid 
        entity.schemaname = batch.schemaname 
        entity.schemaversion = batch.schemaversion 
    }
    
    def delete() {
        if( MsgBox.confirm('Delete capture collection?') ) {
            svc.delete( entity.objid )
            if( ondelete ) ondelete()
            return '_close' 
        }
    }
    
    void post() {
        if( MsgBox.confirm('Post capture collection?') ) {
            svc.save( entity )
            svc.post( entity )
            entity.docstate = POSTED_STATE 
        }
    }

    def createBatch() {
        defaulttxndate = svc.validateTxnDate( defaulttxndate )
        entity = [
                docstate        : DRAFT_STATE, 
                opener          : 'batchcapture', 
                collector 	: collector, 
                afcontrol	: afcontrol,
                collectiontype	: collectiontype,
                defaulttxndate  : defaulttxndate,
                items		: [],
                afid            : afcontrol.afid, 
                startseries     : afcontrol.currentseries,
                series          : afcontrol.currentseries,
                encodedbyid     : OsirisContext.env.USERID, 
                encodedby       : OsirisContext.env.USERNAME,
                encodedbytitle  : OsirisContext.env.JOBTITLE,
                collectorid     : collector.objid,
                collectorname   : collector.name, 
        ]
        return 'default'
    }

    def lookupAccount = InvokerUtil.lookupOpener( 'incomeacct:lookup', [:] )

    def allowColumnEdit = { item ->
        if( item.series <= afcontrol.endseries ) return true 
        if( entity.series <= afcontrol.endseries ) return true
        return false
    } as Map
    
    def listHandler = [
        createItem  : { return createItem() },
        getRows     : { return 50 },
        getColumns  : { return [
            new Column( name:'serialno', caption:'Serial No.', maxWidth:130 ),
            new Column( name:'txndate', caption:'Txn Date*', editable:'true', maxWidth:110, editableWhen:'#{root.allowColumnEdit[item]}' ),
            new Column( name:'paidby', caption:'Paid By*', editable:'true', editableWhen:'#{root.allowColumnEdit[item]}' ),
            new Column( name:'paidbyaddress', caption:'Address*', editable:'true', editableWhen:'#{root.allowColumnEdit[item]}' ),
            new Column( name:'account', caption:'Account*', type:'lookup', expression:'#{accttitle}', handler:lookupAccount, editable:'true', minWidth:250, editableWhen:'#{root.allowColumnEdit[item]}' ),
            new Column( name:'amount', caption:'Amount*', type:'decimal', format:'#,##0.00', editable:'true' , editableWhen:'#{root.allowColumnEdit[item]}' ),
            new Column( name:'remarks', caption:'Remarks', editable:'true', editableWhen:'#{root.allowColumnEdit[item]}' ),
            new Column( name:'voided', caption:'Voided', type:'boolean', editable:'true' , editableWhen:'#{root.allowColumnEdit[item]}' ),
        ]},
        validate 	: { li -> validateItem( li.item ) },
        onAddItem  : { item -> 
            entity.items.add( item ) 
            entity.series += 1 
            binding.refresh('total')
        },
        onRemoveItem  : { item ->
            if( item != entity.items.get( entity.items.size()-1) )      
                return false 
            if( MsgBox.confirm("Delete selected item?") ) {
                entity.items.remove( item )
                entity.series -= 1 
                binding.refresh('total')
            }
        },
        fetchList 	: { return entity?.items },
    ] as SubListModel 

    void validateItem( item ) {
        try {
            required( 'Txn Date', item.txndate )
            item.txndate = svc.validateTxnDate( item.txndate )
            required( 'Paid By', item.paidby )
            required( 'Address', item.paidbyaddress )
            required( 'Account', item.account )
            required( 'Amount', item.amount )
            if( item.amount <= 0 ) throw new Exception('Amount must be greater than zero.')
            defaulttxndate = item.txndate 
            errormsg = null
            binding.refresh( 'errormsg|total' ) 
        }
        catch( e ) {
            errormsg = e.message 
            binding.refresh( 'errormsg' ) 
            throw e 
        }
    }


    void required( caption, value ) {
        if( ! value ) throw new Exception(caption + ' is required.')
    }


    def createItem() {
        return [
            txndate         : defaulttxndate, 
            paidbyaddress   : VAR.lgu_name,
            series          : entity?.series,
            voided          : false, 
            serialno        : formatSeries( entity?.series, afcontrol?.prefix, afcontrol?.suffix, afcontrol?.serieslength ), 
        ]
    }

    def formatSeries( series, prefix, suffix, serieslength ) {
        if( !serieslength ) serieslength = 7
        def p = (prefix ? prefix + '-' : '')
        def s  = (suffix ? '-' + suffix : '')
        return p + (series+'').padLeft(serieslength, '0') + s  
    }

    public List getCollectorlist() {
        return userSvc.getCollectorList()
    }

    public List getAfcontrollist() {
        return afcontrolSvc.getInactiveSerialCaptureList( collector?.objid )
    }   

    public List getCollectiontypelist() {
        return colltypeSvc.getListByAfId( afcontrol?.afid ) 
    }
    
    def getTotal() {
        
        def total = entity.items.findAll{it.voided == false}.amount.sum()
        if( ! total ) 
            return 0.0
        return total
    }
}

]]>
    </code>
    
    <pages>
       <page name="init" template="etracs2.tc.collection.BatchCaptureInitPage" />
       <page template="etracs2.tc.collection.BatchCapturePage" />
    </pages>
</workunit>

