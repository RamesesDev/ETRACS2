import com.rameses.common.*
import com.rameses.annotations.*
import java.rmi.server.UID

class PostCaptureService
{
	@PersistenceContext('main')
	def em
	
	@Service('LogService')
	def logService
	
	@Service('DateService')
	def dateService
	
	def SCHEMA = 'postcapture:postcapture'
	def SCHEMAVERSION = '1.0'
	
	def DRAFT_STATE = 'DRAFT'
	def POSTED_STATE = 'POSTED'
	
	@ProxyMethod
	public def create( collector ) {
		def entity = [
            docstate       : DRAFT_STATE,
			collectorid    : collector.collectorid,
			collectorname  : collector.collectorname,
			collectortitle : collector.collectortitle,
            summaries      : loadCapturedReceiptSummaries( collector.collectorid)
        ]
		//add validation checks
		entity.totalcount = entity.summaries.sum( {it.icount} )
		entity.amount = entity.summaries.sum( {it.amount} )
		return entity 
	}
	
	@ProxyMethod
	public List loadCapturedReceiptSummaries( collectorid ) {
		List summaries = em.sqlContext.createNamedQuery('postcapture:getCapturedReceiptsSummaries').setParameter('collectorid', collectorid).resultList
		if( ! summaries ) throw new Exception('There are no capture receipts.')
		return summaries
	}
	
	@ProxyMethod
	public List getCapturedReceipts( collectorid, afid ) {
		if( ! afid ) return []
		return em.sqlContext.createNamedQuery('postcapture:getCapturedReceipts').setParameters([collectorid:collectorid, afid:afid]).resultList
	}
	
	@ProxyMethod
	public def post( entity ) {
		entity.objid = 'PC' + new UID()
		entity.schemaname = SCHEMA
		entity.schemaversion = SCHEMAVERSION
		entity.state = POSTED_STATE
		entity.dtposted = new Date()
		validate( entity )		
		em.sqlContext.createNamedExecutor('postcapture:postCapturedReceipts').setParameter('collectorid', entity.collectorid).execute()
		em.sqlContext.createNamedExecutor('postcapture:postCapturedReceiptList').setParameter('collectorid', entity.collectorid).execute()
		em.create( entity.schemaname, entity )
		return entity 
	}
	
	void validate( entity ) {
		em.validate( entity.schemaname, entity )
		def summaries = loadCapturedReceiptSummaries( entity.collectorid )
		def totalcount = summaries.sum( {it.icount} )
		def totalamount = summaries.sum( {it.amount} )
		if( entity.totalcount != totalcount ) throw new Exception('A new captured receipt was added.\nPlease redo the transaction.')
		if( entity.amount != totalamount ) throw new Exception('Some amounts were modified.\nPlease redo the transaction.')
	}
	
	
}