import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID;
import java.text.DecimalFormat;

class LiquidationService {

	@PersistenceContext("main")
	def em;
	
	@Service("RemittanceService")
	def remsvc;
	
	@Service("ETRACSUserService")
	def usrsvc;
	
	@Service("SequenceService")
	def seqsvc;
	
	@Service("DateService")
	def dtsvc;
	
	@Service("HTMLService")
	def htmlsvc;
	
	def SCHEMANAME = "liquidation:liquidation";
	def SCHEMAVERSION = "1.0";
	def LISTSCHEMANAME = "liquidation:liquidationlist";
	
	@ProxyMethod
	public def getList( searchText, params ) {
		if ( !searchText )
			return em.sqlContext.createNamedQuery( "liquidation:getList" ).resultList;
		return [];
	}
	
	@ProxyMethod
	public def create( liq ) {
		try {
		validate( liq );
		liq.objid = "LIQ" + new UID();
		liq.schemaname = SCHEMANAME;
		liq.schemaversion = SCHEMAVERSION;
		liq.docstate = 'OPEN';
		liq.dtposted = dtsvc.getServerDate()
		liq.info.txnno = generateLiqNo();
		liq.info.txndate = dtsvc.format( "yyyy-MM-dd", liq.dtposted);
		closeRemittance( liq );
		liq.fundsummaries = getFundSummaries( liq.objid );
		em.validate( SCHEMANAME, liq );
		em.create( SCHEMANAME, liq );
		createListingItem( liq );
		return liq;
		} catch (ex) { throw ex; }
	}
	
	private void validate( liq ) {
		def totalcash = 0.00;
		for (denom in liq.info.denominations) {
			totalcash += denom.amount;
		}
		if ( totalcash != liq.info.totalcash )
			 throw new Exception( "Cash Received must be equal to Cash Expected." );
		def liqTemp = createLiquidation( liq );
		if (liq.remittances.size() != liqTemp.remittances.size() )
			throw new Exception( "There are new transactions not included in this Liquidation." );
	}
	
	private def generateLiqNo() {
		def dt = dtsvc.getServerDate();
		def cal = Calendar.instance;
		cal.time = dt;
		def yr = cal.get(Calendar.YEAR);
		def series = seqsvc.getNextFormattedSeries( 'LIQ-' + yr );
		
		return 'LIQ-' + yr + '-' + series;
	}
	
	private void closeRemittance( liq ) {
		for ( collector in getSubordinates( liq.info.liquidatingofficerid ) ) {
			def params = [
				liquidationid : liq.objid,
				liquidationno : liq.info.txnno,
				liquidationdate : liq.info.txndate,
				liquidatingofficerid : liq.info.liquidatingofficerid,
				liquidatingofficername : liq.info.liquidatingofficername,
				liquidatingofficertitle : liq.info.liquidatingofficertitle,
				collectorid : collector.objid
			];
			em.sqlContext.createNamedExecutor( "liquidation:closeRemittances" ).setParameters( params ).execute();
			em.sqlContext.createNamedExecutor( "liquidation:closeRemittanceLists" ).setParameters( params ).execute();
		}
	}
	
	private void createListingItem( liq ) {
		def cal = Calendar.instance;
		cal.time = dtsvc.parse( "yyyy-MM-dd", liq.info.txndate );
		em.create( LISTSCHEMANAME, [
			objid : liq.objid,
			docstate : liq.docstate,
			txnno : liq.info.txnno,
			txndate : liq.info.txndate,
			iyear : cal.get( Calendar.YEAR ),
			imonth : cal.get( Calendar.MONTH ),
			iday : cal.get( Calendar.DATE ),
			liquidatingofficerid : liq.info.liquidatingofficerid,
			liquidatingofficername : liq.info.liquidatingofficername,
			amount : liq.info.amount,
			totalcash : liq.info.totalcash,
			totalotherpayment : liq.info.totalotherpayment
		] );
	}
	
	@ProxyMethod
	public def createLiquidation( liq ) {
		liq.info.amount = 0.0;
		liq.info.totalcash = 0.0;
		liq.info.totalotherpayment = 0.0;
		def subordinates = getSubordinates( liq.info.liquidatingofficerid );
		for (collector in subordinates) {
			def remits = em.sqlContext.createNamedQuery( "liquidation:getUnliquidatedRemittanceByCollector" ).setParameter( "collectorid", collector.objid ).resultList;
			if ( remits ) {
				liq.remittances += remits;
				liq.otherpayments += em.sqlContext.createNamedQuery( "liquidation:getUnliquidatedRemittanceOtherPaymentsByCollector" ).setParameter( "collectorid", collector.objid ).resultList;
				def reminfo = em.sqlContext.createNamedQuery( "liquidation:getUnliquidatedRemittanceInfoByCollector" ).setParameter( "collectorid", collector.objid ).singleResult;
				liq.info.amount += reminfo.totalamount;
				liq.info.totalcash += reminfo.totalcash;
				liq.info.totalotherpayment += reminfo.totalotherpayment;
			}
		}
		
		if ( ! liq.remittances )
			throw new IllegalStateException( "There are no remittances." );
		
		return liq;
	}
	
	private def getSubordinates( userid ) {
		return usrsvc.getCollectorsByLqOfficerId( userid );
	}
	
	@ProxyMethod
	public def open( objid ) {
		if (!objid)
			return null;
		def liq = em.read( SCHEMANAME, [objid:objid] );
		liq.remittances = em.sqlContext.createNamedQuery( "liquidation:getRemittancesByLiquidation" ).setParameter( "liquidationid", objid ).resultList;
		liq.otherpayments = em.sqlContext.createNamedQuery( "liquidation:getOtherPaymentsByLiquidation" ).setParameter( "liquidationid", objid ).resultList;

		return liq;
	}
	
	
	@ProxyMethod
	public def getHtml( liq ) {
		def html = "";
		if ( !liq )
			return html;
		
		def decformat = new DecimalFormat("#,##0.00");
		def numformat = new DecimalFormat("#,##0");
		
		def style = htmlsvc.getStyle();
		/* HTML Header */
		html = """
			<html>
			<head>
				<style>
					${style}
				</style>
			</head>
			<body>
		""";
		
		/* Liquidation Info */
		def amount = decformat.format( liq.info.amount );
		html += """
			<div class='data-group'>
				<div class='data-header'>Info</div>
				<table class='data-field'>
					<tr>
						<td class='caption'>Liquidation No. :</td>
						<td class='blue-header'>${liq.info.txnno}</td>
					</tr>
					<tr>
						<td class='caption'>Status :</td>
						<td class='status'>${liq.docstate}</td>
					</tr>
					<tr>
						<td class='caption'>Date :</td>
						<td class='value'>${liq.info.txndate}</td>
					</tr>
					<tr>
						<td class='caption'>Liquidating Officer :</td>
						<td class='value'>${liq.info.liquidatingofficername}</td>
					</tr>
					<tr>
						<td class='caption'>Amount :</td>
						<td class='value'>${amount}</td>
					</tr>
				</table>
			</div>
		""";
		
		/* Cash Breakdown */
		html += """
			<div class='data-group'>
				<div class='data-header'>Breakdown</div>
				<table class='data-table'>
					<tr><th>Denomination</th><th>Qty</th><th>Amount</th></tr>
			
		""";
		for (denom in liq.info.denominations) {
			html += """
				<tr>
					<td class='align-right'>${denom.caption} x </td>
					<td class='align-right'>${denom.qty}</td>
					<td class='align-right'>${denom.amount}</td>
				</tr>
			""";
		}
		def totalcash = decformat.format( liq.info.totalcash );
		html += """
					<tr class='summary'>
						<td colspan='2'>Total Cash</td>
						<td class='align-right'>${totalcash}</td>
					</tr>
				</table>
			</div>
		""";
		
		/* Other Payment Details */
		html += """
			<div class='data-group'>
				<div class='data-header'>Other Payments</div>
				<table class='data-table'>
					<tr>
						<th>Type</th>
						<th>Particulars</th>
						<th>Amount</th>
					</tr>
		""";
		for (payment in liq.otherpayments) {
			def payamount = decformat.format( payment.amount );
			html += """
				<tr class='item'>
					<td>${payment.paytype}</td>
					<td>${payment.particulars}</td>
					<td class='align-right'>${payamount}</td>
				</tr>
			""";
		}
		def totalotherpayment = decformat.format( liq.info.totalotherpayment );
		html += """
					<tr class='summary'>
						<td colspan='2'>Total Other Payment</td>
						<td>${totalotherpayment}</td>
					</tr>
				</table>
			</div>
		""";
		
		html += """	
			</body>
			</html>
		""";
		
		return html;
	}
	
	private def getFundSummaries(def liquidationid){
		return em.sqlContext.createNamedQuery("liquidation:getFundSummaries")
                 .setParameter("liquidationid", liquidationid )
				 .resultList;
	}
}
