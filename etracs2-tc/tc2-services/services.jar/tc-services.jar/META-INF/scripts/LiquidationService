import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID;
import java.text.DecimalFormat;

class LiquidationService {

	@PersistenceContext("main")
	def em;
	
	@Service("RemittanceService")
	def remsvc;
	
	@Service("ETRACSUserService")
	def usrsvc;
	
	@Service("SequenceService")
	def seqsvc;
	
	@Service("DateService")
	def dtsvc;
	
	@Service("HTMLService")
	def htmlsvc;
	
	@Service("Var")
	def var;
	
	def CASHIER_ROLE = 'CASHIER'
	
	def SCHEMANAME = "liquidation:liquidation";
	def SCHEMAVERSION = "1.0";
	def LISTSCHEMANAME = "liquidation:liquidationlist";
	
	@ProxyMethod
	public def getList( searchText, params ) {
		if ( !searchText )
			return em.sqlContext.createNamedQuery( "liquidation:getList" ).resultList;
		return [];
	}
	
	@ProxyMethod
	public def create( liq ) {
		try {
		validate( liq );
		liq.objid = "LIQ" + new UID();
		liq.schemaname = SCHEMANAME;
		liq.schemaversion = SCHEMAVERSION;
		liq.docstate = 'OPEN';
		liq.dtposted = dtsvc.getServerDate()
		liq.info.txnno = generateLiqNo();
		liq.info.txndate = dtsvc.format( "yyyy-MM-dd", liq.dtposted);
		updateCashierInfo( liq )
		closeRemittance( liq );
		liq.fundsummaries = getFundSummaries( liq.objid );
		em.validate( SCHEMANAME, liq );
		em.create( SCHEMANAME, liq );
		createListingItem( liq );
		return liq;
		} catch (ex) { throw ex; }
	}
	
	void updateCashierInfo( liq ) {
		def cashiers = usrsvc.getUsersByRole( CASHIER_ROLE )
		if( ! cashiers ) throw new Exception('Cashier is not defined.')
		def cashier = cashiers[0]
		liq.info.depositedbyid 		= cashier.objid 
		liq.info.depositedbyname 	= cashier.formalname 
		liq.info.depositedbytitle 	= cashier.jobtitle 
	}
	
	private void validate( liq ) {
		def totalcash = 0.00;
		for (denom in liq.info.denominations) {
			totalcash += denom.amount;
		}
		if ( totalcash != liq.info.totalcash )
			 throw new Exception( "Cash Received must be equal to Cash Expected." );
		def liqTemp = createLiquidation( liq );
		if (liq.remittances.size() != liqTemp.remittances.size() )
			throw new Exception( "There are new transactions not included in this Liquidation." );
	}
	
	private def generateLiqNo() {
		def dt = dtsvc.getServerDate();
		def cal = Calendar.instance;
		cal.time = dt;
		def yr = cal.get(Calendar.YEAR);
		def series = seqsvc.getNextFormattedSeries( 'LIQ-' + yr );
		
		return 'LIQ-' + yr + '-' + series;
	}
	
	private void closeRemittance( liq ) {
		for ( collector in getSubordinates( liq.info.liquidatingofficerid ) ) {
			def params = [
				liquidationid : liq.objid,
				liquidationno : liq.info.txnno,
				liquidationdate : liq.info.txndate,
				liquidatingofficerid : liq.info.liquidatingofficerid,
				collectorid : collector.objid
			];
			em.sqlContext.createNamedExecutor( "liquidation:closeRemittances" ).setParameters( params ).execute();
			em.sqlContext.createNamedExecutor( "liquidation:closeRemittanceLists" ).setParameters( params ).execute();
		}
	}
	
	private void createListingItem( liq ) {
		def cal = Calendar.instance;
		def pd = dtsvc.parseDate( liq.info.txndate, null )
		liq.txntimestamp = pd.year +''+ pd.qtr +'' + pd.month + '' + pd.day 
		liq.iyear  = pd.year 
		liq.iqtr   = pd.qtr 
		liq.imonth = pd.month 
		liq.iday   = pd.day 
		em.create( LISTSCHEMANAME, liq )
	}
	
	@ProxyMethod
	public def createLiquidation( liq ) {
		liq.info.amount = 0.0;
		liq.info.totalcash = 0.0;
		liq.info.totalotherpayment = 0.0;
		liq.info.treasurername = var.get('treasurer_name');
		liq.info.treasurertitle = var.get('treasurer_title');
		def subordinates = getSubordinates( liq.info.liquidatingofficerid );
		for (collector in subordinates) {
			def remits = em.sqlContext.createNamedQuery( "liquidation:getUnliquidatedRemittanceByCollector" ).setParameter( "collectorid", collector.objid ).resultList;
			if ( remits ) {
				liq.remittances += remits;
				liq.otherpayments += em.sqlContext.createNamedQuery( "liquidation:getUnliquidatedRemittanceOtherPaymentsByCollector" ).setParameter( "collectorid", collector.objid ).resultList;
				def reminfo = em.sqlContext.createNamedQuery( "liquidation:getUnliquidatedRemittanceInfoByCollector" ).setParameter( "collectorid", collector.objid ).singleResult;
				liq.info.amount += reminfo.totalamount;
				liq.info.totalcash += reminfo.totalcash;
				liq.info.totalotherpayment += reminfo.totalotherpayment;
			}
		}
		
		if ( ! liq.remittances )
			throw new IllegalStateException( "There are no remittances." );
		
		return liq;
	}
	
	private def getSubordinates( userid ) {
		return usrsvc.getCollectorsByLqOfficerId( userid );
	}
	
	@ProxyMethod
	public def open( objid ) {
		if (!objid)
			return null;
		def liq = em.read( SCHEMANAME, [objid:objid] );
		liq.remittances = em.sqlContext.createNamedQuery( "liquidation:getRemittancesByLiquidation" ).setParameter( "liquidationid", objid ).resultList;
		liq.otherpayments = em.sqlContext.createNamedQuery( "liquidation:getOtherPaymentsByLiquidation" ).setParameter( "liquidationid", objid ).resultList;

		return liq;
	}
	
	private def getFundSummaries(def liquidationid){
		return em.sqlContext.createNamedQuery("liquidation:getFundSummaries")
                 .setParameter("liquidationid", liquidationid )
				 .resultList;
	}
	
	@ProxyMethod
	public def fetchOtherPayments( param ){
		println param.objid
		def sql_stmt = "getOtherPaymentsByLiquidation"
		param.liquidationid = param.objid
		if( !param.objid )
			sql_stmt = "getOtherPaymentNoLiq"
		return em.sqlContext.createNamedQuery( "liquidation:" + sql_stmt ).setParameters( param ).resultList	
	}
	
	@ProxyMethod
	public def getHtml( liq ) {
		def html = '';
		if ( !liq )
			return "<html><head><h1> Select an item. </h1></head></html>";
		
		def data = [
            header  : buildHeader( liq ),
			otherpayments : buildOtherPayments( liq ),
			breakdown   : buildBreakdown( liq )
			
        ]
		
        return doBuildHtml( data )
	}
		
	private def buildBreakdown( liq ){
		def decformat = new DecimalFormat("#,##0.00");
		def html = """
		<table width="100%">
		<tr>
		<td>
		<div style="background-color:silver" width="100%">
		<table width="100%" cellspacing="1">
		"""

		html += """
			<tr> <th align="left" colspan="3"> Liquidation Breakdown </th> </tr>
			<tr>
				<th> Denomination </th>
				<th> Quantity </th>
				<th> Amount </th>
			</tr>			
		"""
		
		liq.info.denominations.each {
			def amount = decformat.format( it.amount );
			def qty = decformat.format( it.qty );
			html += """
			<tr>
				<td align="right">$it.caption</td>
				<td align="right">$qty</td>
				<td align="right">$amount</td>                 
			</tr>
			"""
		}
		def totalcash = decformat.format( liq.info.totalcash );
		html += """
			<tr>
				<td colspan="2">Total Cash</td>
				<td align="right">${totalcash}</td>
			</tr>
			
		</td>
		</tr>
        </table>
		"""
			
		return html
	}
	
	private def buildOtherPayments( liq ){
		if( !liq.otherpayments ) return '';
		def decformat = new DecimalFormat("#,##0.00");
		def html = """
		<table width="100%">
		<tr>
		<td>
		<div style="background-color:silver" width="100%">
		<table width="100%" cellspacing="1">
		"""
					
		html += """
			<tr> <th align="left" colspan="3"> Non-Cash Payments </th> </tr>
			<tr>
				<th> Type </th>
				<th> Particulars </th>
				<th> Amount </th>
			</tr>			
		"""
	
		liq.otherpayments.each(){
			def payamount = decformat.format( it.amount );
			html += """
			<tr>
				<td> $it.paytype </td>
				<td> $it.particulars </td>
				<td align="right"> $payamount </td>
			</tr>
			""";
		}
		def totalotherpayment = decformat.format( liq.info.totalotherpayment );
		html += """
			<tr>
				<td colspan='2'>Total Other Payment</td>
				<td align="right">${totalotherpayment}</td>
			</tr>
			
			</td>
			</tr>
		</table>
		"""
			
		return html
	}
	
	private def buildHeader( liq ) {
		def decformat = new DecimalFormat("#,##0.00");
		def amount = decformat.format( liq.info.amount );
		
		return """
			<table>
				<tr>
					<td class="header">Liquidation No. :</td>
					<td class="header" colspan="3"><b>$liq.info.txnno</b></td>
				</tr>
				<tr>
					<td class="header">Date :</td>
					<td class="header"><b>$liq.info.txndate</b></td>
				</tr>
				<tr>
					<td class="header">Amount :</td>
					<td class="header"><b>$amount</b></td>
				</tr>
				
			</table>
		"""
	}
	
	private def doBuildHtml( data ) {
		return """
			<html>
				<head>
					<style type="text/css">
						body, td, th { 
							font-family: tahoma
							font-size  : 10pt
						}	
						td {
							background-color:white
						}
						th {
							background-color : #CCCCCC
						}
						.title {
							background-color:#CCCCFF
							font-weight:bold
						}
						.caption {
							width : 120
						}
						.numeric {
							text-align:right
						}
						.header {
							font-family : tahoma
							font-size   : 18pt
							width       : 120
						}
						.data {
							font-weight:bold
						}
					</style>
				</head>
				<body>
					<table width="100%">
						<tr colspan="2">
							<td>$data.header</td>
						</tr>
						<tr>
							<td width="30%">$data.breakdown</td>
							<td valign="top" width="70%" >$data.otherpayments</td>
						</tr>
					</table>
				</body>
			</html>
		"""
	}
	
}
