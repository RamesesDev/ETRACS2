import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class ConsolidatedReportService {
	@PersistenceContext('main')	
	def em
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
	def logService
	
	@Service('DateService')
	def dtSvc
	
	def schemaname = "craaf:craaf"
	def schemaversion = "1.0"
	
	def cal = Calendar.getInstance()
	
	@ProxyMethod
	public def buildReport( entity ){
		def year = Integer.parseInt( entity.year );
		def param = [:]
		param.currYear = dtSvc.getServerYear()
		param.currMonth = dtSvc.getServerMonth()
		
		def data = em.sqlContext.createNamedQuery('consolidatedreport:getReportDataGeneral').setParameters( [craafyear:year, craafmonth:entity.month] ).resultList;
		data += em.sqlContext.createNamedQuery('consolidatedreport:getReportDataCollector').setParameters( [craafyear:year, craafmonth:entity.month] ).resultList;
		data += em.sqlContext.createNamedQuery('consolidatedreport:getReportDataCanceledSeries').setParameters( [craafyear:year, craafmonth:entity.month] ).resultList;
		
		data.each{
			if( it.beginqty == 0 ) it.beginqty = null;
			if( it.receivedqty == 0 ) it.receivedqty = null;
			if( it.issuedqty == 0 ) it.issuedqty = null;
			if( it.endingqty == 0 ) it.endingqty = null;
			
			if( it.beginqty == it.endingqty || it.receivedqty == it.endingqty ){
				it.endingqty = null;
				it.endingfrom = null;
				it.endingto = null;
			}
		}
		
		def dataByOpen
		if( year > param.currYear )
			dataByOpen = getDataByOpen( param )
		else if( year == param.currYear ){
			if( entity.month >= param.currMonth )
				dataByOpen = getDataByOpen( param )
		}			
		if( dataByOpen ) data.addAll( dataByOpen )

		return data;
	}
	
	private def getDataByOpen( param ){
		def dataByOpen = em.sqlContext.createNamedQuery( 'consolidatedreport:getReportDataGeneralByOpenState' ).setParameters( param ).resultList
		dataByOpen += em.sqlContext.createNamedQuery( 'consolidatedreport:getReportDataCollectorByOpenState' ).setParameters( param ).resultList
		dataByOpen += em.sqlContext.createNamedQuery( 'consolidatedreport:getReportDataCanceledSeriesOpenState' ).setParameters( param ).resultList
		
		dataByOpen.each(){
			it.beginqty = it.endingqty
			it.beginfrom = it.endingfrom
			it.beginto = it.endingto
			
			it.receivedqty = null
			it.receivedfrom = null
			it.receivedto = null
			
			it.issuedqty = null
			it.issuedfrom = null
			it.issuedto = null
			
			it.endingqty = null
			it.endingfrom = null
			it.endingto = null 
		}
		
		return dataByOpen
	}
	
	@ProxyMethod
	public void createCRAAF( iraf ){
		def year = cal.get(Calendar.YEAR);
		def month = cal.get(Calendar.MONTH) + 1;
		
		if( iraf.info.rivtype == 'LGU' ){
			iraf.rcvitems.each{ ri ->
				def craaf = getList( ri.afid );
				if( !craaf ) init( iraf.objid, ri );
				else createCRAAFByIRAF( iraf.objid, ri );
			}
		}
		else updateCRAAFbyIRAF( iraf );
	}
	
	private void init( irafid, ri ){
		def af = getAF( ri.afid );
		def afinventoryid = ri.afinventoryid // getAFInventoryId( irafid, ri.afid, ri.startseries, ri.stubfrom );
		
		if( ri.aftype == 'serial' ) ri.qtyreceived = ri.qtyreceived * 50;
		if( ri.aftype == 'nonserial' ) ri.qtyreceived = ri.qtyreceived * af.pcsperunit;
		
		if( ri.prefix.length() != 0 ) ri.prefix = ri.prefix + "-";
		else ri.prefix = "";
		
		if( ri.suffix.length() != 0 ) ri.suffix = "-" + ri.suffix;
		else ri.suffix = "";
		
		def craaf = [
			objid 			: 'CRAAF' + new UID(),
			schemaname		: schemaname,
			schemaversion	: schemaversion,
			afinventoryid	: afinventoryid,
			craafyear		: cal.get(Calendar.YEAR),
			craafmonth		: cal.get(Calendar.MONTH) + 1,
			afid			: ri.afid,
			beginqty		: 0, 
			beginfrom		: null,
			beginto			: null,
			receivedqty		: ri.qtyreceived,
			receivedfrom	: ri.prefix + ri.startseries + ri.suffix,
			receivedto		: ri.prefix + ri.endseries + ri.suffix,
			issuedqty		: 0,
			issuedfrom		: null,
			issuedto		: null,
			canceledqty		: 0,
			endingqty		: ri.qtyreceived,
			endingfrom		: ri.prefix + ri.startseries + ri.suffix,
			endingto		: ri.prefix + ri.endseries + ri.suffix
		];
		
		if( ri.cancelledseries ){
			ri.cancelledseries.each{
				craaf += [
					canceledqty 	: it.toseries - it.fromseries,
					canceledfrom 	: it.fromseries,
					canceledto 		: it.toseries,
					cancelreason	: it.remarks
				];	
			}
		}
		
		em.validate( craaf.schemaname, craaf );
		em.save( craaf.schemaname, craaf );
	}
	
	private def getList( afid ){
		return em.sqlContext.createNamedQuery('consolidatedreport:getList').setParameter("afid", afid ).singleResult;
	}
	
	private def getAFInventoryId( irafid, afid, startseries, stubfrom ){
		if( startseries && startseries > 0 )
			return em.sqlContext.createNamedQuery( 'consolidatedreport:getAFInventoryIdSeries' )
				.setParameters([irafid:irafid, afid:afid, startseries:startseries])
				.singleResult.objid;
		else 
			return em.sqlContext.createNamedQuery( 'consolidatedreport:getAFInventoryIdStubfrom' )
				.setParameters([irafid:irafid, afid:afid, startseries:startseries])
				.singleResult.objid;
	}
	
	private def getAF( afid ){
		return em.sqlContext.createNamedQuery('consolidatedreport:getAF').setParameter("afid", afid ).singleResult;
	}
	
	private void createCRAAFByIRAF( irafid, ri ){
		
		def af = getAF( ri.afid );
		def afinventoryid = ri.afinventoryid //getAFInventoryId( irafid, ri.afid, ri.startseries, ri.stubfrom );
		
		if( ri.aftype == 'serial' ) ri.qtyreceived = ri.qtyreceived * 50;
		if( ri.aftype == 'nonserial' ) ri.qtyreceived = ri.qtyreceived * af.pcsperunit;
		
		if( ri.prefix.length() != 0 ) ri.prefix = ri.prefix + "-";
		else ri.prefix = "";
		
		if( ri.suffix.length() != 0 ) ri.suffix = "-" + ri.suffix;
		else ri.suffix = "";
		
		def craaf = [
			objid 			: 'CRAAF' + new UID(),
			schemaname		: schemaname,
			schemaversion	: schemaversion,
			afinventoryid	: afinventoryid,
			craafyear		: cal.get(Calendar.YEAR),
			craafmonth		: cal.get(Calendar.MONTH) + 1,
			afid			: ri.afid,
			beginqty		: 0,
			receivedqty		: ri.qtyreceived,
			receivedfrom	: ri.prefix + ri.startseries + ri.suffix,
			receivedto		: ri.prefix + ri.endseries + ri.suffix,
			issuedqty		: 0,
			canceledqty		: 0,
			endingqty		: ri.qtyreceived,
			endingfrom		: ri.prefix + ri.startseries + ri.suffix,
			endingto		: ri.prefix + ri.endseries + ri.suffix
		];
		
		if( ri.cancelledseries ){
			ri.cancelledseries.each{
				craaf += [
					canceledqty 	: it.toseries - it.fromseries,
					canceledfrom 	: it.fromseries,
					canceledto 		: it.toseries,
					cancelreason	: it.remarks
				];	
			}
		}
		
		em.validate( craaf.schemaname, craaf );
		em.save( craaf.schemaname, craaf );
	
	}
	
	private void updateCRAAFbyIRAF( iraf ){
		
		iraf.rcvitems.each{ ri ->
			def afic = getAFInventoryCredit( iraf.objid, ri.afid, ri.stubno);
			def craafitem = getCRAAFItem( ri.afinventoryid, ri.afid, "" );
			def af = getAF( ri.afid );
			
			if( ! craafitem ) throw new Exception('No available stock for AF ' + ri.afid + ' in the inventory.' )
			
			if( afic.aftype == 'serial' ) ri.qtyreceived = ri.qtyreceived * 50;
			if( afic.aftype == 'nonserial' ) ri.qtyreceived = ri.qtyreceived * af.pcsperunit;
			
			if( afic.prefix.length() != 0 ) afic.prefix = afic.prefix + "-";
			else afic.prefix = "";
			
			if( afic.suffix.length() != 0 ) afic.suffix = "-" + afic.suffix;
			else afic.suffix = "";
			
			def issuedfrom = craafitem.issuedfrom 
			if( ! craafitem.issuedqty || craafitem.issuedqty == 0 ) {
				issuedfrom = afic.prefix + afic.startseries + afic.suffix
			}
			
			def issuedto = afic.prefix + afic.endseries  + afic.suffix 
			def endingqty = craafitem.endingqty - ri.qtyreceived
			def endingfrom = ( endingqty == 0 ? null : afic.prefix + (afic.endseries + 1) + afic.suffix )
			def endingto = ( endingqty == 0 ? null : craafitem.receivedto )
			
			def creditinfo = [
				afinventoryid	: afic.afinventoryid,
				afid			: afic.afid,
				qtyreceived		: ri.qtyreceived,
				issuedfrom		: issuedfrom,
				issuedto		: issuedto, 
				endingqty		: endingqty,
				endingfrom		: endingfrom,
				endingto		: endingto,
			]
			em.sqlContext.createNamedExecutor( 'consolidatedreport:updateCRAAFbyIRAFCol' ).setParameters( creditinfo ).execute();
			createCRAAFCredit( iraf.objid, craafitem.objid, 'IRAF', iraf.txndate, ri.qtyreceived );
		
			def craafcredit = [
				objid 				: 'CC' + new UID(),
				schemaname			: 'craaf',
				schemaversion		: '1.0',
				afinventoryid		: null,
				afinventorycreditid : afic.objid, 
				craafyear			: cal.get(Calendar.YEAR),
				craafmonth			: cal.get(Calendar.MONTH) + 1,
				collectorid			: iraf.info.rivrequestedbyid,
				collectorname		: iraf.info.rivrequestedby,
				collectortitle		: iraf.info.rivrequestedbytitle,
				afid				: creditinfo.afid, 
				beginqty			: null,
				beginfrom			: null,
				beginto				: null,
				receivedqty			: ri.qtyreceived,
				receivedfrom		: ri.prefix + ri.startseries + ri.suffix,
				receivedto			: ri.prefix + ri.endseries + ri.suffix,
				endingqty			: null,
				endingfrom			: null,
				endingto			: null,
				stubno				: afic.stubno, 
			]
			em.create( 'craaf', craafcredit )
		}
	}
	
	private def getAFInventoryCredit( irafid, afid, stubno  ){
		return em.sqlContext.createNamedQuery( 'consolidatedreport:getAFInventoryCredit' ).setParameters([irafid:irafid, afid:afid, stubno:stubno]).singleResult;
	}
	
	private def getSeries( irafid, afid ){
		return em.sqlContext.createNamedQuery( 'consolidatedreport:getStartEndSeries' ).setParameters([irafid:irafid, afid:afid]).singleResult;
	}
	
	private def getCRAAFItem( afinventoryid, afid, afinventorycreditid ){
		return em.sqlContext.createNamedQuery( 'consolidatedreport:getCRAAFItem' ).setParameters([afinventoryid:afinventoryid, afinventorycreditid:afinventorycreditid, afid:afid]).singleResult;
	}
	
	@ProxyMethod
	public void updateCRAAFbyRemittance( rem ){
		def year = cal.get(Calendar.YEAR);
		def month = cal.get(Calendar.MONTH) + 1;
		
		rem.remittedforms.each{ rf -> 
			def afcontrol = getAFControl( rf.afcontrolid );
			def craafitem = getCRAAFItem( "", rf.afid, afcontrol.afinventorycreditid );
			
			if( rf.issuedqty == null ) rf.issuedqty = 0;
			
			if( !craafitem )
				createCRAAFbyRem( rem, rf, afcontrol );
			
			def craaf = getCRAAFItem( "", rf.afid, afcontrol.afinventorycreditid );
			
			if( craaf.craafyear == year && craaf.craafmonth == month && rf.issuedqty != 0 )
				updateCRAAFbyRem( rem.objid, craaf, rf, afcontrol, rem.info.txndate );
			if( craaf.craafyear != year || craaf.craafmonth != month )
				createCRAAFbyRemNextMonth( rem, rf, afcontrol );
			
		}
	}
	
	private void createCRAAFbyRem( rem, rf, afcontrol ){
		
		if( afcontrol.prefix && afcontrol.prefix.length() != 0 ) afcontrol.prefix = afcontrol.prefix + "-";
		else afcontrol.prefix = "";
		
		if( afcontrol.suffix && afcontrol.suffix.length() != 0 ) afcontrol.suffix = "-" + afcontrol.suffix;
		else afcontrol.suffix = "";
		
		def craaf = [
			objid 			: 'CRAAF' + new UID(),
			schemaname		: schemaname,
			schemaversion	: schemaversion,
			afinventorycreditid	: afcontrol.afinventorycreditid,
			craafyear		: cal.get(Calendar.YEAR),
			craafmonth		: cal.get(Calendar.MONTH) + 1,
			collectorid		: rem.collectorid,
			collectorname	: rem.info.collectorname,
			collectortitle	: rem.info.collectortitle,
			afid			: rf.afid,
			beginqty		: 0,
			receivedqty		: afcontrol.qtyreceived,
			receivedfrom	: afcontrol.prefix + afcontrol.startseries + afcontrol.suffix,
			receivedto		: afcontrol.prefix + afcontrol.endseries + afcontrol.suffix,
			issuedqty		: 0,
			canceledqty		: 0,
			endingqty		: afcontrol.qtyreceived,
			endingfrom		: afcontrol.prefix + afcontrol.startseries + afcontrol.suffix,
			endingto		: afcontrol.prefix + afcontrol.endseries + afcontrol.suffix
		];
		
		em.validate( craaf.schemaname, craaf );
		em.save( craaf.schemaname, craaf );
	}
	
	private void createCRAAFbyRemNextMonth( rem, rf, afcontrol ){
		
		def craaf = [
			objid 			: 'CRAAF' + new UID(),
			schemaname		: schemaname,
			schemaversion	: schemaversion,
			afinventorycreditid	: afcontrol.afinventorycreditid,
			craafyear		: cal.get(Calendar.YEAR),
			craafmonth		: cal.get(Calendar.MONTH) + 1,
			collectorid		: rem.info.collectorid,
			collectorname	: rem.info.collectorname,
			collectortitle	: rem.info.collectortitle,
			afid			: rf.afid,
			beginqty		: rf.beginqty,
			beginfrom		: rf.beginfrom,
			beginto			: rf.beginto,
			receivedqty		: 0,
			issuedqty		: (rf.issuedqty ? rf.issuedqty : 0),
			issuedfrom		: rf.issuedfrom,
			issuedto		: rf.issuedto,
			canceledqty		: 0,
			endingqty		: rf.endingqty,
			endingfrom		: rf.endingfrom,
			endingto		: rf.endingto
		];
		
		em.validate( craaf.schemaname, craaf );
		em.save( craaf.schemaname, craaf );
		
	}
	
	private void updateCRAAFbyRem( remid, craaf, rf, afcontrol, txndate ){
		
		em.sqlContext.createNamedExecutor('consolidatedreport:updateCRAAFbyRemittance')
				.setParameters(
					[
						objid		: craaf.objid,
						issuedqty	: (craaf.issuedqty ? craaf.issuedqty : 0) + (rf.issuedqty ? rf.issuedqty : 0 ), 
						issuedfrom	: rf.issuedfrom,
						issuedto	: rf.issuedto,
						endingqty	: rf.endingqty,
						endingfrom	: rf.endingfrom,
						endingto	: rf.endingto
					]
				).execute();	
		
		createCRAAFCredit( remid, craaf.objid, 'REMITTANCE', txndate, rf.issuedqty );
	}
	
	private def getAFControl( afcontrolid ){
		return em.sqlContext.createNamedQuery( 'consolidatedreport:getAFControl' ).setParameter("afcontrolid", afcontrolid).singleResult;
	}
	
	private void createCRAAFCredit( objid, craafid, type, txndate, qty ){
		def craafCredit = [
			objid			: 'CRAAFCR' + new UID(),
			schemaname		: 'craafcredit:craafcredit',
			schemaversion	: '1.0',
			craafid			: craafid,
			reftype			: type,
			refno			: objid,
			refdate			: txndate,
			qty				: qty
		]	
		
		em.validate( craafCredit.schemaname, craafCredit );
		em.save( craafCredit.schemaname, craafCredit );
	}

}
