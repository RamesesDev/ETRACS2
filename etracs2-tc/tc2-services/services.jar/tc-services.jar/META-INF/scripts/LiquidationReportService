import com.rameses.annotations.*;
import com.rameses.common.*;

public class LiquidationReportServices{
	
	@PersistenceContext("main")
	def em;

	@ProxyMethod
	public def buildRCDReportData( def liquidationid ){
		def liquidation = em.read( "liquidation:liquidation", [objid: liquidationid] );
		if( !liquidation ) throw new Exception("Liquidation with objid $liquidationid not found.");
		def reportData = liquidation.info;
		
		reportData.txndate = liquidation.dtposted;

		reportData.otherpayments = em.sqlContext.createNamedQuery("liquidationreport:getOtherPaymentsByLiquidation")
									 .setParameters([liquidationid: liquidationid])
									 .resultList;
		reportData.remittances = em.sqlContext.createNamedQuery("liquidationreport:getRemittancesByLiquidation")
								   .setParameters( [liquidationid: liquidationid] )
								   .resultList;
		return reportData;
	}
	
	@ProxyMethod
	public def buildReportBData( def liquidationid, def fundid ){
		def liquidation = em.read( "liquidation:liquidation", [objid: liquidationid] );
		
		if( !liquidation ) throw new Exception("Liquidation with objid $liquidationid not found.");
		def reportData = [
			txndate: liquidation.dtposted,
			txnno: liquidation.info.txnno,
			liquidationofficername: liquidation.liquidationofficername,
			liquidationofficertitle: liquidation.liquidationofficertitle
		];
		
		reportData.list = em.sqlContext.createNamedQuery("liquidationreport:getRemittanceFundTotalByLiquidationAndFund")
		                    .setParameters([liquidationid: liquidationid, fundid: fundid])
							.resultList;
		return reportData;
	}
	
	@ProxyMethod
	public def buildReportCData( def liquidationid, def chart, def fundid ){
		def liquidation = em.read( "liquidation:liquidation", [objid: liquidationid] );
		
		if( !liquidation ) throw new Exception("Liquidation with objid $liquidationid not found.");
		def reportData = [
			txndate: liquidation.dtposted,
			txnno: liquidation.info.txnno,
			liquidationofficername: liquidation.liquidationofficername,
			liquidationofficertitle: liquidation.liquidationofficertitle
		];
		
		reportData.list = em.sqlContext.createNamedQuery("liquidationreport:getRevenueByGLAccount$chart")
		                    .setParameters([liquidationid: liquidationid, fundid: fundid])
							.resultList;
		
		return reportData;
	}
	
	@ProxyMethod
	public def getFundList(){
		return em.sqlContext.createNamedQuery("liquidationreport:getFundList").resultList;
	}
}