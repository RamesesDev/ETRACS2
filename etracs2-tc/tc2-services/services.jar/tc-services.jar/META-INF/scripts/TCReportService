import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID;
import java.text.DecimalFormat;

class TDReportService {

	@PersistenceContext("main")
	def em;
	
	@Service("DateService")
	def dtsvc;
	
	
	/*------------------------------------------------------------------------
	*
	* LISTING REPORTS
	*
	*------------------------------------------------------------------------*/
	@ProxyMethod
	public List generateIncomeAccountListing( charttype ) {
		//get chart 
		def chart = em.sqlContext.createQuery('''
			SELECT objid FROM account WHERE charttype = $P{charttype} AND parentid IS NULL 
		''')
		.setParameter('charttype', charttype).singleResult 
		if( !chart ) throw new Exception('Chart Type ' + charttype + ' is invalid.')
		def list = []
		buildAccounts( charttype, list, chart.objid , 1 )
		return list 
	}	
	
	void buildAccounts( charttype, list, parentid , level ){
		def accounts = em.sqlContext.createQuery('''
			SELECT objid, acctcode, accttitle, acctlevel 
			FROM account 
			WHERE parentid = $P{parentid}
			ORDER BY acctcode 
		''')
		.setParameter('parentid', parentid )
		.resultList 
		
		accounts.each { acct ->
			if( level == 1) list.add([charttype:charttype, account:''])
			def acctcode = ( acct.acctcode ? acct.acctcode : '***' ).padRight( 10, ' ' )
			list.add([
				charttype : charttype, 
				account   : ( ' '*(level-1)*15 ) + acctcode + '  ' + acct.accttitle ,
			])
			buildAccounts( charttype, list, acct.objid, level+1 )
		}
		
		// parentid is the glaccount, populate the incomeaccount
		if( !accounts ) {
			def incomeaccts = []
			if( charttype == 'NGAS' ) {
				incomeaccts = em.sqlContext.createQuery('SELECT acctno, accttitle FROM incomeaccount WHERE ngasid = $P{ngasid}')
								.setParameter( 'ngasid', parentid ).resultList 
			}
			else {
				incomeaccts = em.sqlContext.createQuery('SELECT acctno, accttitle FROM incomeaccount WHERE sreid = $P{sreid}')
								.setParameter( 'sreid', parentid ).resultList 

			}
			
			incomeaccts.each { acct ->
				def acctno = ( acct.acctno ? acct.acctno : '***' ).padRight( 10, ' ' )
				list.add([
					charttype : charttype,
					account   : ( ' '*level* 12 ) + acctno + ' - ' + acct.accttitle ,
				])
			}
		}
		
	}
	
	
	
	
	
	
	
	/*------------------------------------------------------------------------
	*
	* TREASURY REPORTS
	*
	*------------------------------------------------------------------------*/
	
	@ProxyMethod
	public def generateAbstractOfCollectionDaily( txndate ) {
		txndate = dtsvc.parse( "yyyy-MM-dd", txndate );
		def txntimestamp = dtsvc.buildCustomTimeStamp( txndate );
		return [
			period        : 'Collection for ' + dtsvc.format( 'dd MMMMM yyyy', txndate ) ,
			receipts      : getReceiptsByDate( txntimestamp ),
			acctsummaries : getReceiptSummaryByDate( txntimestamp )
		];
	}
	
	private def getReceiptsByDate( txntimestamp ) {
		def receipts = em.sqlContext.createNamedQuery( "tcreport:getReceiptsByDate" ).setParameters( [txntimestamp:txntimestamp] ).resultList;
		if ( !receipts )
			throw new IllegalStateException( "No records for this particular date." );
		return receipts;
	}
	
	private def getReceiptSummaryByDate( txntimestamp ) {
		return em.sqlContext.createNamedQuery( "tcreport:getReceiptSummaryByDate" ).setParameters( [txntimestamp:txntimestamp] ).resultList;
	}
	
	@ProxyMethod
	public def generateAbstractOfCollectionMonthly( params ) {
		def monthtimestamp = params.year + '' + dtsvc.getQtrByMonth( params.month.index )  + ( params.month.index + '' ).padLeft( 2, '0' );
		return [
			receipts : getReceiptsByMonth( monthtimestamp ),
			acctsummaries : getReceiptSummaryByMonth( monthtimestamp )
		];
	}
	
	private def getReceiptsByMonth( monthtimestamp ) {
		def receipts = em.sqlContext.createNamedQuery( "tcreport:getReceiptsByMonth" ).setParameters( [monthtimestamp:monthtimestamp] ).resultList;
		if ( !receipts )
			throw new IllegalStateException( "No records for this particular month." );
		return receipts;
	}
	
	private def getReceiptSummaryByMonth( monthtimestamp ) {
		return em.sqlContext.createNamedQuery( "tcreport:getReceiptSummaryByMonth" ).setParameters( [monthtimestamp:monthtimestamp] ).resultList;
	}
	
	@ProxyMethod
	public def generateAbstractOfCollectionQuarterly( params ) {
		def qtrtimestamp = params.year + '' + params.qtr.index;
		return [
			receipts : getReceiptsByQtr( qtrtimestamp ),
			acctsummaries : getReceiptSummaryByQtr( qtrtimestamp )
		];
	}
	
	private def getReceiptsByQtr( qtrtimestamp ) {
		def receipts = em.sqlContext.createNamedQuery( "tcreport:getReceiptsByQtr" ).setParameters( [qtrtimestamp:qtrtimestamp] ).resultList;
		if ( !receipts )
			throw new IllegalStateException( "No records for this particular quarter." );
		return receipts;
	}
	
	private def getReceiptSummaryByQtr( qtrtimestamp ) {
		return em.sqlContext.createNamedQuery( "tcreport:getReceiptSummaryByQtr" ).setParameters( [qtrtimestamp:qtrtimestamp] ).resultList;
	}
}
