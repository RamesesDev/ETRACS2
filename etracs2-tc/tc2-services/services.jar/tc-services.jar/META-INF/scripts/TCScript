import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class TCScript {
	
	@PersistenceContext('main')
	def em
		
	@ProxyMethod
	public def doRemoveDuplicateCraaf(){
		
		removeMultipleNoBFromBTo()
		removeMultipleNoBeginTo()
		copyRcvfrmToIssuedfrm()
		
		return 'run successfully'
	}
	
	// remove multiple no. of beginfrom and beginto
	private void removeMultipleNoBFromBTo(){
		em.sqlContext.createNamedQuery( 'tcscript:getCraafDuplicateByBFromBto' ).resultList.each{ crf -> 
			def listduplicate = em.sqlContext.createNamedQuery( 'tcscript:getCraafByMonthYearBFromBto' ).setParameters( crf ).resultList
			def hasIssuedRcpt = listduplicate.find{ it.issuedfrom != null && it.issuedto != null }
			if( hasIssuedRcpt )
				removeNoIssuedCraaf( listduplicate )
			else
				removeMultipleNoBFromBTo( listduplicate )
							
		}  
	}
	
	// if listduplicate craaf has an issued 
	// remove all no issued craaf 
	private void removeNoIssuedCraaf( def listduplicate ){
		listduplicate.each{ 
			if( !it.issuedfrom  && !it.issuedto )
				deleteCraafById( it.objid )
		}
	}
	
	// delete multiple no. of beginfrom and beginto
	private void removeMultipleNoBFromBTo( def listduplicate ){
		def list = listduplicate.clone()
		listduplicate.each{
			if( list.size() > 1 ){
				deleteCraafById( it.objid )
				list.remove( it )
			}
		}
	}
	
	// delete multiple no. of beginto order by beginqty
	// the smallest no. of beginqty will be left.
	private void removeMultipleNoBeginTo(){
		em.sqlContext.createNamedQuery( 'tcscript:getCraafDuplicateByBto' ).resultList.each{ crf ->
			def listduplicate = em.sqlContext.createNamedQuery( 'tcscript:getCraafByMonthYearBto' ).setParameters( crf ).resultList
			def list = listduplicate.clone()
	
			listduplicate.each{				
				if( list.size() > 1 ){
					def largerqty = list.max{ it.beginqty }
					deleteCraafById( largerqty.objid )
					list.remove( largerqty )
				}
				
			}
		}
	}
		
	//copy receivedfrom to issuedfrom
	//wrong update of issuedfrom 
	//due to wrong forwarding of craaf end of month.
	private void copyRcvfrmToIssuedfrm(){
		em.sqlContext.createNamedQuery( 'tcscript:getConsolatedWrongEntry' ).resultList.each{
			def map = [ 
				objid: it.objid, issuedfrom: it.receivedfrom
			]
			
			em.sqlContext.createNamedExecutor( 'tcscript:updateConsolatedWrongEntry' ).setParameters( map ).execute()
		}
	}
	
	private void deleteCraafById( def craafid ){
		em.sqlContext.createNamedExecutor( 'tcscript:deleteDuplicateCraaf' ).setParameter( 'objid', craafid ).execute()
	}
	
	
}
