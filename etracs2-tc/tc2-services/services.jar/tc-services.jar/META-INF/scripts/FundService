import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class FundService{
	
	@PersistenceContext('main')	
	def em
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
	def logService
	
	def schemaname = "fund:fund"
	def schemaversion = "1.0"
	
	@ProxyMethod
	public void init( searchText ){
		def general = [
			objid : 'GENERAL',
			schemaname : schemaname,
			schemaversion : schemaversion,
			docstate : 'APPROVED',
			fund : 'GENERAL',
			subfund : 'GENERAL',
			fundname : 'GENERAL'
		];
		
		def trust = [
			objid : 'TRUST',
			schemaname : schemaname,
			schemaversion : schemaversion,
			docstate : 'APPROVED',
			fund : 'TRUST',
			subfund : 'TRUST',
			fundname : 'TRUST'
		];
		
		def sef = [
			objid : 'SEF',
			schemaname : schemaname,
			schemaversion : schemaversion,
			docstate : 'APPROVED',
			fund : 'SEF',
			subfund : 'SEF',
			fundname : 'SEF'
		];
		
		em.create( schemaname, general );
		em.create( schemaname, trust );
		em.create( schemaname, sef );
	}
	
		
	@ProxyMethod
	public def getList( searchText, params ){
		if( !searchText ) return getListByQuery( 'fund:getList', [:], params );
		
		def result = [];
		
		if((result = getListByQuery( 'fund:getListByFund', [fund:searchText+"%"], params ))) return result;
		if((result = getListByQuery( 'fund:getListByFundName', [fundname:searchText+"%"], params ))) return result;
		if((result = getListByQuery( 'fund:getListBySubFund', [subfund:searchText+"%"], params ))) return result;
		
		return result;
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'fund:getById' ).setParameter( 'objid', objid ).singleResult;
	}
	
	@ProxyMethod
	public def create( fund ){
		fund.objid = "F" + new UID();
		fund.schemaname = schemaname;
		fund.schemaversion = schemaversion;
		
		if( fund.fund == fund.subfund )
			fund.fundname = fund.fund;
		else
			fund.fundname = fund.fund + "-" + fund.subfund;
			
		validate( fund );
		em.create( fund.schemaname, fund );
		
		return fund;
	}
	
	@ProxyMethod
	public def update( fund ){
		validate( fund );
		
		em.update( fund.schemaname, fund, { diff ->
			logService.logB( 'UPDATE', 'Fund', fund.objid, null, diff );
		} as UpdateChangeHandler )
		
		return fund;
	}
	
	@ProxyMethod
	public void delete( fund ){
		checkReferencedId( fund );
		em.delete( fund.schemaname, fund );
	}
	
	@ProxyMethod
	public def approve( objid ){
		def fund = em.read( 'fund:fund', [objid:objid] );
		
		fund.docstate = 'APPROVED';
		em.update( 'fund:fund', fund );
		
		return fund;
	}
	
	private void validate( fund ){
		def oldfund = em.read(fund.schemaname, fund);
		util.validateLastUpdate( fund, oldfund );
		
		checkDuplicates( fund );
		em.validate(fund.schemaname, fund);
	}
	
	private void checkDuplicates( fund ){
		def data = em.sqlContext.createNamedQuery( 'fund:checkDuplicateFundName' ).setParameter( 'fundname', fund.fundname ).singleResult;
		if( data.count > 0 ) throw new Exception( "Fund $fund.fundname already exists." );
	}
	
	private void checkReferencedId( fund ){
		def data = em.sqlContext.createNamedQuery('fund:checkReferencedId').setParameter("fundid", fund.objid).singleResult
		if( data.count > 0 ) util.checkDuplicateError( data.count, "Delete not allowed. Fund has already been referenced." )
	}
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
}
