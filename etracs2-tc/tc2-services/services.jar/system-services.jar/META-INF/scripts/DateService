
import com.rameses.annotations.*;
import com.rameses.util.*;

class DateService {

   @SqlContext("java:system")
   def db;	

	@ProxyMethod(local=true)
	public def getServerDate() {
		def val = db.createQuery( "select now() as dt" ).singleResult;
		return val.dt; 
	}

	@ProxyMethod(local=true)
	public def getLocaleTime( String timeZone ) {
		return getFormattedTime( serverDate, timeZone ); 
	}


	@ProxyMethod(local=true)
	public String getFormattedTime(Date d, String timezone) {
		return DateUtil.getFormattedTime(d, timezone);
	}
 
 	@ProxyMethod(local=true)
	public String format(String pattern, Date d ) {
		return (new java.text.SimpleDateFormat( pattern )).format(d);
	}
	
	@ProxyMethod(local=true)
	public def parse( String pattern, String d ) {
		return ( new java.text.SimpleDateFormat( pattern )).parse( d );
	}
	
	@ProxyMethod
	public def parseCurrentDate( ) {
		return parseDate( serverDate, null )
	}
  
	@ProxyMethod(local=true)
	public def parseDate(def d, String timezone) {
		if (!(d instanceof Date))
			d = parse("yyyy-MM-dd", d);
		def cal = Calendar.getInstance();
		cal.setTime( d );
		def map = [:];
		map.month = cal.get( Calendar.MONTH ) + 1;
		map.day = cal.get( Calendar.DATE );
		map.year = cal.get( Calendar.YEAR );
		map.hour = cal.get( Calendar.HOUR );
		map.minute = cal.get( Calendar.MINUTE );
		map.second = cal.get( Calendar.SECOND );
		map.millisecond = cal.get(Calendar.MILLISECOND);
		
		if( map.month >= 1 && map.month <= 3 ) map.qtr = 1
		else if( map.month >= 4 && map.month <= 6 ) map.qtr = 2
		else if( map.month >= 7 && map.month <= 9 ) map.qtr = 3
		else map.qtr = 4
		
		return map;
	}
	
	@ProxyMethod
	public def buildCustomTimeStamp( dt ) {
		// return a custom timestamp formatted as  YYYYQMMDD where YYYY - year, Q - quarter, MM - month, DD - day e.g, 2011-05-24 -> 201120524
		// this could be used as criteria for date based queries such as year, qtrly, monthly and daily 
		def map = parseDate(dt, null)
		return map.year + '' + map.qtr +  (map.month + '').padLeft(2, '0') + (map.day+'').padLeft(2, '0')
	}
	
	@ProxyMethod(local=true) 
	public def getCurrentTimeStamp() {
		return getTimeStamp( serverDate );
	}
	
	@ProxyMethod(local=true) 
	public def getTimeStamp(Date dt) {
		def cal = Calendar.getInstance();
		cal.setTime( dt );
		return cal.timeInMillis;
	}
	
	@ProxyMethod(local=true)
	public def add(Date d, String interval) {
		if(d==null) d = getServerDate();
		return DateUtil.add( d, interval );	
	}	
	
	@ProxyMethod(local=true)
	public def findNextDate(String timeInterval) {
		return DateUtil.add( serverDate, timeInterval );	
	}	

}
