import com.rameses.annotations.*;

class JobpositionService 
{

	@PersistenceContext("main")
	def em;
	
	@Service("RoleclassService")
	def roleclassSvc;

	
	@ProxyMethod
	public def getList(def params) {
		def qry = em.sqlContext.createNamedQuery( "jobposition:list" );
		if(params) {
			if(params._start) qry.setFirstResult( params._start );
			if(params._limit) qry.setMaxResults( params._limit );
			qry.setParameters( params );
		}
		return qry.resultList;
	}
	
	@ProxyMethod
	public def create(@Param(schema="jobposition") o) {
		if(!o.objid) throw new Exception("Please provide an objid");
		em.create( "jobposition", o );
		o.tags.each {
			em.save("jobposition:tag", [jobid: o.objid, tagid: it]);
		}
		return o;
	}
	
	@ProxyMethod
	public def read(def o) {
		def jp = em.read( "jobposition", o );
		jp.tags = em.sqlContext.createNamedQuery('jobposition:get-tags').setParameters([jobid:o.objid]).resultList.collect{it.tagid};
		jp.availableTags = roleclassSvc.getAvailableTags( [name: jp.roleclass] );
		return jp;
	}

	@ProxyMethod
	public def update(@Param(schema="jobposition") o) {
		em.update( "jobposition", o );
		if( o.tags != null ) {
			em.sqlContext.createNamedExecutor("jobposition:remove-tags").setParameters([jobid:o.objid]).execute();
			o.tags.each{
				em.save("jobposition:tag", [jobid: o.objid, tagid: it]);
			};
		}
		return read( o );
	}
	
	@ProxyMethod
	public def remove(def o) {
		em.delete( "jobposition", o );
	}
	
	@ProxyMethod
	public def assign(def o) {
		def x = em.read( "jobposition", o );
		x.assigneeid = o.assigneeid;
		em.update( "jobposition", x );
		return x;
	}
	
	@ProxyMethod
	public def unassign(def o) {
		def x = em.read( "jobposition", o );
		x.assigneeid = null;
		em.update( "jobposition", x );
		return x;
	}
	
	/*	
	@Service("RoleclassService")
	def roleclassSvc;
	
	@Service("RoleService")
	def roleSvc;

	@ProxyMethod
	public def getPermissions(def o) {
		def jobpos = em.read( "jobposition", o );
		def m = [:];
		m.modules = roleSvc.getRoleModulePermissions(jobpos.role);
		m.excluded = (jobpos.excluded) ? jobpos.excluded : [];
		return m;
	}
	
	@ProxyMethod
	public def updatePermissions(def o) {
		def jobpos = em.read( "jobposition", o );
		jobpos.excluded = o.excluded;
		em.update( "jobposition", jobpos );	
	}

	@ProxyMethod
	public def getJobPermissions( jobid ) {
		return em.sqlContext.createNamedQuery('jobposition:get-job-permissions')
			     .setParameter('jobid', jobid)
				 .singleResult;
	}

	@ProxyMethod
	public def getTags( param ) {
		def qry = em.sqlContext.createNamedQuery('jobposition:get-tags').setParameters([jobid:param.objid]);
		if(param._start) qry.setFirstResult(param._start);
		if(param._limit) qry.setMaxResults(param._limit);
		return qry.resultList;
	}
	
	@ProxyMethod
	public def getAvailableTags( job ) {
		if( !job ) return null;
		
		if( !job.roleclass )
			job = em.read("jobposition", job);
		
		return roleclassSvc.getAvailableTags([name: job.roleclass]);
	}
	*/
}