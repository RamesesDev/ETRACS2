import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class TxnTypesService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
	def logService
	
	def schemaname = 'txntypes:txntypes';
	def schemaversion = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		if( !searchText ) return getListByQuery( 'txntypes:getList', [:], params );
		
		def result = [];
		
		if((result = getListByQuery( 'txntypes:getListByType', [txntype:searchText+"%"], params ))) return result;
		
		return result;
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'txntypes:getById' ).setParameter( 'objid', objid ).singleResult;
	}
	
	@ProxyMethod
	public def create( txntype ){
		txntype.objid = "TXN" + new UID();
		txntype.schemaname = schemaname;
		txntype.schemaversion = schemaversion;
		
		validate( txntype );
		em.create( txntype.schemaname, txntype );
		
		return txntype;
	}
	
	@ProxyMethod
	public def update( txntype ){
		validateUpdate( txntype );
		
		em.update( txntype.schemaname, txntype, { diff ->
			logService.logB( 'UPDATE', 'TXN TYPE', txntype.objid, null, diff );
		} as UpdateChangeHandler )
		
		return txntype;
	}
	
	@ProxyMethod
	public void delete( txntype ){
		checkReferenced( txntype );
		em.delete( txntype.schemaname, txntype );
	}
	
	
	private void validate( txntype ){
		def oldtxntype = em.read(txntype.schemaname, txntype);
		util.validateLastUpdate( txntype, oldtxntype );
		
		checkDuplicates( txntype );
		em.validate(txntype.schemaname, txntype);
	}
	
	private void validateUpdate( txntype ){
		def oldtxntype = em.read(txntype.schemaname, txntype);
		util.validateLastUpdate( txntype, oldtxntype );
		
		em.validate(txntype.schemaname, txntype);
	}
	
	private void checkDuplicates( txntype ){
		def data = em.sqlContext.createNamedQuery( 'txntypes:checkDuplicateType' ).setParameter( 'txntype', txntype.txntype ).singleResult;
		if( data.count > 0 ) throw new Exception( "Txn Type $txntype.txntype already exists." );
	}
	
	private void checkReferenced( txntype ){
		def data = em.sqlContext.createNamedQuery( 'txntypes:checkReferenced' ).setParameter( 'objid', txntype.objid ).singleResult;
		if( data.count > 0 ) throw new Exception( "Delete not allowed. Txn Type $txntype.txntype already used." );
	}
	
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}

}
