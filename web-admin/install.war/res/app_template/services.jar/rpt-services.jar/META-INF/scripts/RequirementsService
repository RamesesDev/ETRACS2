import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class RequirementsService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
	def logService
	
	def schemaname = 'requirements:requirements';
	def schemaversion = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		if( !searchText ) return getListByQuery( 'requirements:getList', [:], params );
		
		def result = [];
		
		if((result = getListByQuery( 'requirements:getListByCode', [reqcode:searchText+"%"], params ))) return result;
		if((result = getListByQuery( 'requirements:getListByName', [reqname:searchText+"%"], params ))) return result;
		
		return result;
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'requirements:getById' ).setParameter( 'objid', objid ).singleResult;
	}
	
	@ProxyMethod
	public def create( requirement ){
		requirement.objid = "REQ" + new UID();
		requirement.schemaname = schemaname;
		requirement.schemaversion = schemaversion;
		
		validate( requirement );
		em.create( requirement.schemaname, requirement );
		
		return requirement;
	}
	
	@ProxyMethod
	public def update( requirement ){
		validateUpdate( requirement );
		
		em.update( requirement.schemaname, requirement, { diff ->
			logService.logB( 'UPDATE', 'REQUIREMENT', requirement.objid, null, diff );
		} as UpdateChangeHandler )
		
		return requirement;
	}
	
	@ProxyMethod
	public void delete( requirement ){
		em.delete( requirement.schemaname, requirement );
	}
	
	
	private void validate( requirement ){
		def oldrequirement = em.read(requirement.schemaname, requirement);
		util.validateLastUpdate( requirement, oldrequirement );
		
		checkDuplicates( requirement );
		em.validate(requirement.schemaname, requirement);
	}
	
	private void validateUpdate( requirement ){
		def oldrequirement = em.read(requirement.schemaname, requirement);
		util.validateLastUpdate( requirement, oldrequirement );
		
		em.validate(requirement.schemaname, requirement);
	}
	
	private void checkDuplicates( requirement ){
		def data = em.sqlContext.createNamedQuery( 'requirements:checkDuplicateCode' ).setParameter( 'reqcode', requirement.reqcode ).singleResult;
		if( data.count > 0 ) throw new Exception( "Requirement $requirement.reqcode already exists." );
		data = em.sqlContext.createNamedQuery( 'requirements:checkDuplicateName' ).setParameter( 'reqname', requirement.reqname ).singleResult;
		if( data.count > 0 ) throw new Exception( "Requirement $requirement.reqname already exists." );
	}
	
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}

}
