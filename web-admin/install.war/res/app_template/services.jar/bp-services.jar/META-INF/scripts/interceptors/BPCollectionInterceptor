import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class BPCollectionInterceptor {

	@Service("LogService")
	def logService;
	
	@Service("DateService")
	def dateService;
	
	@Service('BPLedgerService')
	def ledgerSvc;
	
	@Service("BPBillingService")
	def billingSvc;
	
	@PersistenceContext('main')
	def em;
	
	@Service('NumberService')
	def numSvc
		
	@Before(pattern="ReceiptService.create")
	public void beforeCreate( evt ){
		//println evt.args[0];
	}
	
	@After(pattern="ReceiptService.open")
	public def afterOpenReceipt( evt ){
		def receipt = evt.result
		if( receipt?.doctype != 'BUSINESS_TAX' ) {
			return receipt;
		}
		receipt.txntype = em.read('bpapplication:bpapplication', [objid: receipt.applicationid]).txntype
		summarizedItems( receipt )
		return receipt		
	}
	
	@After(pattern="ReceiptService.create") 
	public def afterCreate( evt ) {
		def receipt = evt.result;
		if( receipt?.doctype != 'BUSINESS_TAX' ) return;
		
		def app = em.read('bpapplication:bpapplication', [objid: receipt.applicationid]);
		if( app.lastmodified != receipt.applicationlastmodified ) 
			throw new Exception("Unabled to continue.\nThe document has been modified by the other user.");
		
		def payment = [
			 applicationid: app.objid,
			 refid: receipt.objid,
			 reftype: 'ONLINE',
			 refno: receipt.info.serialno,
			 refdate: receipt.info.txndate,
			 year: receipt.year,
			 qtr: receipt.qtr,
			 items: []
		];
   
		//change amount -> totalamount 
		receipt.items.each{ rcpt ->
			payment.items << [ bpreceivableid	: rcpt.taxfeeid,
							 taxamount		: rcpt.taxamount,
							 surcharge		: rcpt.surcharge,
							 interest		: rcpt.interest,
							 discount		: rcpt.discount,
							 totalamount	: rcpt.amount ];
		}
		
		ledgerSvc.postPayment( payment ); 
		updateAppFullypaid( receipt )
		createBPPayments( receipt )
		receipt.txntype = app.txntype
		summarizedItems( receipt )
		return receipt
	}
	
	@After(pattern="ReceiptService.delete") 
	public void interceptDeleteBPReceipt( evt ) {
		def receipt = evt.result;
		if( receipt?.doctype != 'BUSINESS_TAX' ) return;
		
		def app = em.read('bpapplication:bpapplication', [objid: receipt.applicationid]);
		
		if( app.lastmodified != receipt.applicationlastmodified ) 
			throw new Exception("Unabled to continue.\nThe document has been modified by the other user.");
		
		def payment = [
			 applicationid: app.objid,
			 refid: receipt.objid,
			 reftype: 'ONLINE',
			 refno: receipt.info.serialno,
			 refdate: receipt.info.txndate,
			 items: []
		];
		
		receipt.items.each{ r ->
			payment.items << [ bpreceivableid	: r.taxfeeid,
							 amount			: r.amount,
							 surcharge		: r.surcharge,
							 interest		: r.interest,
							 discount		: r.discount ];
		}
		deleteBPPayment( receipt )
		ledgerSvc.deletePayment( payment );
	}
	
	@After(pattern="ReceiptService.update") 
	public void interceptUpdateBPReceipt( evt ) {
		def receipt = evt.result;
		if( receipt?.doctype != 'BUSINESS_TAX' ) return;
		
		def app = em.read('bpapplication:bpapplication', [objid: receipt.applicationid]);
		
		if( app.lastmodified != receipt.applicationlastmodified ) 
			throw new Exception("Unabled to continue.\nThe document has been modified by the other user.");
		
		def payment = [
			 applicationid: app.objid,
			 refid: receipt.objid,
			 reftype: 'ONLINE',
			 refno: receipt.info.serialno,
			 refdate: receipt.info.txndate,
			 items: []
		];
		
		//change taxamount -> amount
		//add total
		receipt.items.each{ rcpt ->
			payment.items << [ bpreceivableid	: rcpt.taxfeeid,
							 taxamount		: rcpt.taxamount,
							 surcharge		: rcpt.surcharge,
							 interest		: rcpt.interest,
							 discount		: rcpt.discount,
							 totalamount	: rcpt.amount ];
		}
		
		ledgerSvc.updatePayment( payment );
	}
	
	@After(pattern="ReceiptService.voidReceipt") 
	public void interceptVoidBPReceipt( evt ) {
		def receipt = evt.result;
		if( receipt?.doctype != 'BUSINESS_TAX' ) return;
		
		def app = em.read('bpapplication:bpapplication', [objid: receipt.applicationid]);

		//if( app.lastmodified != receipt.applicationlastmodified ) 
		//	throw new Exception("Unabled to continue.\nThe document has been modified by the other user.");
		
		def payment = [
			 applicationid: app.objid,
			 refid: receipt.objid,
			 reftype: 'ONLINE',
			 refno: receipt.info.serialno,
			 refdate: receipt.info.txndate,
			 items: []
		];
		  
		//change amount -> totalamount 
		receipt.items.each{ rcpt ->
			payment.items << [ bpreceivableid	: rcpt.taxfeeid,
							 taxamount		: rcpt.taxamount,
							 surcharge		: rcpt.surcharge,
							 interest		: rcpt.interest,
							 discount		: rcpt.discount,
							 totalamount	: rcpt.amount ];
		}
		
		voidBPPayment( receipt )  
		ledgerSvc.deletePayment( payment );
	}
	
	public void updateAppFullypaid( receipt ){	
		def app = em.read('bpapplication:bpapplication', [objid: receipt.applicationid])
		if( !app ) throw new Exception("Application with objid $receipt.applicationid no longer exists.")
		
		def getUnpaidReceivables = app.receivables.findAll{ numSvc.round( it.amount ) > numSvc.round( it.amtpaid ) }
				
		if( !getUnpaidReceivables )
			em.sqlContext.createNamedExecutor( "business:updateAppFullypaid" ).setParameter( 'businessid', receipt.businessid ).execute()
	}
	
	private void createBPPayments( def receipt ){
		def currdate = dateService.parseCurrentDate()
		receipt.items.each{ rcpt ->
			def bp = [
				objid : 'BPPMT' + new UID(),
				applicationid : receipt.applicationid,
				receiptid : receipt.objid,
				afid : receipt.info.afid,
				serialno : receipt.info.serialno,
				txndate : receipt.info.txndate,
				iyear : currdate.year,
				iqtr : currdate.qtr,
				imonth : currdate.month,
				iday : currdate.day,
				lobid : rcpt.lobid,
				lobname : rcpt.lobname,
				paidyear : rcpt.iyear,
				paidqtr : rcpt.iqtr,
				acctid : rcpt.acctid,
				accttitle : rcpt.accttitle,
				amount : numSvc.round(rcpt.taxamount),
				surcharge : numSvc.round(rcpt.surcharge),
				interest : numSvc.round(rcpt.interest),
				discount : numSvc.round(rcpt.discount),
				total : ( numSvc.round(rcpt.taxamount) + numSvc.round(rcpt.surcharge) + numSvc.round(rcpt.interest) - numSvc.round(rcpt.discount) ),
				voided : 0			
			]
			
			em.create( 'bppayment', bp )	
		}
	}
	
	private void voidBPPayment( def receipt ){
		
		em.sqlContext.createNamedExecutor('bppayment:voidBPPayment')
			.setParameter('receiptid', receipt.objid ).execute()
	}
	
	private void deleteBPPayment( def receipt ){
	
		em.sqlContext.createNamedExecutor('bppayment:deleteBPPayment')
			.setParameter('receiptid', receipt.objid ).execute()
	}
	
	private void summarizedItems( def receipt ){
		if( 'BUSINESS_TAX'.equals( receipt.doctype ) ) {
			def bt_items = summarizedByBTItems( receipt )
			receipt.items.removeAll( receipt.items.findAll{ it.systype.equals('BUSINESS_TAX') } )
			receipt.items.addAll( bt_items )
			receipt.items = summarizedByAccts( receipt )
		}
	}
	
	private def summarizedByBTItems( def receipt ){
		def bt_items = receipt.items.findAll{ it.systype.equals('BUSINESS_TAX') }
		def fqtr = { qtr ->
			if( qtr == 1 )
				return 'st'
			else if( qtr == 2)
				return 'nd'
			else if( qtr == 3 )
				return 'rd'
			else if( qtr == 4 )
				return 'th'
		} 
		
		bt_items = bt_items.clone().unique{ it.lobid }.each(){ item ->
			def amount = receipt.items.findAll{ it.lobid.equals(item.lobid) && it.systype.equals('BUSINESS_TAX') }.amount.sum()
			def nqtr = receipt.items.findAll{ it.lobid.equals(item.lobid) && it.systype.equals('BUSINESS_TAX') }.size()
			
			if( nqtr == 4 ) nqtr = 'Full paid'
			else if( nqtr == 1 ) nqtr = "$item.iqtr" + fqtr(item.iqtr) + " Qtr"
			else nqtr = "$item.iqtr-$receipt.qtr Qtr"
			
			if( receipt.txntype == 'NEW' ) nqtr = 'Full paid'
			
			item.accttitle = "$item.accttitle - $nqtr".toString()
			item.amount = ( amount ) ? amount : item.amount
		}   
		
		return bt_items
	}
	   
	private def summarizedByAccts( def receipt ){
		receipt.items = receipt.items.clone().unique{ it.acctid }.each(){ item ->
			def amount = receipt.items.findAll{ it.acctid.equals(item.acctid) }.amount.sum()
			item.amount = ( amount ) ? amount : item.amount
		}
		
		return receipt.items
	}
	
}
