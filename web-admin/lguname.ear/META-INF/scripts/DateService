
import com.rameses.annotations.*;
import com.rameses.util.*;

class DateService {

   @SqlContext("java:system")
   def db;	

	@ProxyMethod(local=true)
	public def getServerDate() {
		def val = db.createQuery( "select now() as dt" ).singleResult;
		return val.dt; 
	}
	
	@ProxyMethod
	public def getServerYear() {
		def pd = parseDate( serverDate, null );
        return pd.year;
	}
	
	@ProxyMethod
	public def getServerQtr() {
		return getQtr( serverDate );
	}
	
	@ProxyMethod
	public def getServerMonth() {
		def pd = parseDate( serverDate, null );
        return pd.month;
	}
	
	@ProxyMethod
	public def getServerDay() {
		def pd = parseDate( serverDate, null );
        return pd.day;
	}

	@ProxyMethod(local=true)
	public def getLocaleTime( String timeZone ) {
		return getFormattedTime( serverDate, timeZone ); 
	}


	@ProxyMethod(local=true)
	public String getFormattedTime(Date d, String timezone) {
		return DateUtil.getFormattedTime(d, timezone);
	}
 
 	@ProxyMethod(local=true)
	public String format(String pattern, Date d ) {
		return (new java.text.SimpleDateFormat( pattern )).format(d);
	}
	
	@ProxyMethod(local=true)
	public def parse( pattern, d ) {
		if (d instanceof Date)
			return d;
		return ( new java.text.SimpleDateFormat( pattern )).parse( d );
	}
	
	@ProxyMethod
	public def parseCurrentDate( ) {
		return parseDate( serverDate, null )
	}
    
    @ProxyMethod
    public int getYear( dt ) {
        def pd = parseDate( dt, null )
        return pd.year 
    }
  
	@ProxyMethod(local=true)
	public def parseDate(def d, String timezone) {
		if (!(d instanceof Date))
			d = parse("yyyy-MM-dd", d);
		def cal = Calendar.getInstance();
		cal.setTime( d );
		def map = [:];
		map.month = cal.get( Calendar.MONTH ) + 1;
		map.day = cal.get( Calendar.DATE );
		map.year = cal.get( Calendar.YEAR );
		map.hour = cal.get( Calendar.HOUR );
		map.minute = cal.get( Calendar.MINUTE );
		map.second = cal.get( Calendar.SECOND );
		map.millisecond = cal.get(Calendar.MILLISECOND);
		map.date  = d 
		map.qtr = getQtrByMonth( map.month );
		
		return map;
	}
	
	@ProxyMethod
	public def getQtrByMonth( month ) {
		if( month >= 1 && month <= 3 ) return 1;
		else if( month >= 4 && month <= 6 ) return 2;
		else if( month >= 7 && month <= 9 ) return 3;
		else return 4;
	}
	
	@ProxyMethod
	public def buildCustomTimeStamp( dt ) {
		// return a custom timestamp formatted as  YYYYQMMDD where YYYY - year, Q - quarter, MM - month, DD - day e.g, 2011-05-24 -> 201120524
		// this could be used as criteria for date based queries such as year, qtrly, monthly and daily 
		def map = parseDate(dt, null)
		return map.year + '' + map.qtr +  (map.month + '').padLeft(2, '0') + (map.day+'').padLeft(2, '0')
	}
	
	@ProxyMethod(local=true) 
	public def getCurrentTimeStamp() {
		return getTimeStamp( serverDate );
	}
	
	@ProxyMethod(local=true) 
	public def getTimeStamp(Date dt) {
		def cal = Calendar.getInstance();
		cal.setTime( dt );
		return cal.timeInMillis;
	}
	
	@ProxyMethod(local=true)
	public def add(Date d, String interval) {
		if(d==null) d = getServerDate();
		return DateUtil.add( d, interval );	
	}	
	
	@ProxyMethod(local=true)
	public def findNextDate(String timeInterval) {
		return DateUtil.add( serverDate, timeInterval );	
	}

	@ProxyMethod
	public def getMonths() {
		return [
			[index:1, name:"JAN", caption:"January"],
			[index:2, name:"FEB", caption:"February"],
			[index:3, name:"MAR", caption:"March"],
			[index:4, name:"APR", caption:"April"],
			[index:5, name:"MAY", caption:"May"],
			[index:6, name:"JUN", caption:"June"],
			[index:7, name:"JUL", caption:"July"],
			[index:8, name:"AUG", caption:"August"],
			[index:9, name:"SEP", caption:"September"],
			[index:10, name:"OCT", caption:"October"],
			[index:11, name:"NOV", caption:"November"],
			[index:12, name:"DEC", caption:"December"]
		];
	}
	
	@ProxyMethod
	public def getQtrs() {
		return [
			[index:1, name:"1ST", caption:"1st Quarter"],
			[index:2, name:"2ND", caption:"2nd Quarter"],
			[index:3, name:"3RD", caption:"3rd Quarter"],
			[index:4, name:"4TH", caption:"4th Quarter"]
		];
	}
    
    @ProxyMethod
    public def getMonthEndDate( dt ) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(dt);
        int d = cal.getActualMaximum( Calendar.DAY_OF_MONTH );
        cal.set( Calendar.DAY_OF_MONTH, d );
        return cal.getTime();
    }
    
    @ProxyMethod
    public Date getBeginningQtrDate( int qtr, int year, int day ) {
        Calendar cal = Calendar.getInstance();
        int month = 0;
        switch(qtr) {
            case 1: month = Calendar.JANUARY; break;
            case 2: month = Calendar.APRIL; break;
            case 3: month = Calendar.JULY; break;
            default: month = Calendar.OCTOBER;
        }
        cal.set( year, month, day,  0, 0  );
        return cal.getTime();
    }
    
    @ProxyMethod
    public Date getQtrEndDate( int qtr, int year ) {
        Calendar cal = Calendar.getInstance();
        int month = 0;
        switch(qtr) {
            case 1: month = Calendar.MARCH; break;
            case 2: month = Calendar.JUNE; break;
            case 3: month = Calendar.SEPTEMBER; break;
            default: month = Calendar.DECEMBER; break;
        }
        cal.set( year, month, 1, 0, 0, 0  );
        int d = cal.getActualMaximum( Calendar.DAY_OF_MONTH );
        cal.set( Calendar.DAY_OF_MONTH, d );
        return cal.getTime();
    }
    
    @ProxyMethod
    public int getQtr( Date d ) {
        Calendar cal = Calendar.getInstance();
        cal.setTime( d );
        int month = cal.get( Calendar.MONTH );
        if( month == Calendar.JANUARY || month == Calendar.FEBRUARY || month == Calendar.MARCH ) return 1;
        if( month == Calendar.APRIL || month == Calendar.MAY || month == Calendar.JUNE ) return 2;
        if( month == Calendar.JULY || month == Calendar.AUGUST || month == Calendar.SEPTEMBER ) return 3;
        return 4;
    }
    
    @ProxyMethod
    public def getDaysDiff(Date startDate, Date endDate ) {
        Calendar startCal = Calendar.getInstance();
        Calendar endCal = Calendar.getInstance();
        
        startCal.setTime(startDate);
        endCal.setTime(endDate );
        
        long startMillis = startCal.getTimeInMillis();
        long endMillis = endCal.getTimeInMillis();
        
        // Calculate no. of days using diff in milliseconds
        long diff = endMillis - startMillis;
        return (int)(diff / (24 * 60 * 60 * 1000) + 1);
    }
    
    

}
