import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;

class ETRACSUserService 
{

    @PersistenceContext("java:main")
    def em;
	
	@PersistenceContext("main")
	def adminEm;
	
	
	@Service('LogService')
	def logSvc
	
	def USER_SCHEMA = 'etracsuser' 
	def CASHIER_ROLE = 'CASHIER'
	def COLLECTOR_ROLE = 'COLLECTOR'
	def LIQUIDATING_OFFICER_ROLE = 'LIQUIDATING_OFFICER' 
	
	
	@ProxyMethod
	public def getList( searchText, params ) {
		if( ! searchText ) return getListByName("etracsuser:getList", [:], params);
		def result = [];
        def criteria = [uid:searchText, lastname:searchText+'%']
		if( (result = getListByName("etracsuser:findByUid", criteria, params)) ) return result;
		if( (result = getListByName("etracsuser:findByLastName", criteria, params)) ) return result;
		return result;
	}
	
	@ProxyMethod
	public def getCashierList( searchText, params ) {
		if( !params ) params = [:];
		params.searchText = searchText;
		return getUsersByRole2( CASHIER_ROLE, params );
	}
    
	@ProxyMethod
	public void save( user ) {
		em.update( user.schemaname, user, { diff ->
			logSvc.logB('UPDATE', 'ETRACSUser', user.objid, null, diff  )
		} as UpdateChangeHandler )
	}
	
	/*
	@ProxyMethod
	public List loadUserRoles( objid  ) {
		def roles = em.sqlContext.createNamedQuery('etracsuser:getUserRoles').setParameter('userid', objid).resultList
		roles.sort()
		return roles
	}
	*/
	
	
	@ProxyMethod
	public def getUserByRole( userid, tagid ) {
		def user = adminEm.sqlContext.createNamedQuery('etracsuser:getUserByRole').setParameters([objid:userid, tagid:tagid]).singleResult
		if( ! user ) throw new Exception('User does not exists or is not assigned as ' + tagid + '.' )
		return user 
	}
	
	@ProxyMethod
	public Map getCashier( cashierid ) {
		return getUserByRole( cashierid, CASHIER_ROLE )
	}
	
	@ProxyMethod
	public Map getCollector( collectorid ) {
		return getUserByRole( collectorid, COLLECTOR_ROLE )
	}
	
	@ProxyMethod
	public def getLiquidatingOfficer( lqofficerid ) {
		return getUserByRole( lqofficerid, LIQUIDATING_OFFICER_ROLE)
	}
	
	
	@ProxyMethod
	public Map getUser( userid ) {
		return em.sqlContext.createNamedQuery('etracsuser:findById').setParameter('objid', userid ).singleResult
	}
	
	@ProxyMethod
	public List getUsersByRole( tagid ) {
		return getUsersByRole2( tagid, null );
	}
	
	@ProxyMethod
	public List getUsersByRole2( tagid, param ) {
		def qry = adminEm.sqlContext.createNamedQuery('etracsuser:getUsersByRole');
		
		if( !param ) param = [:];
		param.tagid = tagid;
		
		if(param._start) qry.setFirstResult(param._start);
		if(param._limit) qry.setMaxResults(param._limit);
		
		qry.setParameters(param);
		
		return qry.resultList;
	}
	
	@ProxyMethod
	public List getCollectorList() {
		return getUsersByRole( COLLECTOR_ROLE )
	}
	
	/*
	@ProxyMethod
	public List getCollectorsByLqOfficerId( lqofficerid ) {
		return em.sqlContext.createNamedQuery('etracsuser:getCollectorsByLqOfficerId').setParameter('lqofficerid', lqofficerid).resultList
	}
	*/
	
	@ProxyMethod
	public List getLiquidatingOfficers(searchText, params) {
		if( !params ) params = [:];
		params.searchText = searchText;
		return getUsersByRole2( LIQUIDATING_OFFICER_ROLE, params );
	}
		
	private def getListByName( namedQuery, values, params ) {
		return em.sqlContext.createNamedQuery( namedQuery )
					.setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList;
	}
    
}
