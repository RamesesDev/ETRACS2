import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;

class ETRACSUserService 
{

    @PersistenceContext("java:main")
    def em;
	
	@Service('LogService')
	def logSvc
	
	def USER_SCHEMA = 'etracsuser' 
	
	
	@ProxyMethod
	public def getList( searchText, params ) {
		if( ! searchText ) return getListByName("etracsuser:getList", [:], params);
		def result = [];
		if( (result = getListByName("etracsuser:findByUid", [uid:searchText], params)) ) return result;
		if( (result = getListByName("etracsuser:findByLastName", [uid:searchText], params)) ) return result;
		return result;
	}
    
	@ProxyMethod
	public void save( user ) {
		em.update( user.schemaname, user, { diff ->
			logSvc.logB('UPDATE', 'ETRACSUser', user.objid, null, diff  )
		} as UpdateChangeHandler )
	}
	
	@ProxyMethod
	public List loadUserRoles( objid  ) {
		def roles = em.sqlContext.createNamedQuery('etracsuser:getUserRoles').setParameter('userid', objid).resultList
		roles.sort()
		return roles
	}
	
	
	@ProxyMethod
	public Map getCollector( collectorid ) {
		def collector = em.sqlContext.createNamedQuery('etracsuser:getCollector').setParameter('objid', collectorid).singleResult
		if( !collector ) throw new Exception('Collector does not exists.')
		return collector
	}
	
	@ProxyMethod
	public List getCollectorList() {
		return em.sqlContext.createNamedQuery('etracsuser:getCollectors')
	}
	
	@ProxyMethod
	public def getLiquidatingOfficer( liqofficerid ) {
		def lqofficer = em.sqlContext.createNamedQuery('etracsuser:getLiquidatingOfficer').setParameter('objid', lqofficerid).singleResult
		if( ! lqofficer ) throw new Exception('Liquidating Officer does not exists.')
		return lqofficer 
	}
	
	@ProxyMethod
	public List getLiquidatingOfficers(searchText, params) {
		if( ! searchText ) searchText = ''
		return getListByName('etracsuser:getLiquidatingOfficers', [name: searchText+'%'], params )
	}
	
	
	private def getListByName( namedQuery, values, params ) {
		return em.sqlContext.createNamedQuery( namedQuery )
					.setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList;
	}
    
}
