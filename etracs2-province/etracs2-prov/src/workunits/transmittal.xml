<workunit>
    <invokers>
        <invoker type="formActions" caption="Close" mnemonic="c" action="_close" />
        <invoker type="itemActions" caption="Incomplete Requirements" mnemonic="e" action="doIncomplete" visibleWhen="#{selectedItem != null}"/>
        <invoker type="formActions" caption="Submit to Reviewer" mnemonic="s" action="submit" visibleWhen="#{state == 'SUBMITTED'}"  />
    </invokers>
    
    <code>
        <![CDATA[
        
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        
        public class TransmittalController 
        {
            @Service("TransmittalService")
            def svc;
            
            def transmittal;
            def state;
            def listRefreshHandler;
            def selectedItem;
            def title = "Transmittal Information";
            def remarks;
            
            public def doIncomplete() {
                if(! MsgBox.confirm("Tag document with Incomplete Requirements?") ) return null;
                
                    return InvokerUtil.lookupOpener("message_popup",[
                        caption:"Please provide a reason.",
                        acceptHandler:{ msg ->
                            def faas = svc.incompleteTransmittal( transmittal.objid, selectedItem.item.objid, msg );
                            MsgBox.alert("Document is tagged - Incomplete Requirements.");
                            refreshList();
                        }
                    ]);
            }
            
            public void submit() {
                if( MsgBox.confirm("Submit to reviewer?") ) {
                    svc.submit( transmittal.objid );
                    state = "RECEIVED";
                    refreshList();
                }
            }
            
            public def getHtml() {
                if( selectedItem?.item ) {
                    if( ! selectedItem.item.html ) {
                        selectedItem.item.html = svc.getItemHtml( selectedItem.item.objid );
                    }
                    return selectedItem.item.html;
                }
                return null;
            }
            
            private void refreshList() {
                if( listRefreshHandler ) {
                    listRefreshHandler();
                }
            }
            
            def listHandler = [
                getRows    : { return 100; },
                getColumns : {
                    return [
                        new Column( name:"item.type", caption:"Kind", width:30),
                        new Column( name:"item.txnType", caption:"Txn", width:30),
                        new Column( name:"item.tdNo", caption:"TD No.", width:110),
                        new Column( name:"item.pin", caption:"PIN", width:150),
                    ]
                },
                fetchList  : { svc.getItemList( transmittal.objid ); },
            ] as PageListModel;
            
            public def showAttachment( location ) {
                return new PopupOpener( name:"imageviewer", caption:"Attachment", params:[url:location] );
            }
            
            
        }
        
        ]]>
        
    </code>
    
    <pages>
        <page template="etracs2.prov.transmittal.TransmittalPage"/>
        <page name="incompletePage" template="etracs2.prov.IncompletePage"/>
    </pages>
</workunit>