<workunit>
    <invokers>
        <invoker type="home.action" action="initReceived" target="window" permission="transmittal.view-received" caption="Transmittal (Received)" icon="images/folder.png"/>
        <invoker type="home.action" action="initSubmitted" target="window" permission="transmittal.view-submitted" caption="Transmittal (Submitted)" icon="images/folder.png"/>
        <invoker type="home.action" action="initClosed" target="window" permission="transmittal.view-closed" caption="Transmittal (Closed)" icon="images/folder.png"/>
        
        <invoker type="formActions" action="open" caption="Open" mnemonic="o" visibleWhen="#{selectedItem != null and selectedItem.item != null}" icon="images/open24.png"/>
        <invoker type="formActions" action="delete" caption="Delete" mnemonic="d" visibleWhen="#{selectedItem.item != null and state == 'RECEIVED'}" icon="images/delete24.png"/>
        <invoker type="formActions" action="export" caption="Export" mnemonic="e" visibleWhen="#{selectedItem.item != null and state == 'CLOSED'}" icon="images/export24.png"/>
    </invokers>
    
    <code>
        <![CDATA[
        
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import javax.swing.filechooser.*;
        import javax.swing.*;
        import com.rameses.util.*;
        
        public class TransmittalListController 
        {
            @Service("TransmittalService")
            def svc;
            
            def message;
            
            @Service("TransmittalHtmlService")
            def htmlService;
            
            @Binding
            def binding;
        
            def state = "SUBMITTED";
            def title = "List of Transmittal";
            
            def selectedItem;
            def search = [:];
            
            public def open() {
                doOpen( selectedItem.item );
            }
            
            public void doSearch() {
                listHandler.load();
            }
            
            public void delete() {
                if( MsgBox.confirm("Delete selected transmittal?") ) {
                    svc.deleteTransmittal( selectedItem.item.objid );
                    binding.refresh();
                }
            }
            
            def listHandler = [
                getColumns : {
                    return [
                        new Column( name:"item.docNo", caption:"Transmittal No.", width:110),
                        new Column( name:"item.lgu", caption:"LGU", width:290),
                    ]
                },
                fetchList  : { 
                    search.state = state;
                    return svc.getList( search, it); 
                },
                onOpenItem : { item, colname -> doOpen( item ) },
            ] as PageListModel;
        
            public def getHtml() {
                if( selectedItem?.item ) {
                    if( ! selectedItem.item.html ) {
                        selectedItem.item.html = htmlService.getHtml( selectedItem.item.objid );
                    }
                    return selectedItem.item.html;
                }
                return "No record or item selected...";
            }
            
            def refreshHandler = {
                listHandler.load();
                selectedItem = listHandler.selectedItem;
                binding.refresh();
            }
            
            public void initSubmitted() {
                doInit( "SUBMITTED", "List of Submitted Transmittals" );
            }
            
            public void initReceived() {
                doInit( "RECEIVED", "List of Received Transmittals" );
            }
            
            public void initReviewed() {
                doInit( "REVIEWED", "List of Reviewed Transmittals" );
            }
            
            public void initClosed() {
                doInit( "CLOSED", "List of Closed Transmittals" );
            }
            
            private void doInit( state, title ) {
                this.state = state;
                this.title = title;
            }
            
            private def doOpen( item ) {
                return new WindowOpener( name:"transmittal", caption:"Transmittal ($item.docNo)", params:[transmittal:item, state:item.state, listRefreshHandler:refreshHandler] );
            }
            
            public def export(){

                def jfc = new JFileChooser();
                jfc.fileSelectionMode = JFileChooser.DIRECTORIES_ONLY;
                jfc.acceptAllFileFilterUsed = false;
                def ret = jfc.showOpenDialog(null);
                
                if( ret == JFileChooser.APPROVE_OPTION ){
                
                    def file = new File( jfc.selectedFile.absolutePath + File.separator + "C-" + selectedItem.item.objid  ); 
                    def oos = new ObjectOutputStream( new BufferedOutputStream( new FileOutputStream( file )));
                    
                    def chunk = [transmittalId:selectedItem.item.objid];
                    def count = 0;
                    def cancelled = false;
                    def onExecute = {
                        try{
                            count += 1;
                            chunk = svc.exportTransmittal( chunk );
                            System.out.println( chunk.data );
                            oos.writeObject( chunk.data );
                            message = "Exporting transmittal [$count]";
                            return chunk.eof;
                        }catch(e){
                            cancelled = true;
                            message = "ERROR: " + ExceptionManager.getOriginal( e ).message;
                            return true;
                        }finally{
                            binding.refresh("message");
                        }
                    };

                    def onEnd = { 
                        if( !cancelled ){
                            message = "Export successful.";
                            binding.refresh("message");
                        }
                        try{ oos.close(); }catch(e){;} 
                    };

                    def task = new ExportTransmittal( onExecute:onExecute, onEnd:onEnd );
                    OsirisContext.clientContext.taskManager.addTask( task  );

                    return "wait";
                }
            }
            
        }
        
        class ExportTransmittal extends Task{
            def onExecute;
            def onEnd;
            
            public boolean accept(){ return true; }
            public void execute(){ ended = onExecute(); }
            public void end(){ onEnd(); };
        }
        
        ]]>
        
    </code>
    
    <pages>
        <page template="etracs2.prov.ListPage"/>
        <page template="etracs2.prov.FileDownloadPage" name="wait"/>
    </pages>
</workunit>