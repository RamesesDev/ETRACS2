<workunit>
    <invokers>
        <invoker type="faas.open" action="open" target="window" caption="FAAS Information"/>
        
        <invoker type="formActions" action="doReturn" permission="faas.return" caption="Return" mnemonic="r" visibleWhen="#{faas.docstate == 'FORAPPROVAL'}" icon="images/return24.png"/>
        <invoker type="formActions" action="submit" permission="faas.submit" caption="Submit" mnemonic="s" visibleWhen="#{faas.docstate == 'FORPROVAPPROVAL'}" icon="images/submit24.png" />
        <invoker type="formActions" action="approve" permission="faas.approve" caption="Approve"  mnemonic="a" visibleWhen="#{faas.docstate == 'FORAPPROVAL'}" icon="images/approve24.png" />
        <invoker type="formActions" action="doDisapprove" permission="faas.disapprove" caption="Disapprove" mnemonic="d" visibleWhen="#{faas.docstate == 'FORPROVAPPROVAL' or faas.docstate == 'FORAPPROVAL'}" icon="images/disapprove24.png"/>
        <invoker type="formActions" action="viewAttachments" caption="Attachments" icon="images/incomplete24.png" />
        
        <invoker type="attachmentActions" action="back" caption="Back" />
        
        <invoker type="formActions" action="assignPin" permission="faas.assignpin" caption="Assign New PIN" mnemonic="p" visibleWhen="#{faas.docstate == 'FORPROVAPPROVAL' and faas.rpu.rputype == 'land' and faas.info.txntype == 'ND'}" />
        <invoker type="formActions" action="exchangePin" permission="faas.exchangepin" caption="Exchange PIN" mnemonic="x" visibleWhen="#{faas.docstate == 'FORPROVAPPROVAL' and faas.rpu.rputype == 'land' and faas.info.txntype == 'ND'}" />
        
    </invokers>
    
    <code>
        <![CDATA[
        
        import com.rameses.rcp.common.*
        import com.rameses.rcp.annotations.*
        import com.rameses.osiris2.client.*
        import com.rameses.io.FileTransfer
        import com.rameses.invoker.client.DynamicHttpTransfer
        import java.io.*

        
        public class ProvFAASController 
        {
            @Service("ProvinceFAASService")
            def svc
            
            @Service("ProvinceFAASHtmlService")
            def htmlService
                    
            @Binding
            def binding
            
            def faas
            def attachment
            def listRefreshHandler
            def remarks
            def title = "FAAS Information"
            
            def open() {
                faas = svc.open( faas.objid )
            }
            
            public void submit() {
                if( MsgBox.confirm("Submit FAAS?") ) {
                    faas = svc.submit( faas.objid )
                    refreshList()
                }
            }
            
            public def approve() {
                if( MsgBox.confirm("Approve FAAS?") ) {
                    faas = svc.approve( faas.objid )
                    refreshList()
                }
            }
            
            public def doDisapprove() {
                return InvokerUtil.lookupOpener("message_popup", [
                    caption:"Please provide a reason for disapproval.",
                    acceptHandler:{ msg -> 
                        faas = svc.disapprove( faas.objid, msg )
                        binding.refresh("formActions")
                        refreshList()
                    }
                ])
            }
            
            public def doReturn() {
                return InvokerUtil.lookupOpener("message_popup", [ 
                    caption:"Please provide reason for return.",
                    acceptHandler:{ msg ->
                        faas = svc.returnDoc( faas.objid, msg )
                        binding.refresh("formActions")
                        refreshList()
                    }
                ])
            }
            
            public def assignPin() {
                return InvokerUtil.lookupOpener("faas.assignpin", [
                    faas:faas,
                    acceptHandler: { key, section, newSeries, oldSeries ->
                        faas = svc.assignPin( faas, key, section, newSeries, oldSeries )
                        refreshList()
                        binding.refresh("html")
                    }
                ])
            }
            
            public def exchangePin() {
                return InvokerUtil.lookupOpener("faas.exchangepin", [
                    faas:faas,
                    exchangeHandler: { fromFaasId, toFaasId ->
                        faas = svc.exchangePin( fromFaasId, toFaasId )
                        refreshList()
                        binding.refresh("html")
                    }
                ])
            }
            
            public def getHtml() {
                return htmlService.getHtml( faas.objid )
            }
            
            public def showAttachment( params ) {
                def data = params.split("~~")
                def opener = InvokerUtil.lookupOpener("file:download", [fileName:data[2]] )
                opener.caption = "Attachment: " + data[1]
                return opener
            }
            
            private void refreshList() {
                if( listRefreshHandler ) {
                    listRefreshHandler()
                }
            }
            
            
            /*----------------------------------------------------------------------
            *
            * Attachment Support
            *----------------------------------------------------------------------*/
            def attachments = []
            def selectedItem
            
            
            def viewAttachments() {
                attachments = svc.getAttachments( faas.objid )
                return 'attachment'
            }
            
            void setSelectedItem( selectedItem ) {
                this.selectedItem = selectedItem
                if( selectedItem ) {
                    def file = new File( resolveFileName( selectedItem.filename ) )
                    if( ! file.exists() ) {
                        downloadFile( selectedItem )
                    }
                }
            }
            
            
            def getImageUrl() {
                if( ! selectedItem ) {
                    return 'Select an attachment'
                }
                def file = new File( resolveFileName( selectedItem.filename ) )
                def url = file.toURL().toString()
                return """
                    <html>
                        <body>
                            <img src="$url">
                        </body>
                    </html>
                """
            }            
            
            def resolveFileName( filename ) {
                def cachedir = System.properties['user.dir'] + '/cache' 
                def dir = new File( cachedir )
                if( !dir.exists() ) {
                    dir.mkdirs()
                    OsirisContext.clientContext.properties.cache_initialized = true 
                }
                return cachedir + '/' + filename 
            }

            void downloadFile( attachment ) {
                def app = getAppInfo()

                DynamicHttpTransfer.In handler = new DynamicHttpTransfer.In( app.host, app.context, 'ETRACSFileTransferService', 'downloadAttachment');
                handler.getParameters().put('attachment', attachment);

                File f = new File( resolveFileName(attachment.filename) );
                FileTransfer.FileOutputHandler output = new FileTransfer.FileOutputHandler( f );

                FileTransfer ft = new FileTransfer();
                ft.transfer( handler, output );
            }

            def getAppInfo() {
                def host        = OsirisContext.clientContext?.appEnv['default.host']
                host            = ( host ? host : 'localhost:8080' )
                def context     = OsirisContext.clientContext?.appEnv['app.context']
                context         = (context ? context : 'maribojoc' )
                return [host:host, context:context]
            }

            
            def listHandler = [
                getRows    : { return 25 },
                getColumns : { return [
                    new Column(name:'type', caption:'Attachment'),
                    new Column(name:'refno', caption:'Ref. No.'),
                    new Column(name:'refdate', caption:'Ref. Date'),
                    new Column(name:'remarks', caption:'Remarks'),
                ]},
                fetchList : { return attachments },
            ] as SubListModel
            
            
            def back() {
                return 'default' 
            }


        }
        
        ]]>
        
    </code>
    
    <pages>
        <page template="etracs2.prov.faas.FAASPage"/>
        <page name="attachment" template="etracs2.prov.faas.FAASAttachmentPage"/>
    </pages>
</workunit>