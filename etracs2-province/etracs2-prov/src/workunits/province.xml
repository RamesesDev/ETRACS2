<workunit>
    <invokers>
        <invoker folderid="menu/rpt" action="init" permission="province.view" caption="Province" />
        <invoker type="formActions" action="save" tooltip="Save" mnemonic="s" shortcut="ctrl S" icon="images/save24.png"/>
    </invokers>
    
    <code>
        
<![CDATA[        
import com.rameses.rcp.common.*
import com.rameses.rcp.annotations.*
import java.rmi.server.UID

class ProvinceController 
{
    @Binding
    def binding
    
    @Service("ProvinceLGUService")
    def svc
    
    def message
    def selectedMunicipality
    def selectedBarangay
    def province
    
    def init() {
        province = svc.open()
        if( province.objid ) {
            return 'default'
        }
        return 'init' 
    }
    
    def create() {
        save()
        return 'default' 
    }
    
    void save() {
        if( province.objid ) {
            province = svc.update( province )
        }
        else {
            province = svc.create( province )
        }
    }
    
    
    void setSelectedMunicipality( selectedMunicipality ) {
        if( selectedMunicipality ) {
            selectedMunicipality.barangays = svc.getBarangayList( selectedMunicipality.objid )
        }
        this.selectedMunicipality = selectedMunicipality
    }   
    
    
    def municipalityListHandler = [
        createItem   : { return createMunicipality() },
        getRows     : { return 100 },
        getColumns  : { return [
            new Column( name:"indexno", caption:"Index No.", maxWidth:80, editable:true, required:true ),
            new Column( name:"name", caption:"Name", editable:true, required:true ),
        ]},
        onAddItem    : { item -> addMunicipalityItem( item ) },
        validate     : { li -> validateMunicipalityItem( li.item )},
        onRemoveItem : { item -> 
            if( MsgBox.confirm("Delete item?") ) {
                svc.removeMunicipality( item.objid )
                province.municipalities.remove( item )
            }
        },
        fetchList    : { return province.municipalities },
    ] as SubListModel
    
    void addMunicipalityItem( item ) {
        try{
            def muni = svc.createMunicipality( item )
            item.putAll( muni )
            province.municipalities.add(item) 
        }
        catch( e ) {
            showMessage( e ) 
        }
    }
    
    void validateMunicipalityItem( item) {
        try {
            checkDuplicate( item, province.municipalities, "indexno", "Index No." ) 
            checkDuplicate( item, province.municipalities, "name", "Name" ) 
            if( ! newMunicipality( item) ) {
                def muni = svc.updateMunicipality( item )
                item.putAll( muni)
            }
        }
        catch( e ) {
            showMessage( e )
        }
    }
    
    boolean newMunicipality( muni ) {
        def data = province.municipalities.find{ it.objid == muni.objid }
        return ( data == null )
    }
    
    
    def brgyListHandler = [
        createItem  : { return createBarangay() },
        getRows     : { return 100 },
        getColumns  : {return [
            new Column( name:"indexno", caption:"Index No.", maxWidth:80, editable:true, required:true ),
            new Column( name:"name", caption:"Name", editable:true, required:true ),
        ]},
        onAddItem    : { item -> addBarangayItem( item ) },
        validate     : { li -> validateBarangayItem(li.item ) },
        onRemoveItem : { item -> 
            if( MsgBox.confirm("Delete item?") ) {
                svc.removeBarangay( item.objid )
                selectedMunicipality.barangays.remove( item )
            }
        },
        fetchList    : { return selectedMunicipality?.barangays },
    ] as SubListModel

    void addBarangayItem( item ) {
        try {
            def brgy = svc.createBarangay( item )
            item.putAll( brgy )
            selectedMunicipality.barangays.add(item) 
        }
        catch( e) {
            showMessage( e ) 
        }
    }
    
    void validateBarangayItem( item) {
        try {
            checkDuplicate( item, selectedMunicipality.barangays, "indexno", "Index No." ) 
            checkDuplicate( item, selectedMunicipality.barangays, "name", "Name" ) 
            if( !newBarangay( item) ) {
                def brgy = svc.updateBarangay( item )
                item.putAll( brgy )
            }
        }
        catch( e ) {
            showMessage( e )
        }
    }
    
    boolean newBarangay( brgy ) {
        def data = selectedMunicipality.barangays.find{ it.objid == brgy.objid }
        return ( data == null )
    }
    
    void validateItem( item, list ) {
        try {
            checkDuplicate( item, list, "indexno", "Index No." ) 
            checkDuplicate( item, list, "name", "Name" ) 
            clearMessage()
        }
        catch( e ) {
            showMessage( e )
        }
    }
    
    void clearMessage() {
        message = null
        binding.refresh('message')
    }
    
    void showMessage( e ) {
        message = e.message
        binding.refresh( 'message') 
        throw e
    }

    void checkDuplicate( item, list, key, caption ) {
        if( list.find { f -> f."$key" == item."$key"  && f.pin != item.pin } )
            throw new Exception("Duplicate $caption not allowed.")
    }
    
    def createMunicipality() {
        return [
            objid           : 'M' + new UID(),
            lgutype         : 'MUNICIPALITY',
            parentid        : province.objid,
            parentindexno   : province.indexno,
            barangays       : [],
        ]
    }
    
    def createBarangay() {
        return [
            objid       : 'B' + new UID(),
            lgutype        : "BARANGAY",
            parentid    : selectedMunicipality?.objid,
            parentindexno   : selectedMunicipality?.pin,
        ]
    }
}

]]>
    </code>
    
    <pages>
        <page name="init" template="etracs2.prov.ProvinceInitPage"/>
        <page template="etracs2.prov.ProvincePage"/>
    </pages>
</workunit>