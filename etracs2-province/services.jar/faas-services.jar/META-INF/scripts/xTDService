import com.rameses.annotations.*;

class TDService
{
	@PersistenceContext("etracs")
	def em;
		
	@ProxyMethod
	public void post( def faas ) {
		faas.info.issueDate = java.sql.Date.valueOf(faas.info.issueDate);
		if( faas.info.title?.date ) {
			faas.info.title.date = java.sql.Date.valueOf(faas.info.title.date);
		}
		def td = [
			objid         : faas.objid,
			schemaName    : "td:td",
			schemaVersion : "1.0",
			state         : faas.state,
			tdNo          : faas.info.tdNo,
			info          : buildInfo( faas ),
			assessments   : buildAssessment( faas ),
			
		];
		
		em.validate("td:td", td );
		em.create("td:td", td );
	}
	
	private def buildInfo( faas ) {
		def rpInfo = faas.rp.info;
		def info = faas.info;
		info.barangay       = rpInfo.barangay;
		info.cadastralLotNo = rpInfo.cadastralLotNo;
		info.blockNo        = rpInfo.blockNo;
		info.houseNo        = rpInfo.houseNo;
		info.street         = rpInfo.street;
		info.purok          = rpInfo.purok;
		info.cancelInfo     = rpInfo.cancelInfo;
		info.boundary       = rpInfo.boundary;
		
		def rpuInfo = faas.rpu.info;
		info.ry        = rpuInfo.ry;
		info.type      = rpuInfo.type;
		info.suffix    = rpuInfo.suffix;
		info.special   = rpuInfo.special;
		info.taxable   = rpuInfo.taxable;
		info.totalMV   = rpuInfo.totalMV;
		info.totalAMV  = rpuInfo.totalAMV;
		info.totalAV   = rpuInfo.totalAV;
		info.areaSqm   = rpuInfo.areaSqm;
		info.areaHec   = rpuInfo.areaHec;
		return info;
	}
	
	private def buildAssessment( faas ) {
		def rpu = faas.rpu;
		if( rpu.rpuType == "rpuland:land" ) 
			return processLand( rpu );
		else if( rpu.rpuType == "rpubldg:bldg" ) 
			return buildItemList( rpu, rpu.info.bldgUses );
		else if( rpu.rpuType == "rpumach:mach" ) 
			return buildItemList( rpu, rpu.info.machineUses );
		else if( rpu.rpuType == "rpumisc:misc" ) 
			return buildItemList( rpu, rpu.info.miscRPUItems );
	}
	
	private def processLand( rpu ) {
		def itemList =[];
		itemList.addAll( buildItemList( rpu, rpu.info.landDetails ) );
		itemList.addAll( buildItemList( rpu, rpu.info.plantDetails ) );
		return itemList;
	}
	
	private def buildItemList( rpu, rpuItemList ) {
		def items =	[];
		rpuItemList.each {
			def key = rpu.info.classCode + it.actualUseCode;
			def item = items.find{ itm -> itm.key == key };
			def area = getAreaByRpuType(rpu.rpuType, it);
			if( !item  ) {
				item = createItem(
							key, rpu.info.classTitle, it.actualUseTitle,
							it.marketValue, it.adjMarketValue, 
							it.assessLevel, it.assessedValue,
							area.sqm, area.hec
						);
				items.add(item);
			}
			else {
				summarizeAssessmentInfo( item, it.marketValue, it.adjMarketValue, it.assessedValue, area.sqm, area.hec);
			}
		}
		return items;
	}
	
	private def getAreaByRpuType( rpuType, item ) {
		def area = [sqm:0.0, hec:0.0];
		if( rpuType == "rpumach:mach" ) return area;
		if( rpuType == "rpumisc:misc" ) return area;
		if( rpuType == "rputree:tree" ) return area;
			
		if( rpuType == "rpuland:land" ) {
			area.sqm = item.areaSqm;
			area.hec = item.areaHec;
		}
		else if( rpuType == "rpubldg:bldg" )  {
			area.sqm = item.area;
			area.hec = item.area /10000;
		}
		return area;
	}
	
	private void summarizeAssessmentInfo( item, marketValue, adjMarketValue, assessedValue, areaSqm, areaHec  ) {
		item.marketValue    += marketValue
		item.adjMarketValue += adjMarketValue
		item.assessedValue  += assessedValue
		item.areaSqm        += areaSqm;
		item.areaHec        += areaHec;
	}
	
	private def createItem( key, classTitle, actualUseTitle, marketValue, adjMarketValue, assessLevel, assessedValue, areaSqm, areaHec) {
		return [ 
			key 		   : key,
			classTitle     : classTitle,
			actualUseTitle : actualUseTitle,
			marketValue    : marketValue,
			adjMarketValue : adjMarketValue,
			assessLevel    : assessLevel,
			assessedValue  : assessedValue,
			areaSqm        : areaSqm,
			areaHec        : areaHec,
		];
	}
	
}
