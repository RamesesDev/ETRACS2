import com.rameses.annotations.*;
import java.rmi.server.UID;

class RPUHistoryService 
{
	@PersistenceContext("etracs")
	def em;
	
	@ProxyMethod
	public void post( faas ) {
		def rpu = em.read("rpuhistory:rpu", [objid: getRpuId(faas)]);
		if( ! rpu ) {
			rpu = createRpu( faas );
		}
		createRpuHistory( faas, rpu );
	}	
	
	private void createRpuHistory( faas, rpu ) {
		def history = [
			objid           : faas.objid,
			parentid        : rpu.objid,
			txnType         : faas.info.txnType,
			tdNo            : faas.info.tdNo,
			issueDate       : faas.info.issueDate,
			effectivityYear : faas.info.effectivityYear,
			effectivityQtr  : faas.info.effectivityQtr,
			taxpayerName    : faas.info.taxpayer.taxpayerName,
			taxpayerAddress : faas.info.taxpayer.taxpayerAddress,
			administratorName    : faas.info.administrator?.taxpayerName,
			administratorAddress : faas.info.administrator?.taxpayerAddress,
			barangay        : faas.barangay,
			pin             : faas.rpu.info.pin,
			cadastralLotNo  : faas.rp.info.cadastralLotNo,
			surveyNo        : faas.rp.info.surveyNo,
			blockNo         : faas.rp.info.blockNo,
			classCode       : faas.rpu.info.classCode,
			classTitle      : faas.rpu.info.classTitle,
			taxable         : faas.rpu.info.taxable,
			marketValue     : faas.rpu.info.totalMV,
			adjMarketValue  : faas.rpu.info.totalAMV,
			assessedValue   : faas.rpu.info.totalAV,
			areaSqm         : faas.rpu.info.areaSqm,
			areaHec         : faas.rpu.info.areaHec,
		]
		em.validate("rpuhistory:rpuHistory", history);
		em.create("rpuhistory:rpuHistory", history);
	}
	
	private def createRpu( faas )  {
		def rpu = [
			objid         : "R" + new UID(), 
			schemaName    : "rpuhistory:rpu",
			schemaVersion : "1.0",
			state         : faas.state,
			type          : faas.rpu.info.type,
			pin           : faas.rpu.info.pin,
			tdNo          : faas.info.tdNo,
			barangay      : faas.barangay,
			classCode     : faas.rpu.info.classCode,
			classTitle    : faas.rpu.info.classTitle,
			taxpayerName  : faas.info.taxpayer.taxpayerName,
			taxpayerAddress : faas.info.taxpayer.taxpayerAddress,
		]
		em.validate("rpuhistory:rpu", rpu);
		em.create("rpuhistory:rpu", rpu);
		return rpu;
	}
	
	private def getRpuId( faas ) {
		def data = em.sqlContext.createNamedQuery("rpuhistory:getIdByPin").setParameter("pin", faas.rpu.info.pin).singleResult;
		if( data ) {
			return data.objid;
		}
		return null;
	}
	
	
}