import com.rameses.annotations.*;

class FAASService
{
	@PersistenceContext("etracs")
	def em;
	
	@Env
	def env;
	
	@Service("DateService")
	def dateService;

	@Service("Var")
	def var;

	@Service("TDService")
	def tdService;

	def PROVAPPROVAL_STATE = "PROVAPPROVAL";
	def FORAPPROVAL_STATE = "FORAPPROVAL";
	def CURRENT_STATE = "CURRENT";
	def DISAPPROVED_STATE = "DISAPPROVED";
	def CANCELLED_STATE = "CANCELLED";
	
	@ProxyMethod
	public def getList( search, params ) {
		if( env.ASSIGNED_LGU && env.ASSIGNED_LGU.size() > 0) {
			return getListByAssignedLgu( search, params );
		}
		
		def result = null;
		def state = search.state;
		def textSearch = search.textSearch;
		if( ! textSearch ) return getListByName("faas:findByState", [state:state], params);
		if( (result = getListByName("faas:findByTdNo", [state:state, tdno:textSearch], params)) ) return result;
		if( (result = getListByName("faas:findByTaxpayerName", [state:state, taxpayername:textSearch], params)) ) return result;
		if( (result = getListByName("faas:findByPin", [state:state, pin:textSearch], params)) ) return result;
		if( (result = getListByName("faas:findByBarangay", [state:state, barangay:textSearch], params)) ) return result;
		if( (result = getListByName("faas:findByCadastralLotNo", [state:state, cadastrallotno:textSearch], params)) ) return result;
		if( (result = getListByName("faas:findBySurveyNo", [state:state, surveyno:textSearch], params)) ) return result;
		if( (result = getListByName("faas:findByBlockNo", [state:state, blockno:textSearch], params)) ) return result;
		return result;
	}
	
	@ProxyMethod
	public def getListByAssignedLgu( search, params ) {
		def state = search.state;
		def textSearch = search.textSearch;
		def assignedLgus = env.ASSIGNED_LGU;
		def len = assignedLgus.size;
		def whereClause = "";
		
		def vars = '';
		vars = '?,'.multiply( len )[0..(len*2)-2];
		
		def values = assignedLgus;
		if( ! textSearch ) {
			values.add( state );
			whereClause = " WHERE municipality in ($vars) AND state = ? ORDER BY pin ";
			return getListByVars("faas:findByExaminer",["whereClause":whereClause], values, params );
		}
		
		values = assignedLgus;
		values.add( textSearch );
		values.add( state );
		def result = null;		
		
		whereClause = " WHERE municipality in ($vars) AND tdno = ? AND state = ? ORDER BY pin ";
		if( (result = getListByVars("faas:findByExaminer",["whereClause":whereClause], values, params )) ) return result;
		
		whereClause = " WHERE municipality in ($vars) AND taxpayername LIKE ? AND state = ? ORDER BY pin ";
		if( (result = getListByVars("faas:findByExaminer",["whereClause":whereClause], values, params )) ) return result;
		
		whereClause = " WHERE municipality in ($vars) AND pin LIKE ? AND state = ? ORDER BY pin ";
		if( (result = getListByVars("faas:findByExaminer",["whereClause":whereClause], values, params )) ) return result;
		
		whereClause = " WHERE municipality in ($vars) AND barangay = ? AND state = ? ORDER BY pin ";
		if( (result = getListByVars("faas:findByExaminer",["whereClause":whereClause], values, params )) ) return result;
		
		whereClause = " WHERE municipality in ($vars) AND cadastrallotno = ? AND state = ? ORDER BY pin ";
		if( (result = getListByVars("faas:findByExaminer",["whereClause":whereClause], values, params )) ) return result;
		
		whereClause = " WHERE municipality in ($vars) AND surveyno = ? AND state = ? ORDER BY pin ";
		if( (result = getListByVars("faas:findByExaminer",["whereClause":whereClause], values, params )) ) return result;
		
		whereClause = " WHERE municipality in ($vars) AND blockno = ? AND state = ? ORDER BY pin ";
		if( (result = getListByVars("faas:findByExaminer",["whereClause":whereClause], values, params )) ) return result;
		
		return result;
	}
	
	@ProxyMethod
	public def create( @Param(schema="faas:faas") faas ) {
		faas.sys_dtCreated = dateService.getServerDate();
		em.create("faas:faas",  faas);
		def list = em.indexer.getIndexFor("faas:faas");
		em.indexer.fire( list, faas );
		return faas;
	}
	
	@ProxyMethod
	public def open( faasId ) {
		def faas = em.read("faas:faas", [objid:faasId]);
		if( !faas ) throw new Exception("FAAS not found.");
		return faas;
	}
	
	@ProxyMethod
	public def submit( faasId ) {
		def faas = open( faasId );
		if( faas.state != PROVAPPROVAL_STATE ) throw new Exception("FAAS is already $faas.state.");
		
		def currDate = dateService.getServerDate();
		faas.state  = FORAPPROVAL_STATE;
		faas.info.reviewedBy  = [name:env.USERNAME, title:env.JOBTITLE, dtSigned:currDate];
		em.update( "faas:faas", faas );
		
		def faasData = em.read("faas:faas-list", [ objid:faasId ]);
		if( !faasData ) throw new Exception("FAAS not found.");
		faasData.state = FORAPPROVAL_STATE;
		faasData.reviewedBy = env.USERNAME;
		faasData.reviewedByPosition = env.JOBTITLE;
		em.update("faas:faas-list", faasData);
		return faas;
	}

	@ProxyMethod
	public def returnDoc( faasId, remarks ) {
		def faas = open( faasId );
		if( faas.state == CURRENT_STATE ) throw new Exception("FAAS is already $faas.state.");
		
		def currDate = dateService.getServerDate();
		faas.state = PROVAPPROVAL_STATE;
		faas.remarks = remarks;
		faas.info.reviewedBy  = [name:env.USERNAME, title:env.JOBTITLE, dtSigned:currDate];
		em.update( "faas:faas", faas );
		
		def faasData = em.read("faas:faas-list", [ objid:faasId ]);
		if( !faasData ) throw new Exception("FAAS not found.");
		faasData.state = PROVAPPROVAL_STATE;
		em.update("faas:faas-list", faasData);
		return faas;
	}
	
	@ProxyMethod
	public def approve( faasId ) {
		def faas = open( faasId );
		if( faas.state != FORAPPROVAL_STATE) throw new Exception("FAAS is already $faas.state.");
		
		def faasData = em.read("faas:faas-list", [ objid:faasId ]);
		if( !faasData ) throw new Exception("FAAS not found.");
		
		def newTdNo = tdService.getNextTDNo( faasData ); 
		tdService.checkDuplicateTdNo( newTdNo );
		
		faasData.state = CURRENT_STATE;
		faasData.tdNo  = newTdNo;
		em.update("faas:faas-list", faasData);
		
		def currDate = dateService.getServerDate();
		faas.state = CURRENT_STATE;
		faas.tdNo  = newTdNo;
		faas.info.tdNo = newTdNo;
		faas.info.approvedBy.dtSigned = currDate;
		faas.sys_dtApproved = currDate;
		faas.remarks = null;
		faas.provincialAssessor = var.provincialAssessor.name;
		faas.provincialAssessor = var.provincialAssessor.title
		
		cancelPreviousTds( faas );
		
		em.update( "faas:faas", faas );
		return faas;
	}
	
	@ProxyMethod
	public def disapprove( faasId, remarks )  {
		def faas = open( faasId );
		if( faas.state == CURRENT_STATE ) throw new Exception("FAAS is already $faas.state.");
		
		def currDate = dateService.getServerDate();
		faas.state = DISAPPROVED_STATE;
		faas.remarks = remarks;
		faas.sys_dtCreated = currDate;
		faas.sys_dtApproved = currDate;
		faas.info.reviewedBy  = [name:env.USER, title:env.TITLE, dtSigned:currDate];
		em.create("faas:disapproved-faas", faas);
		em.delete("faas:faas", faas);
		
		def faasInfo = em.read("faas:faas-list", faas );		
		if( !faasInfo) throw new Exception("FAAS not found.");
		em.create("faas:faas-disapproved", faasInfo );
		em.delete("faas:faas-list", faasInfo );
		
		//em.sqlContext.createNamedExecutor("faas:deleteForApproval").setParameters([objid:faasId]).execute();
		return faas;
	}
	
	private def getListByName( namedQuery, criteria, params ) {
		return em.sqlContext.createNamedQuery( namedQuery )
						.setParameters( criteria )
						.setFirstResult( params._start )
						.setMaxResults( params._limit )
						.resultList;
	}
	
	private def getListByVars( namedQuery, vars, values, params ) {
		return em.sqlContext.createNamedQuery(namedQuery).setVars(vars).setParameters(values)
						.setFirstResult( params._start )
						.setMaxResults( params._limit )
						.resultList;
	}
	
	private void cancelPreviousTds( faas ) {
		faas.previousFaasIds.each { item ->
			def prevFaas = em.read("faas:faas", [objid:item.faasId]);
			if( prevFaas ) {
				prevFaas.state = CANCELLED_STATE;
				prevFaas.info.cancelInfo = [cancelReason:faas.info.txnType, cancelDate:faas.sys_dtApproved, cancelledByTdNo:faas.tdNo];
				em.update("faas:faas", prevFaas);
			}
		}
	}
	
	
}
