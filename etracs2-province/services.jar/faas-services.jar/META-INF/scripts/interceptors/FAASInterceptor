import com.rameses.annotations.*;

class FAASInterceptor 
{
	@Service("LogService")
	def logService;
	
	@Service("TransmittalService")
	def transmittalService;
	
	@Service("RemoteFaasService")
	def remoteService;
	
	@Env
	def env;
	
	@After(pattern="FAASService.create") 
	public void interceptCreate( evt ) {
		logService.log("CREATE", "FAAS", evt.result.objid);
	}
	
	@After(pattern="FAASService.submit") 
	public void interceptSubmit( evt ) {
		logService.log("SUBMIT", "FAAS", evt.result.objid);
	}
	
	@After(pattern="FAASService.assignPin") 
	public void interceptAssignPin( evt ) {
		def faas = evt.result;
		def change  = "pin: $faas.rpu.info.oldPin -> $faas.rpu.info.pin";
		logService.logB("ASSIGNPIN", "FAAS", faas.objid,'', change);
	}
	
	@After(pattern="FAASService.exchangePin") 
	public void interceptExchangePin( evt ) {
		def faas = evt.result;
		
		def change  = "pin: $faas.oldPin -> $faas.rpu.info.pin";
		logService.logA("EXCHANGEPIN", "FAAS", faas.objid, change);
		
		change  = "pin: $faas.rpu.info.pin -> $faas.oldPin";
		logService.logA("EXCHANGEPIN", "FAAS", evt.args[1], change);
	}
	
	@After(pattern="FAASService.approve") 
	public void interceptApprove( evt ) {
		def faas = evt.result;
		logService.log("APPROVE", "FAAS", faas.objid);
		approveRemoteFaas( faas );
	}
	
	@After(pattern="FAASService.disapprove") 
	public void interceptDisapprove( evt ) {
		def faas = evt.result;
		logService.logA("DISAPPROVE", "FAAS", faas.objid, faas.remarks);
		disapproveRemoteFaas( faas ) ;
	}
	
	private void approveRemoteFaas( faas ) {
		if( faas.transmittalId != "system" ) return; 
		println "FAASInterceptor: approveRemoteFaas";
		//domain, userName, faasId, txnType, tdNo, pin, issueDate
		remoteService.approve( 
			faas.rp.info.muniDistrictIndex,
			(env.USERNAME == null ? 'SYSTEM' : env.USERNAME),
			faas.objid,
			faas.info.txnType,
			faas.tdNo,
			faas.rp.info.pin,
			faas.info.issueDate
		);		
		logService.log("APPROVEREMOTE", "FAAS", faas.objid);
	}
	
	private void disapproveRemoteFaas( faas ) {
		if( faas.transmittalId != "system" ) return; 
		println "FAASInterceptor: disapproveRemoteFaas";
		remoteService.disapprove( 
			faas.rp.info.muniDistrictIndex,
			(env.USERNAME == null ? 'SYSTEM' : env.USERNAME),
			faas.objid,
			faas.remarks,
			env.USERNAME,
			env.JOBTITLE
		);		
		logService.log("DISAPPROVEREMOTE", "FAAS", faas.objid);
	}
}