import com.rameses.annotations.*;

class FAASInterceptor 
{
	@Service("TDService")
	def tdService;
	
	@Service("LogService")
	def logService;
	
	@Service("TransmittalService")
	def transmittalService;
	
	@Service("TaxpayerService")
	def taxpayerService;
	
	@Service("RemoteFaasService")
	def remoteService;
	
	@After(pattern="FAASService.create.*") 
	public void interceptCreate( evt ) {
		logService.log("CREATE", "FAAS", evt.result.objid);
	}
	
	@After(pattern="FAASService.submit.*") 
	public void interceptSubmit( evt ) {
		logService.log("SUBMIT", "FAAS", evt.result.objid);
		transmittalService.updateItemStateToForApproval(evt.result.transmittalId, evt.result.objid);
	}
	
	@After(pattern="FAASService.approve") 
	public void interceptApprove( evt ) {
		def faas = evt.result;

		tdService.post( evt.result );
		logService.log("GENERATE", "TD", faas.objid);
		logService.log("APPROVE", "FAAS", faas.objid);
		
		transmittalService.updateItemStateToCurrent(faas.transmittalId, faas.objid);
		taxpayerService.postMunicipalTaxpayer( 
			[ objid      : faas.info.taxpayer.taxpayerId,
			  lgu        : faas.rp.info.muniDistrict,
			  taxpayerNo : null,
			  name       : faas.info.taxpayer.taxpayerName,
			  address    : faas.info.taxpayer.taxpayerAddress,
			]  
		);
		
		print "passing interceptApprove";
		
		if( faas.transmittalId == "system" ){
			def params = [
				action 	: "approveFAAS",
				refId	: faas.objid,
				targetLgu	: faas.rp.muniDistrictIndex
			];
			
			remoteService.post( params );
		}
		
		
	}
	
	@After(pattern="FAASService.disapprove.*") 
	public void interceptDisapprove( evt ) {
		logService.logA("DISAPPROVE", "FAAS", evt.result.objid, evt.result.remarks);
		transmittalService.disapproveTransmittalItem(evt.result.transmittalId, evt.result.objid, evt.result.state, evt.result.remarks);
	}
}