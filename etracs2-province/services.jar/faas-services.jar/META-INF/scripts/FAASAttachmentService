import com.rameses.annotations.*;
import com.rameses.io.*;
import java.rmi.server.UID;

class FAASAttachmentService {

	@PersistenceContext("etracs")
	def em;
	
	@Service('Var')
	def var;
	
	@ProxyMethod
	public def createFaasAttachment(@Param(schema="faasattachment:faasAttachment") attachment ) {
		em.create("faasattachment:faasAttachment", attachment);
		def list = em.indexer.getIndexFor("faasattachment:faasAttachment");
		em.indexer.fire( list, attachment );
		return attachment;
	}
	
	@ProxyMethod
	public void uploadAttachment( fileName, data ) {
		def fis = new FileOutputStream( findFile( fileName ).absolutePath, true );
		fis.write( data );
		fis.close();
	}
	
	@ProxyMethod
	public def downloadAttachment( objid ) {
		def file = findFile( objid );
		if ( !file ) throw new Exception("File not found.");
		
		def ftis = new FileTransferInputStream( file );
		ftis.byteSize = 1024 * 32;
		def data = [
			bytes : ftis.readNext(),
			eof : ftis.fileTransferInfo.eof
		];
		ftis.fileTransferInfo.save();
		
		if (ftis.fileTransferInfo.eof)
			ftis.fileTransferInfo.delete();
			
		ftis.close();
		return data;
	}
	
	@ProxyMethod
	public def downloadAttachment2( fileName, info ) {
		try {
		def file = findFile( fileName );
		if ( !file ) throw new Exception("File not found.");
		
		def ftis = new FileTransferInputStream( file );
		/*def ftis = new FileTransferInputStream( file, info );
		if (!info){
			println "======================================";
			ftis.fileTransferInfo.tempFileName = replaceSpecialChar( "TMP" +  new UID() );
		}*/

		ftis.byteSize = 1024 * 32;
		def data = [
			bytes : ftis.readNext()
		];

		ftis.fileTransferInfo.save();
		data.info = ftis.fileTransferInfo;
		
		if (ftis.fileTransferInfo.eof)
			ftis.fileTransferInfo.delete();
			
		ftis.close();
		return data;	
		} catch ( ex ) { ex.printStackTrace(); throw ex; }
	}
	
	private def findFile( fileName ) {
		try {
		def fileDir = new File( var.faas_attachments_temp_dir );
		if ( !fileDir.exists() )
			fileDir.mkdirs();
		fileDir.eachFileMatch( fileName ) { f ->
			return f;
		}
		def file = new File( var.faas_attachments_temp_dir + File.separator + fileName );
		file.createNewFile();
		return file;
		} catch ( ex ) { ex.printStackTrace(); throw ex; }
	}
	
	@ProxyMethod
	public def getAttachments( refId ) {
		def params = [ refId : refId ];
		return em.sqlContext.createNamedQuery( "faasattachment:findAttachmentByRefId" ).setParameters( params ).resultList;
	}
	
	private def replaceSpecialChar( tmpFileName ) {
		tmpFileName = tmpFileName.replace(":", "_");
		return tmpFileName;
	}

}
