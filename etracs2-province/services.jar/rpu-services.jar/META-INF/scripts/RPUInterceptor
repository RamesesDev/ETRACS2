import com.rameses.annotations.*;
import java.rmi.server.UID;

public class RPUInterceptor
{
	@PersistenceContext("main")
	def em;
	
	@After(pattern="FAASService.approve")
	public void interceptFaasApprove( evt ) {
		def faas = evt.result;
		def data = [
			objid         : 'R' + new UID(),
			schemaname    : 'rpu:rpu',
			schemaversion : '1.0',
			faasid        : faas.objid,
			prevfaasid    : getPreviousFaasId( faas ),
			pin           : faas.rpu.info.pin,
			tdno          : faas.tdNo
		]
		
		def rpu = getRpuByPin( data.pin ) 
		if( rpu )  {
			rpu.tdno       = data.tdno;
			rpu.prevfaasid = data.prevfaasid;
			em.update("rpuhistory:rpu", rpu);
		}
		else {
			em.validate("rpuhistory:rpu", data);
			em.create("rpuhistory:rpu", data);
		}
		em.create("rpuhistory:history", data)
	}
	
	private def getRpuByPin( pin ) {
		def rpuInfo = em.sqlContext.createNamedQuery("rpu:findByPin").setParameter("pin", pin ).singleResult;
		if( rpuInfo ) {
			return em.serializer.read( rpuInfo );
		}	
		return null;
	}
	
	private def getPreviousFaasId( faas ) {
		if( faas.previousFaasIds && faas.previousFaasIds.size() > 0 ) {
			return faas.previousFaasIds[0].faasId;
		}
		return null;
	}
}
