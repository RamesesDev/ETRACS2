import com.rameses.annotations.*;
import com.rameses.util.*;

/**
* The profile should include the user groups and permissions.
*/
public class LoginProfileService {

    @PersistenceContext("java:main")
    def em;

	@Service("PermissionService")
	def permissionSvc;
	
	@Service("DateService")
	def dateSvc;
	
	@Env
	def ENV;

	@Service("Var")
	def VARS;

	private void loadRootProfile(req) {
		req.out.permissions += [".*admin.*"];
		req.out.env.USERLEVEL = 0;
	}
	
	private void loadUserGroupProfile(req) {
		def _env = req.out.env;
		def p = [userid:_env.USERID, groupcode:ENV.CLIENTCODE];
		List groupList = em.sqlContext.createNamedQuery( "user:rolegroup" ).setParameters( p ).resultList;
		if(!groupList)
			throw new Exception("User must have at least one role group ");
			
		List roles = [];
		List excluded = [];
		String terminal = ENV.TERMINALID;
		for( o in groupList ) {
			//only include permissions if the group code matches the client code.
			if( (o.scope=='global' && o.maingroupid == null && o.groupcode ==_env.ORG.code) || o.groupcode == ENV.CLIENTCODE ) {
				//check allowed and disallowed terminals 
				if(o.allowedterminals && o.allowedterminals.trim().size()>0 && terminal) {
					if(!o.allowedterminals.split(",").toList().contains(terminal)) {
						throw new Exception("User not allowed to access this terminal"); 
					}	
				}
				if(o.disallowedterminals && o.disallowedterminals.trim().size()>0 && terminal) {
					if(o.disallowedterminals.split(",").toList().contains(terminal)) {
						throw new Exception("User not allowed to access this terminal");
					}		
				}
				
				//check schedule if there is a schedule set. Run through each schedule, if there is at least
				//one schedule that passes, then this is already good enough.
				if( o.schedule!=null && o.schedule.trim().length() > 0 ) {
					Date d = _env.LOCALE_TIME;
					boolean pass = false;
					for( sked in o.schedule.split(";")) {
						if(TimeUtil.checkSchedule( d, sked.trim() )) {
							pass = true;
							break;	
						}	
					}
					if(!pass)throw new Exception( "User not allowed to access within this schedule" );
				}
				roles += o.role
				if( o.excludepermissions ) excluded += em.serializer.read( o.excludepermissions );
			}	
		}
		def perms = permissionSvc.getAllowedPermissionsByRole( roles, excluded ); 	
		req.out.permissions += perms;	
		
		//this is special for users whose logintype is user. load the userlevel.
		if( _env.USERTYPE == "user" ) {
			def ulevel = em.sqlContext.createNamedQuery("user:userlevel").setParameters(p).singleResult; 
			_env.USERLEVEL = ulevel.userlevel;
		}
	}
	
	//if there is a terminal key provided, search terminal and load the client information
	//ORG refers to the organization where the user belongs. This info is found in the user object.
	private void loadLocale(req) {
		def timeZone;
		def country;
		def client;

		if(ENV.TERMINALID) {
			def param = [ terminal:ENV.TERMINALID, clientcode: ENV.CLIENTCODE ];
			def terminal = em.sqlContext.createNamedQuery("terminal:find-clientid").setParameters( param ).singleResult;
			if(!terminal)
				throw new Exception("Terminal is invalid");
			def clientInfo = em.read( terminal.parenttype, [objid: terminal.parentid] );	
			if(!clientInfo) 
				throw new Exception( terminal.parenttype + " " + terminal.parentid + " does not exist!");
			
			client = [code:clientInfo.code, name:clientInfo.name, type: terminal.parenttype, id:clientInfo.objid];
			timeZone = clientInfo.timezone;
			country = clientInfo.country;
		}
		else {
			timeZone = VARS.server_timezone;
			country = VARS.server_country;
		}
		def _env = req.out.env;
		_env.LOCALE_TIME = java.sql.Timestamp.valueOf( dateSvc.getLocaleTime(timeZone) );
		_env.TIMEZONE = timeZone;
		_env.COUNTRY = country;
		if(client) _env.CLIENT = client;
	}
	
	//load the org of the user
	private void loadOrg(req) {
		String userType = req.out.env.USERTYPE;
		String userid = req.out.env.USERID;
		def org;
		if( userType == 'root' ) {
			org =  [code:'ROOT', name:'ROOT', type:'root', id: 'root' ];
		}	
		else {
			def _u = em.read( userType, [ objid:userid ] );
			if(!_u) throw new Exception( "User for type " + req.out.env.USERTYPE +  " does not exist" );
			org =  [code:_u.parentcode, name:_u.parentcode, type:_u.parenttype, id: _u.parentid ];
		}
		req.out.env.ORG = org;
	}
	
	@ProxyMethod(local=true)
	public def loadProfile( def req ) {
		//load the locale info like timezone. This is based on the terminal accessed
		loadLocale(req);

		//load the org
		loadOrg(req);
		
		//set basic permissions for all users.
		req.out.permissions = ["system.*"];
		if( "root".equalsIgnoreCase(req.out.env.USER) ) {
			loadRootProfile( req );
		}
		else {
			loadUserGroupProfile(req);
		}
		return req;
	}

}