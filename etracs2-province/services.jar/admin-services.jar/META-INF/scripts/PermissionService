import com.rameses.annotations.*;
import com.rameses.util.*;

class PermissionService {

    @PersistenceContext("java:main")
    def em; 		

	@ProxyMethod
    public def getAllPermissions() {
		return [];
    }	

	//retrieves permission sets and retrieves all permissions
	private List getAllPermissionsByPermissionSetName( String name ) {
		def qry = em.sqlContext.createNamedQuery("permission:by-permissionset");
        List items = qry.setParameter('permissionset', name).resultList;
		List list = [];
		for( o in items ) {
			List perms = em.serializer.read( o.permissions );	
			list.addAll(  perms.collect { [ action:o.module +":"+it.action, title: it.title] } );   
		}
		return list;
	}
	
	//retrieves all permission sets per each role
	private List getRolePermissionSetNames( String roleName ) {
		def o = em.read( "role", [name:roleName] );
		if(o) 
			return o.permissionsets;
		else	
			return [];
	}

	@ProxyMethod
    public Map getPermissionSetByRole( String role ) {
		def permSets = getRolePermissionSetNames(role);
		def map = [:];
		for( p in permSets ) {
            map.put( p, getAllPermissionsByPermissionSetName(p) );
		}
		return map;
    }	
	
    @ProxyMethod
    public List getUserAllowedPermissions( def u ) {
        def usr = em.read( "user", u );
		def roles = em.sqlContext.createNamedQuery("user:role-permission").setParameter( "objid", usr.objid ).resultList;
		List excludeList = [];
		List roleExcludeList = [];
		List permsets = [];
		for( ur in roles ) {
			if(ur.role_excludedpermissions) roleExcludeList += em.serializer.read( ur.role_excludedpermissions );
			if(ur.excludepermissions) excludeList += em.serializer.read( ur.excludepermissions );  	
			if(ur.permissionsets) permsets += em.serializer.read( ur.permissionsets );
		}
		//get the permissions per permission set
		List perms = [];
		for( permsetName  in permsets.unique() ) {
			perms += getAllPermissionsByPermissionSetName(permsetName)*.action
		}
		return perms.unique() - roleExcludeList.unique() - excludeList.unique();
    }
		
	
    @ProxyMethod
    public List getAllowedPermissionsByRole( List roles, List excludeList ) {
		List roleExcludeList = [];
		List permsets = [];
		for( r in roles ) {
			def rol = em.read( "role", [name:r] );	
			roleExcludeList += rol.excludepermissions;
			permsets += rol.permissionsets;	
		}
	
		//get the permissions per permission set
		List perms = [];
		for( permsetName  in permsets.unique() ) {
			perms += getAllPermissionsByPermissionSetName(permsetName)*.action
		}
		return perms.unique() - roleExcludeList.unique() - excludeList.unique();
    }
     
     
	

}