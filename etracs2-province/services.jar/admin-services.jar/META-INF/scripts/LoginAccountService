import com.rameses.annotations.*;
import com.rameses.util.*;

public class LoginAccountService {

    @PersistenceContext("java:main")
    def em;

	@Service("Var")
	def VARS;

	@Service("DateService")
	def dtSvc;

	@Env
	def env;

    @ProxyMethod(local=true)
    public def createAccount() {
		def o = em.createModel( "loginaccount" );
		o.info = [oldpwds:[]];
		return o;
	}

    @ProxyMethod(local=true)
    public def create( def acct ) {
		if(!acct.pwd) {
			if( !VARS.system_pwd ) throw new Exception("Please specify a global system_pwd");
			acct.pwd = Encoder.md5.encode( VARS.system_pwd, acct.uid );
		}
		Date today = dtSvc.serverDate;
		acct.dtlastpwdchange =  today;
		acct.lastpwdlogincount = 0;
		acct.retrycount = 0;
		if(!acct.info) acct.info = [oldpwds:[]];
		em.validate( "loginaccount", acct );
		acct = em.create( "loginaccount", acct );

		//update also the users loginid
		em.sqlContext.createNamedExecutor("user:update-loginid").setParameters( [loginid:acct.uid, userid: acct.userid] ).execute();
		return acct;
    }


    @ProxyMethod(local=true)
    public def getAccount( acct ) {
		return em.read( "loginaccount", acct );
    }

    @ProxyMethod(local=true)
    public def update( @Param(schema="loginaccount") acct ) {
		//remove passwords so it will not overwrite
		def m = [:];
		m.uid = acct.uid;
        m.active = acct.active;
        m.checkterminal = acct.checkterminal;
        m.displayname = acct.displayname;
        m.email = acct.email;
		m.changepwdonlogin = acct.changepwdonlogin;
		return em.update( "loginaccount", m );
    }

    public def updatePwd( def param ) {
		assert param.uid;
		assert param.pwd;

		def o = em.read( "loginaccount", param );

		//if old pwd is provided in param we need to check it first.
		if( param.oldpwd && o.pwd != param.oldpwd )
			throw new Exception("Password reset failed. Current password is incorrect");

		if(o.pwd==param.pwd)
			throw new Exception("Password reset failed. Password same as existing password");

		//check if pwd exists in old pwds;
		if( o.info.oldpwds.indexOf( param.pwd )>=0)
			throw new Exception("Password reset failed. Password has recently been used");

		//if old passwords exceed the cycle, remove the least recent.
		int sz = VARS.getProperty("pwd_change_cycle", "3").toInteger();
		if( o.pwd ) {
			def list = [o.pwd] + o.info.oldpwds;
			if(list.size() > sz) {
				list = list[0..sz-1].toList();
			}
			o.info.oldpwds = list;
		}

		Date today = dtSvc.serverDate;
		param.dtlastpwdchange = today;
		param.lastpwdlogincount = 0;
		param.info = o.info;
		o.putAll( param );
		em.update( "loginaccount", o );
		return param;
	}

    @ProxyMethod(local=true)
    public def resetPwd( def param ) {
		if(!param.pwd)
			throw new Exception("Please provide a password");
		return updatePwd( param );
    }


	// This method is for users changing their password. we also need to ensure that changepwd on login is reset
    @ProxyMethod(local=true)
    public def changeOwnPwd( def param ) {
		param.uid = env.USER;
		param.changepwdonlogin = false;
		return updatePwd( param );
    }

	@ProxyMethod
	public void reactivate( param ) {
		em.sqlContext.createNamedExecutor('user:reactivate').setParameters(param).execute();
	}


}
