import com.rameses.annotations.*;

class TransmittalService
{
	@PersistenceContext("etracs")
	def em;
	
	@Service("FAASService")
	def faasService;
	
	@Service("FAASHtmlService")
	def faasHtmlService;
	
	@Env
	def env;
	
	def CURRENT_STATE = "CURRENT";
	def FORAPPROVAL_STATE = "FORAPPROVAL";
	def INCOMPLETE_STATE = "INCOMPLETE_REQUIREMENTS";
	
	@ProxyMethod
	public def incompleteTransmittal( transmittalId, transmittalItemId, remarks) {
		incompleteTransmittalItem( transmittalId, transmittalItemId, INCOMPLETE_STATE, remarks);
	}
	
	@ProxyMethod
	public def getList( search, params ) {
		def state = search.state;
		def textSearch = search.textSearch;
		
		if( ! textSearch ) return getListByName("transmittal:findByState", search )
		
		def result = null;
		if ((result = getListByName("transmittal:findByDocno", [state:state, docno:textSearch]))) return result;
		if ((result = getListByName("transmittal:findByLgu", [state:state, lgu:textSearch]))) return result;
		return result;
	}
	
	@ProxyMethod
	public def getItemList( transmittalId) {
		return em.sqlContext.createNamedQuery("transmittal:getTransmittalItemList").setParameters( [transmittalid:transmittalId] ).resultList;
	}
	
	@ProxyMethod
	public def create( @Param(schema="transmittal:transmittal") transmittal ) {
		if( transmittalExists( transmittal.objid ) )  throw new Exception("Transmittal has already been imported.");
		em.create("transmittal:transmittal", transmittal);
		transmittal.items.each {
			em.create("transmittal:transmittalItem", it );
		}
		return transmittal;
	}
	
	@ProxyMethod
	public void deleteTransmittal( transmittalId )  {
		checkSubmittedState( transmittalId );
		em.sqlContext.createNamedExecutor("transmittal:deleteItemList").setParameters([transmittalid:transmittalId]).execute();
		em.sqlContext.createNamedExecutor("transmittal:delete").setParameters([objid:transmittalId]).execute();
	}
	
	@ProxyMethod
	public def open( transmittalId ) {
		if( ! transmittalExists( transmittalId) ) throw new Exception("Transmittal not found.");
		def txn = em.read("transmittal:transmittal", [objid:transmittalId]);
		txn.items = getTransmittalItemList( transmittalId );
		return txn;
	}
	
	@ProxyMethod
	public def submit( transmittalId ) {
		checkSubmittedState( transmittalId );
		em.sqlContext.createNamedExecutor("transmittal:updateStateToReceived").setParameters([objid:transmittalId]).execute();
		def items = getTransmittalItemList( transmittalId );
		items.each {
			def faas = em.serializer.read(it.faas);
			faasService.create( faas );
		}
		return open( transmittalId );
	}
	
	@ProxyMethod
	public def getTransmittalItemList( transmittalId ) {
		return em.sqlContext.createNamedQuery("transmittal:getTransmittalItemList")
					.setParameters( [transmittalid:transmittalId] )
					.resultList;
	}
	
	@ProxyMethod 
	public def getItemHtml( itemId ) {
		def item = getTransmittalItem( itemId );
		def faas = em.serializer.read(item.faas);
		return faasHtmlService.buildHtml( faas );
	}
	
	@ProxyMethod
	public void updateItemStateToForApproval(transmittalId, faasId) {
		updateItemState( transmittalId, faasId, FORAPPROVAL_STATE);
		changeTransmittalToReviewed( transmittalId );
	}
	
	@ProxyMethod
	public void updateItemStateToCurrent(transmittalId, faasId) {
		updateItemState( transmittalId, faasId, CURRENT_STATE);
		changeTransmittalToClosed( transmittalId );
	}
	
	@ProxyMethod
	public void disapproveTransmittalItem( transmittalId, faasId, state, remarks) {
		em.sqlContext.createNamedExecutor("transmittal:disapproveItem")
					 .setParameters([transmittalid:transmittalId, faasid:faasId, newstate:state, remarks:remarks])
					 .execute();		
		changeTransmittalToClosed( transmittalId );
	}
	
	@ProxyMethod
	public void incompleteTransmittalItem( transmittalId, transmittalItemId, state, remarks) {
		em.sqlContext.createNamedExecutor("transmittal:incompleteItem")
					 .setParameters([transmittalid:transmittalId, objid:transmittalItemId, newstate:state, remarks:remarks])
					 .execute();		
		changeTransmittalToClosed( transmittalId );
	}
	
	private def getTransmittalItem( objid ) {
		return em.sqlContext.createNamedQuery("transmittal:getTransmittalItem")
					.setParameters( [objid:objid] )
					.singleResult;
	}
	
	/* Transmittal is "reviewed" if there are no items with PROVAPPROVAL state*/
	private void changeTransmittalToReviewed( transmittalId ) {
		def data = em.sqlContext.createNamedQuery("transmittal:countofUnreviewedItems")
							    .setParameters([transmittalid:transmittalId])
								.singleResult;
		if( data.count == 0 ) {
			em.sqlContext.createNamedExecutor("transmittal:updateStateToReviewed").setParameters([objid:transmittalId]).execute();
		}
	}
	
	/* Transmittal is "closed" if there are no items with either CURRENT or DISAPPROVED STATE*/
	private void changeTransmittalToClosed( transmittalId ) {
		def data = em.sqlContext.createNamedQuery("transmittal:countofUnrapprovedItems")
							    .setParameters([transmittalid:transmittalId])
								.singleResult;
		if( data.count == 0 ) {
			em.sqlContext.createNamedExecutor("transmittal:updateStateToClosed").setParameters([objid:transmittalId]).execute();
		}
	}
	
	private void checkSubmittedState( transmittalId )  {
		def data = em.sqlContext.createNamedQuery("transmittal:getState").setParameters([objid:transmittalId]).singleResult;
		if( !data ) {
			throw new Exception("Transmittal not found.");
		}
		if( data.state != "SUBMITTED" ) {
			throw new Exception("Transmittal has already been $data.state.");
		}
	}
	
	private def transmittalExists( transmittalId ) {
		def data = em.sqlContext.createNamedQuery("transmittal:getState").setParameters([objid:transmittalId]).singleResult;
		if( data ) {
			return true;
		}
		return false;
	}
	
	private void updateItemState( transmittalId, faasId, state) {
		em.sqlContext.createNamedExecutor("transmittal:updateItemState")
					 .setParameters([transmittalid:transmittalId, faasid:faasId, newstate:state])
					 .execute();		
	}
	
	private def getListByName( namedQuery, params ) {
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters( params ).resultList;
	}
	
}
