import com.rameses.annotations.*;
import com.rameses.util.*;

public class LoginSessionService {

    @PersistenceContext("java:main")
    def em;

	@Service("DateService")
	def dateSvc;
	
	@Service("Var")
    def vars;
	
	@Env
	def env;
	
	@ProxyMethod
	public def createSession( def req ) {
		def out = req.out.env;
		def loginDate = dateSvc.serverDate;
	
		//we need to check first if session already exists for this user.
		def c = em.sqlContext.createNamedQuery("session:active").setParameter(1, out.USER).resultList;
		if(c.size()>0) {
			//remove the first session 
			def s = em.read( "session:active", [sessionid: c[0].sessionid] );
			s.status = "superseded by " + out.USER;
			s.timeout = loginDate;
			em.delete( "session:active", s );
			em.create( "session:history", s );
		}
		out.SESSIONID = "SESS:" + new java.rmi.server.UID();
		out.TIMEOUT = new Date();	
		def data = [
			sessionid: out.SESSIONID,
			timein: loginDate,
			uid: out.USER,
			expirydate: DateUtil.add(  loginDate, vars.getProperty("session_timeout_interval", "1h") )
		];
		em.create( "session:active", data );
		return req;
	}
	
	@ProxyMethod
	public void removeSession( def req ) {
		def data = [sessionid: env.SESSIONID ];
		def o = em.read("session:active", data );
		if(!o) {
			println "warning session does not exist!";
		}
		o.timeout = dateSvc.serverDate;
		em.create("session:history", o );
		em.delete("session:active", o );
	}
}