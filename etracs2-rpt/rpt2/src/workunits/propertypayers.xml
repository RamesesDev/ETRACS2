<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    
    <invoker folderid="/menu/rpt/txn" action="init" caption="Property Payers" index="11" />
        
        <invoker type="formActions" action="create" shortcut="ctrl N" visibleWhen="#{mode == 'view'}" immediate="true" caption="New" mnemonic="n" icon="images/doc-new.png" />
        <invoker type="formActions" action="edit" shortcut="ctrl E" visibleWhen="#{mode == 'view' and entity.objid != null }" immediate="true" caption="Edit" mnemonic="e" icon="images/edit.png" />
        <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view'}" caption="Save" mnemonic="s" icon="images/save.png"/>
        <invoker type="formActions" action="cancel" visibleWhen="#{mode != 'view'}"  immediate="true" caption="Cancel" mnemonic="c" icon="images/cancel.png"/>
        <invoker type="formActions" action="delete" shortcut="ctrl D" visibleWhen="#{mode == 'view' and entity.objid != null}" immediate="true" caption="Delete" mnemonic="d" icon="images/doc-delete.png" />
    
    <code lang="groovy">
        <![CDATA[
        
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import java.rmi.server.UID;
        
        public class PropertyPayersController  extends etracs2.groovy.CRUDController  {
            @Service("PropertyPayerService")
            def svc;

            def getService() { return svc; }
            def getCreateFocusComponent() { return "entity.taxpayername"; }
            def getEditFocusComponent() { return "entity.taxpayername"; }
            def getListHandler() { return listHandler; }
            
            
            def createEntity() {
                return [
                    info : []
                ];
            }
            
            def lookupEntity() {
                return InvokerUtil.lookupOpener("entity.lookup", [searchText:entity.taxpayername, onselect:selectedEntityHandler]);
            }
            
            def selectedEntityHandler = { item ->
                entity.taxpayerid       = item.objid;
                entity.taxpayername     = item.entityname;
                entity.taxpayeraddress  = item.entityaddress;
                
                binding.refresh('entity.*');
            }
            
            def listHandler = [
                getRows    : { return 20; },
                getColumns : {
                    return [
                        new Column(name:"taxpayername", caption:"Taxpayer Name"),
                        new Column(name:"taxpayeraddress", caption:"Address")
                    ];
                },
                fetchList : { 
                    return list; 
                },
            ] as SubListModel;
            
            def selectedOwner;
            
            def lookupLedger = InvokerUtil.lookupOpener("rptledger.lookup",[:]);
            
            def ownersListHandler = [
                getRows    : { return 20; },
                getColumns : {
                    return [
                        new Column(name:"ledger", caption:"TD No.", editable:true, type:"lookup", handler:lookupLedger, expression: '#{tdno}'),
                        new Column(name:"taxpayername", caption:"Declared Owner", maxWidth:150, editable:false),
                        new Column(name:"taxpayeraddress", caption:"Address", maxWidth:150, editable:false),
                        new Column(name:"classification", caption:"Class", editable:false),
                        new Column(name:"fullpin", caption:"PIN", editable:false),
                        new Column(name:"cadastrallotno", caption:"Cadastral Lot No.", editable:false),
                        new Column(name:"assessedvalue", caption:"Assessed Value", maxWidth:120, editable:false),
                    ];
                },
                fetchList : { return entity.info; },
                createItem : { return [:]; },
                validate       : { li -> validateInfo( li.item ) },
                onAddItem : { item ->
                    updateInfo( item );
                    def ledger = [tdno:item.ledger.tdno];
                    item.remove('ledger');
                    item.ledger = ledger;
                    entity.info.add( item );
                },
                onColumnUpdate : { item, colName ->
                    if( colName == 'ledger' ) updateInfo( item );
                },
                onRemoveItem : { item -> 
                    if( mode == "view" ) return false;
                    if( MsgBox.confirm("Remove selected item?") ) {
                        entity.info.remove( item );
                    }
                },
            ] as SubListModel;
            
            void updateInfo( item ) {
                item.ledgerid = item.ledger.objid;
                getLedgerData( item );
            }
            
            void getLedgerData( item ) {
                def data = svc.openLedger( item.ledgerid );
                if( data ){
                    item.taxpayername       = data.taxpayername;
                    item.taxpayeraddress    = data.taxpayeraddress;
                    item.classification     = data.classcode;
                    item.fullpin            = data.fullpin;
                    item.cadastrallotno     = data.cadastrallotno;
                    item.assessedvalue      = data.assessedvalue;
                }
            }
            
            void validateInfo( item ){
                required( 'TD No.', item.ledger );
                checkDuplicate( item );
                binding.refresh();
            }
            
            void checkDuplicate( item ){
                def ledger = entity.info.find{ it.ledgerid == item.ledgerid };
                if( ledger ){ 
                    MsgBox.alert('Duplicate item is not allowed!');
                    throw new Exception('Duplicate item is not allowed!');
                }
            }
            
            void required( caption, value ) {
                if( !value ){ 
                    MsgBox.alert(caption + ' is required.');
                    throw new Exception( caption + ' is required.');
                }
            }
            
        }
        
        
        ]]>
    </code>
    
    <pages>
        <page template="etracs2.rpt.txn.propertypayers.PropertyPayersPage" />
    </pages>
</workunit>
