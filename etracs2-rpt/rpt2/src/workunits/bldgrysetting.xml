<?xml version="1.0" encoding="UTF-8"?>
<!--
// author    : jzamora
// copyright : Rameses Systems Inc
-->
<workunit>
    <invokers>
        <invoker type="bldgrysetting.create" action="create" caption="Create Building" mnemonic="b" icon="images/addnew24.png" target="window"/>
        <invoker type="bldgrysetting.open" action="open" caption="Edit Building" mnemonic="b" icon="images/addnew24.png" target="window"/>
        
        <invoker type="formActions" action="_close" caption="Close" />
        <invoker type="formActions" action="save" shortcut="ctrl S" caption="Save" mnemonic="s" icon="images/save24.png"/>
        <invoker type="formActions" action="remove" shortcut="ctrl D" immediate="true" caption="Delete" mnemonic="d" icon="images/delete24.png" />
    </invokers>
    <code lang="groovy">

<![CDATA[

import com.rameses.rcp.annotations.*
import com.rameses.rcp.common.*
import com.rameses.osiris2.client.*
import java.rmi.server.UID

public class BldgRYSettingController 
{
    @Binding 
    def binding
    
    @Service('BldgRYSettingService')
    def svc
    
    def entity
    def copyYear
    def settingType
    def mode
    def errorMsg 
   
    
    /*---------------------------------------------------------------------
    * FormAction Support
    ---------------------------------------------------------------------*/
    def create() {
        mode = 'create' 
        entity = createEntity()
        if( svc.settingExists() ) {
            settingType = 'copySetting'
            return 'copy'
        }
        else {
            settingType = 'newSetting'
            return 'new' 
        }
    }
    
    void open() {
        mode = 'view' 
        entity = svc.open( entity.objid )
        assessLevels = entity.assessLevels 
        additionalItems = entity.additionalItems
        selectedAssessLevel = ( assessLevels ? assessLevels[0] : null )
        bldgTypes  = entity.bldgTypes
        
        if( bldgTypes ) {
            selectedBldgType = bldgTypes[0]
            setBaseValueType( selectedBldgType.basevaluetype )
        }
        
        entity.remove('assessLevels')
        entity.remove('additionalItems')
        entity.remove('bldgTypes')
        
    }
    
    def createSetting() {
        if( settingType == 'newSetting' ) {
            entity = svc.create( entity )
        }
        else {
            entity = svc.copySetting( ry )
        }
        return 'default'
    }
    
    void save() {
        entity = svc.update( entity )
    }
    
    def remove() {
        if( MsgBox.confirm('Delete setting?') ) {
            svc.remove( entity.objid )
            return '_close'
        }
        return 'default'
    }
    
    

    /*---------------------------------------------------------------------
    *
    * AssessLevel Support
    *
    ---------------------------------------------------------------------*/
    def selectedAssessLevel
    def selectedRangeLevel
    def assessLevelMsg 
    def assessLevels = [] 
    
    def assessLevelListHandler = [
        createItem : { return createAssessLevel() },
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'code', caption:'Code*', maxWidth:60, editable:true ),
            new Column(name:'name', caption:'Name*', editable:true ),
            new Column(name:'fixrate', caption:'Fix?*', type:'boolean', maxWidth:40, editable:true ),
            new Column(name:'rate', caption:'Rate*', type:'decimal', editable:true ),
        ]},
        validate       : { li -> doValidateAssessLevel( li.item ) },
        onRemoveItem   : { item -> removeAssessLevel( item ) },
        onAddItem      : { item -> assessLevels.add( item ) },
        onColumnUpdate : { item, colName -> 
            if( colName == 'fixrate' && item.fixrate == true ) {
                selectedAssessLevel?.ranges?.clear()
                rangeLevelListHandler.load()
            }
        },
        fetchList      : { return assessLevels },
    ] as SubListModel
    
    
    def rangeLevelListHandler = [
        createItem : { return createRangeAssessLevel() },
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'mvfrom', caption:'Market Value From', type:'decimal'),
            new Column(name:'mvto', caption:'Market Value To', type:'decimal', editable:true, editableWhen:'#{root.allowRangeColumnEdit[item]}' ),
            new Column(name:'rate', caption:'Rate*', type:'decimal', editable:true, editableWhen:'#{root.allowRangeColumnEdit[item]}' ),
        ]},
        validate     : { li -> doValidateAssessLevelRange( li.item ) },
        onAddItem    : { item -> 
            selectedAssessLevel.ranges.add( item ) 
            svc.saveAssessLevel( selectedAssessLevel )
        },
        onRemoveItem   : { item -> doRemoveRangeItem( item ) },
        fetchList    : { return selectedAssessLevel.ranges  },
    ] as SubListModel
    
    def allowRangeColumnEdit = { item ->
        if( ! selectedAssessLevel ) return false
        if( selectedAssessLevel.fixrate == true ) return false
        if( isFirstItem( selectedAssessLevel.ranges ) ) return true
        if( isNewEntry( item.mvfrom ) ) return true
        return isLastItem( selectedAssessLevel.ranges, item )
    } as Map
    
    void doValidateAssessLevel( al ) {
        try {
            errorMsg = null 
            required(al.code, 'Code')
            required(al.name, 'Name')
            validateRate( al.rate )
            checkDuplicateAssessLevel( al )
            svc.saveAssessLevel( al ) 
            binding.refresh('errorMsg') 
        }
        catch( e ) {
            println e.message
            errorMsg = e.message
            binding.refresh('errorMsg') 
            throw e 
        }
    }
    
    void checkDuplicateAssessLevel( al ) {
        def item = assessLevels.find{ it.objid != al.objid && it.code == al.code  }
        if( item ) throw new Exception('Duplicate code is not allowed.')    
        item = assessLevels.find{ it.objid != al.objid && it.name == al.name  }
        if( item ) throw new Exception('Duplicate name is not allowed.')    
    }
    
    void removeAssessLevel( item ) {
        if( MsgBox.confirm('Remove item?' ) ) {
            svc.removeAssessLevel( selectedAssessLevel )
            assessLevels.remove( item )
        }
    }
    
    void doRemoveRangeItem( item ) {
        if( isLastItem( selectedAssessLevel.ranges, item ) ) {
            selectedAssessLevel.ranges.remove( item )
            svc.saveAssessLevel( selectedAssessLevel )
        }
    }
    
    void doValidateAssessLevelRange( range ) {
        def lastRange = null 
        if( selectedAssessLevel.ranges ) {
            lastRange = selectedAssessLevel.ranges.get( selectedAssessLevel.ranges.size() - 1 )
        }
        if( ! range.mvfrom ) {
            range.mvfrom = (lastRange ? lastRange.mvto : 0.0)
        }
        
        try {
            errorMsg = null
            if( range.mvto < range.mvfrom && range.mvto != 0  ) throw new Exception('MV To must be greater than MV From')
            validateRate( range.rate )
            svc.saveAssessLevel( selectedAssessLevel )
            binding.refresh('errorMsg') 
        }
        catch( e ) {
            println e.message 
            errorMsg = e.message 
            binding.refresh('errorMsg') 
            throw e 
        }
    }
    
    
        
    /*---------------------------------------------------------------------
    *
    * BldgAdditionalItem Support
    *
    ---------------------------------------------------------------------*/
    def additionalItems = []
    def selectedAdditionalItem
    
    
    def additionalItemListHandler = [
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'code', caption:'Code', maxWidth:60),
            new Column(name:'name', caption:'Name'),
            new Column(name:'unit', caption:'Unit', maxWidth:100 ),
            new Column(name:'expr', caption:'Expression'),
        ]},
        onRemoveItem   : { item -> doRemoveAdditionalItem( item ) },
        fetchList      : { return additionalItems },
    ] as SubListModel 
    
    
    
    def addAdditionalItemHandler = { item -> 
        item.bldgrysettingid = entity.objid
        svc.saveAdditionalItem( item ) 
        additionalItems.add( item )
        additionalItemListHandler.load()
    }
    
    def updateAdditionalItemHandler = { item -> 
        svc.saveAdditionalItem( item ) 
        additionalItems.set( additionalItems.indexOf( selectedAdditionalItem), item )
        binding.refresh('selectedAdditionalItem')
    }
    
    def createAdditionalItem() {
        return InvokerUtil.lookupOpener('bldgadditionalitem.create', [addHandler:addAdditionalItemHandler] )
    }
    
    def openAdditionalItem() {
        return InvokerUtil.lookupOpener('bldgadditionalitem.open', [entity:selectedAdditionalItem, updateHandler:updateAdditionalItemHandler] )
    }
    
    void removeAdditionalItem() {
        if( selectedAdditionalItem ) {
            doRemoveAdditionalItem( selectedAdditionalItem )
        }
    }
    
    
    void doRemoveAdditionalItem( item ) {
        if( MsgBox.confirm('Remove item?') ) {
            svc.removeAdditionalItem( selectedAdditionalItem )
            additionalItems.remove( item )
        }
    }
    
    
    
    
    
    /*---------------------------------------------------------------------
    *
    * BldgType Support
    *
    ---------------------------------------------------------------------*/
    def bldgTypes = [] 
    def selectedBldgType = [multistoreyadjustments:[], depreciations:[]]
    
    void setSelectedBldgType( selectedBldgType ) {
        this.selectedBldgType = selectedBldgType
        baseValueType = selectedBldgType?.basevaluetype
        initBaseValueHandler()
        binding.refresh('baseValueType') 
    }
    
    def bldgTypeListHandler = [
        createItem : { return createBldgType() },
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'code', caption:'Code*', maxWidth:60, editable:true ),
            new Column(name:'name', caption:'Building Type*', editable:true ),
        ]},
        validate       : { li -> validateBldgType( li.item ) },
        onRemoveItem   : { item -> removeBldgType( item ) },
        onAddItem      : { item -> bldgTypes.add( item ) },
        fetchList      : { return bldgTypes },
    ] as SubListModel
    
    void validateBldgType( bldgType ) {
        try {
            errorMsg = null
            required( bldgType.code, 'Code' )
            required( bldgType.name, 'Bldg Type' )
            checkDuplicateBldgType( bldgType )
            svc.saveBldgType( bldgType )
        }
        catch ( e ) {
            errorMsg = e.message
            binding.refresh('errorMsg')
            throw e 
        }
    }
    
    void removeBldgType( bldgType ) {
        if( MsgBox.confirm('Remove item?') ) {
            svc.removeBldgType( bldgType )
            bldgTypes.remove( bldgType )
        }
    }
    
    void checkDuplicateBldgType( bldgType ) {
        def item = bldgTypes.find{ it.objid != bldgType.objid && it.code == bldgType.code  }
        if( item ) throw new Exception('Duplicate code is not allowed.')    
        item = bldgTypes.find{ it.objid != bldgType.objid && it.name == bldgType.name }
        if( item ) throw new Exception('Duplicate name is not allowed.')    
    }
    

    /*---------------------------------------------------------------------
    *
    * Multi-Storey Adjustment Support
    *
    ---------------------------------------------------------------------*/
    def multiStoreyListHandler = [
        createItem : { return createMultiStoreyAdjustment() },
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'floorno', caption:'Floor No.', type:'integer'),
            new Column(name:'rate', caption:'Rate*', type:'decimal', editable:true, editableWhen:'#{root.allowStoreyColumnEdit[item]}' ),
        ]},
        validate     : { li -> validateMultiStoreyItem( li.item ) },
        onAddItem    : { item -> 
            selectedBldgType.multistoreyadjustments.add( item ) 
            svc.saveBldgType( selectedBldgType )
        },
        onRemoveItem : { item -> removeMultiStoreyItem( item ) },
        fetchList    : { return selectedBldgType?.multistoreyadjustments  },
    ] as SubListModel
    
    
    def allowStoreyColumnEdit = { item ->
        if( ! selectedBldgType ) return false
        if( ! selectedBldgType.code ) return false
        if( isFirstItem( selectedBldgType.multistoreyadjustments ) ) return true
        if( isNewEntry( item.floorno ) ) return true
        return isLastItem( selectedBldgType.multistoreyadjustments, item )
    } as Map
    
    void removeMultiStoreyItem( item ) {
        if( isLastItem( selectedBldgType.multistoreyadjustments, item ) ) {
            selectedBldgType.multistoreyadjustments.remove( item )
            svc.saveBldgType( selectedBldgType )
        }
    }
    
    void validateMultiStoreyItem( item ) {
        def lastItem = null 
        if( selectedBldgType.multistoreyadjustments ) {
            lastItem = selectedBldgType.multistoreyadjustments.get( selectedBldgType.multistoreyadjustments.size() - 1 )
        }
        if( ! item.floorno ) item.floorno = (lastItem ? lastItem.floorno + 1 : 1)
        try {
            errorMsg = null 
            validateRate( item.rate )
            svc.saveBldgType( selectedBldgType )
        }
        catch( e ) {
            errorMsg = e.message 
            binding.refresh('errorMsg') 
            throw e 
        }
    }
    
    
    /*---------------------------------------------------------------------
    *
    * Depreciation Support
    *
    ---------------------------------------------------------------------*/
    def depreciationListHandler = [
        createItem : { return [:] },
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'agefrom', caption:'Age From', type:'integer'),
            new Column(name:'ageto', caption:'Age To', type:'integer', editable:true, editableWhen:'#{root.allowDepreciationColumnEdit[item]}' ),
            new Column(name:'rate', caption:'Rate*', type:'decimal', editable:true, editableWhen:'#{root.allowDepreciationColumnEdit[item]}' ),
        ]},
        validate     : { li -> validateDepreciationItem( li.item ) },
        onAddItem    : { item -> 
            selectedBldgType.depreciations.add( item ) 
            svc.saveBldgType( selectedBldgType )
        },
        onRemoveItem   : { item -> removeDepreciationItem( item ) },
        fetchList    : { return selectedBldgType?.depreciations  },
    ] as SubListModel
    
    
    def allowDepreciationColumnEdit = { item ->
        if( ! selectedBldgType ) return false
        if( ! selectedBldgType.code ) return false 
        if( isFirstItem( selectedBldgType.depreciations ) ) return true
        if( isNewEntry( item.agefrom ) ) return true
        return isLastItem( selectedBldgType.depreciations, item )
    } as Map
    
    void removeDepreciationItem( item ) {
        if( isLastItem( selectedBldgType.depreciations, item ) ) {
            selectedBldgType.depreciations.remove( item )
            svc.saveBldgType( selectedBldgType )
        }
    }
    
    void validateDepreciationItem( item ) {
        def lastItem = null 
        if( selectedBldgType.depreciations ) {
            lastItem = selectedBldgType.depreciations.get( selectedBldgType.depreciations.size() - 1 )
        }
        if( ! item.agefrom ) {
            item.agefrom = (lastItem ? lastItem.ageto + 1 : 1)
        }
                
        try {
            if( item.ageto < item.agefrom && item.ageto != 0  ) throw new Exception('Age To must be greater than Age From.')
            validateRate( item.rate )
            svc.saveBldgType( selectedBldgType )
        }
        catch( e ) {
            println e.message 
            errorMsg = e.message 
            binding.refresh('errorMsg') 
            throw e 
        }
    }
    
    
    
    /*---------------------------------------------------------------------
    *
    * BldgKind Support
    *
    ---------------------------------------------------------------------*/
    def baseValueType
    def baseValueHandler
    
    void setBaseValueType( baseValueType ) {
        this.baseValueType = baseValueType
        if( selectedBldgType && selectedBldgType.code ) {
            selectedBldgType.basevaluetype = baseValueType
            svc.saveBldgType( selectedBldgType )
            initBaseValueHandler()
        }
    }
    
    void initBaseValueHandler() {
        baseValueHandler = null
        if( baseValueType ) {
            def openerType = 'basevaluetype.' + baseValueType
            baseValueHandler = InvokerUtil.lookupOpener(openerType, [bldgType:selectedBldgType] )
        }
    }
    
    
    List getBaseValueTypes() {
        return ['fix','range','gap']
    }
    
    
    
    
    
    
    /*---------------------------------------------------------------------
    *
    * Create Records Support
    *
    ---------------------------------------------------------------------*/
    Map createEntity() {
        return [
            objid       : 'BRY' + new UID(),
            ry          : null,
            predominant : 1,
            depreciatecoreanditemseparately     : 0,
            computedepreciationbasedonschedule  : 1,
        ]
    }
    
    Map createAssessLevel() {
        return [ 
            objid           : 'AL' + new UID(),
            bldgrysettingid : entity.objid,
            fixrate         : true,
            rate            : 0.0,
            ranges          : [],
        ]
    }
    
    Map createRangeAssessLevel() {
        return [ 
            mvfrom  : null,
            mvto    : null,
            rate    : 0.0,
        ]
    }
    
    Map createBldgType() {
        return [
            objid           : 'BT' + new UID(),
            code            : null,
            name            : null,
            bldgrysettingid : entity.objid,
            basevaluetype   : 'fix', 
            residualrate    : 0.0,
            multistoreyadjustments : [],
            depreciations : [],
        ]
    }
    
    Map createMultiStoreyAdjustment(){
        return [floorno:null, rate:null]
    }
    
    /*---------------------------------------------------------------------
    *
    * Common Methods 
    *
    ---------------------------------------------------------------------*/
    void required( value, caption ) {
        if( ! value ) throw new Exception(caption + ' is required.') 
    }
    
    void validateRate( rate ) {
        if( rate < 0.0 ) throw new Exception('Rate must be greater than or equal to zero.')
        if( rate > 100) throw new Exception('Rate must not exceed 100.00')
    }
    
    def isFirstItem( list ) {
        return list.size() == 0
    }
    
    def isNewEntry( value ) {
        return value == null 
    }
    
    def isLastItem( list, item ) {
        def index = list.indexOf( item )
        if( index < 0 ) 
            index = list.size()
        else
            index += 1 
        return list.size() == index 
    }
}


]]>

    </code>
    
    <pages>
        <page template="etracs2.rpt.ry.bldg.BldgRYSettingPage"/>
        <page name="new" template="etracs2.rpt.ry.bldg.RYSettingNewPage"/>
        <page name="copy" template="etracs2.rpt.ry.bldg.RYSettingCopyPage"/>
    </pages>
</workunit>
