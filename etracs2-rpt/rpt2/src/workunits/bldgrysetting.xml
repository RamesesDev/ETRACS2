<?xml version="1.0" encoding="UTF-8"?>
<!--
// author    : jzamora
// copyright : Rameses Systems Inc
-->
<workunit>
    <invokers>
        <invoker type="bldgrysetting.create" action="create" caption="Create Building" mnemonic="b" icon="images/addnew24.png" target="window"/>
        <invoker type="bldgrysetting.open" action="open" caption="Edit Building" mnemonic="b" icon="images/addnew24.png" target="window"/>
        
        <invoker type="formActions" action="_close" caption="Close" />
        <invoker type="formActions" action="save" shortcut="ctrl S" caption="Save" mnemonic="s" icon="images/save24.png"/>
        <invoker type="formActions" action="remove" shortcut="ctrl D" immediate="true" caption="Delete" mnemonic="d" icon="images/delete24.png" />
    </invokers>
    <code lang="groovy">

<![CDATA[

import com.rameses.rcp.annotations.*
import com.rameses.rcp.common.*
import com.rameses.osiris2.client.*
import java.rmi.server.UID

public class BldgRYSettingController 
{
    @Binding 
    def binding
    
    @Service('BldgRYSettingService')
    def svc
    
    def entity
    def copyYear
    def settingType
    def mode
   
    
    /*---------------------------------------------------------------------
    * FormAction Support
    ---------------------------------------------------------------------*/
    def create() {
        entity = createEntity()
        if( svc.settingExists() ) {
            settingType = 'copySetting'
            return 'copy'
        }
        else {
            settingType = 'newSetting'
            return 'new' 
        }
    }
    
    void open() {
        def data = svc.open( entity.objid )
        entity = data.entity
        assessLevels = data.assessLevels 
    }
    
    def createSetting() {
        if( settingType == 'newSetting' ) {
            entity = svc.create( entity )
        }
        else {
            entity = svc.copySetting( ry )
        }
        return 'default'
    }
    
    void save() {
        entity = svc.update( entity )
    }
    
    def remove() {
        if( MsgBox.confirm('Delete setting?') ) {
            svc.remove( entity.objid )
            return '_close'
        }
        return 'default'
    }

    /*---------------------------------------------------------------------
    *
    * AssessLevel Support
    *
    ---------------------------------------------------------------------*/
    def selectedAssessLevel
    def selectedRangeLevel
    def assessLevelMsg 
    def assessLevels = [] 
    
    def assessLevelListHandler = [
        createItem : { return createAssessLevel() },
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'code', caption:'Code*', maxWidth:60, editable:true ),
            new Column(name:'name', caption:'Name*', editable:true ),
            new Column(name:'fixrate', caption:'Fix?*', type:'boolean', maxWidth:40, editable:true ),
            new Column(name:'rate', caption:'Rate*', type:'decimal', editable:true ),
        ]},
        validate       : { li -> doValidateAssessLevel( li.item ) },
        onRemoveItem   : { item -> 
            doRemoveItem( assessLevels, item) 
            svc.removeAssessLevel( selectedAssessLevel )
        },
        onAddItem      : { item -> assessLevels.add( item ) },
        onColumnUpdate : { item, colName -> 
            if( colName == 'fixrate' && item.fixrate == true ) {
                selectedAssessLevel?.ranges?.clear()
                rangeLevelListHandler.load()
            }
        },
        fetchList      : { return assessLevels },
    ] as SubListModel
    
    
    def rangeLevelListHandler = [
        createItem : { return createRangeAssessLevel() },
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'mvfrom', caption:'Market Value From', type:'decimal'),
            new Column(name:'mvto', caption:'Market Value To', type:'decimal', editable:true, editableWhen:'#{root.allowRangeColumnEdit[item]}' ),
            new Column(name:'rate', caption:'Rate*', type:'decimal', editable:true, editableWhen:'#{root.allowRangeColumnEdit[item]}' ),
        ]},
        validate     : { li -> doValidateAssessLevelRange( li.item ) },
        onAddItem    : { item -> 
            selectedAssessLevel.ranges.add( item ) 
            svc.saveAssessLevel( selectedAssessLevel )
        },
        onRemoveItem   : { item -> doRemoveRangeItem( item ) },
        fetchList    : { return selectedAssessLevel.ranges  },
    ] as SubListModel
    
    def allowRangeColumnEdit = { item ->
        if( ! selectedAssessLevel ) return false
        if( selectedAssessLevel.fixrate == true ) return false
        if( isFirstItem( selectedAssessLevel.ranges ) ) return true
        if( isNewEntry( item.mvfrom ) ) return true
        return isLastItem( selectedAssessLevel.ranges, item )
    } as Map
    
    void doValidateAssessLevel( al ) {
        assessLevelMsg = null 
        try {
            required(al.code, 'Code')
            required(al.name, 'Name')
            validateRate( al.rate )
            checkDuplicateAssessLevel( al )
            svc.saveAssessLevel( al ) 
            binding.refresh('assessLevelMsg') 
        }
        catch( e ) {
            assessLevelMsg = e.message
            binding.refresh('assessLevelMsg') 
            throw e 
        }
    }
    
    void checkDuplicateAssessLevel( al ) {
        def item = assessLevels.find{ it.objid != al.objid && (it.code == al.code || it.name == al.name )  }
        if( item ) throw new Exception('Duplicate item is not allowed.')    
    }
    
    void doRemoveRangeItem( item ) {
        if( isLastItem( selectedAssessLevel.ranges, item ) ) {
            selectedAssessLevel.ranges.remove( item )
            svc.saveAssessLevel( selectedAssessLevel )
        }
    }
    
    void doValidateAssessLevelRange( range ) {
        def lastRange = null 
        if( selectedAssessLevel.ranges ) {
            lastRange = selectedAssessLevel.ranges.get( selectedAssessLevel.ranges.size() - 1 )
        }
        range.mvfrom = (lastRange ? lastRange.mvto : 0.0)
        
        assessLevelMsg = null
        try {
            if( range.mvto < range.mvfrom && range.mvto != 0  ) throw new Exception('MV To must be greater than MV From')
            validateRate( range.rate )
            svc.saveAssessLevel( selectedAssessLevel )
            binding.refresh('assessLevelMsg') 
        }
        catch( e ) {
            assessLevelMsg = e.message 
            binding.refresh('assessLevelMsg') 
            throw e 
        }
    }
    
    
    
    
    /*---------------------------------------------------------------------
    *
    * BldgAdjustment Support
    *
    ---------------------------------------------------------------------*/
    def selectedAdjustment
    
    def adjustmentListHandler = [
        createItem : { return createAssessLevel() },
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'code', caption:'Code*', maxWidth:60, editable:true ),
            new Column(name:'name', caption:'Name*', editable:true ),
            new Column(name:'fixrate', caption:'Fix?*', type:'boolean', maxWidth:40, editable:true ),
            new Column(name:'rate', caption:'Rate*', type:'decimal', editable:true ),
        ]},
        validate       : { li -> doValidateAssessLevel( li.item ) },
        onRemoveItem   : { item -> 
            doRemoveItem( assessLevels, item) 
            svc.removeAssessLevel( selectedAssessLevel )
        },
        onAddItem      : { item -> assessLevels.add( item ) },
        onColumnUpdate : { item, colName -> 
            if( colName == 'fixrate' && item.fixrate == true ) {
                selectedAssessLevel?.ranges?.clear()
                rangeLevelListHandler.load()
            }
        },
        fetchList      : { return assessLevels },
    ] as SubListModel 
    
    
    def createAdjustment() {
    
    }
    
    def openAdjustment() {
    
    }
    
    void removeAdjustment() {
    
    }
    
    
    
    
    
    /*---------------------------------------------------------------------
    * Create Records Support
    ---------------------------------------------------------------------*/
    Map createEntity() {
        return [
            objid       : 'BRY' + new UID(),
            ry          : null,
            predominant : 1,
            depreciatecoreanditemseparately     : 0,
            computedepreciationbasedonschedule  : 1,
        ]
    }
    
    Map createAssessLevel() {
        return [ 
            objid           : 'AL' + new UID(),
            bldgrysettingid : entity.objid,
            fixrate         : true,
            rate            : 0.0,
            ranges          : [],
        ]
    }
    
    Map createRangeAssessLevel() {
        return [ 
            mvfrom  : null,
            mvto    : null,
            rate    : 0.0,
        ]
    }
    
    /*---------------------------------------------------------------------
    * Common Methods 
    ---------------------------------------------------------------------*/
    void required( value, caption ) {
        if( ! value ) throw new Exception(caption + ' is required.') 
    }
    
    void doRemoveItem( list, item ) {
        if( MsgBox.confirm('Remove item?') ) {
            list.remove( item )
        }
    }
    
    void validateRate( rate ) {
        if( rate < 0.0 ) throw new Exception('Rate must be greater than or equal to zero.')
        if( rate > 100) throw new Exception('Rate must not exceed 100.00')
    }
    
    def isFirstItem( list ) {
        return list.size() == 0
    }
    
    def isNewEntry( value ) {
        return value == null 
    }
    
    def isLastItem( list, item ) {
        return list.size() == list.indexOf( item ) + 1
    }
}


]]>

    </code>
    
    <pages>
        <page template="etracs2.rpt.ry.bldg.BldgRYSettingPage"/>
        <page name="new" template="etracs2.rpt.ry.bldg.RYSettingNewPage"/>
        <page name="copy" template="etracs2.rpt.ry.bldg.RYSettingCopyPage"/>
    </pages>
</workunit>
