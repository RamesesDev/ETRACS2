<?xml version="1.0" encoding="UTF-8"?>
<workunit>
        <invoker type="structure.create" action="createItem" caption="Create Structure" mnemonic="c" icon="images/doc-new.png" target="popup"/>
        <invoker type="structure.open" action="openItem" caption="Edit Structure" mnemonic="e" icon="images/edit.png" target="popup"/>
        
        <invoker type="formActions" action="_close" shortcut="ctrl C" immediate="true" caption="Close" mnemonic="c" icon="images/cancel.png" />
        <invoker type="formActions" action="createItem" shortcut="ctrl N" visibleWhen="#{mode == 'view' and entity.objid != null }" immediate="true" caption="New" mnemonic="n" icon="images/doc-new.png" />
        <invoker type="formActions" action="edit" shortcut="ctrl E" visibleWhen="#{mode == 'view' and entity.objid != null }" immediate="true" caption="Edit" mnemonic="e" icon="images/edit.png" />
        <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view'}" caption="Save" mnemonic="s" icon="images/save.png"/>
    
    <code lang="groovy">
        <![CDATA[
        
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import java.rmi.server.UID;
        
        public class StructuresController {
        
            @Binding
            def binding;
            
            @Service("StructuresService")
            def svc;
            
            def mode = "view" ;
            def entity;
            def materials;
            
            /*---------------------------------------------------------------------
            * FormAction Support
            ---------------------------------------------------------------------*/
            def createItem() {
                mode = "create"; 
                entity = createEntity();
                
                return "new";
            }

            void openItem() {
                mode = "view";
                entity = svc.open( entity.objid );
            }

            
            /*---------------------------------------------------------------------
            * Main
            ---------------------------------------------------------------------*/
            def createEntity() {
                return [
                    materials : [],
                ];
            }
            
            def lookupMaterials = InvokerUtil.lookupOpener("materials:lookup",[:]);
            
            def materialsHandler = [
                getRows    : { return 20; },
                getColumns : {
                    return [
                        new Column(name:"material", caption:"Code", minWidth:50, editable:true, type:"lookup", handler:lookupMaterials, expression: '#{materialcode}'),
                        new Column(name:"materialdesc", caption:"Material", minWidth:200, editable:false)
                    ];
                },
                fetchList : { 
                    return entity.materials; 
                },
                createItem : { return [:]; },
                validate       : { li -> validateMaterial( li.item ) },
                onAddItem : { item ->
                    updateMaterials( item );
                    entity.materials.add( item );
                },
                onColumnUpdate : { item, colName ->
                    if( colName == 'material' ) {
                        updateMaterials( item );
                    }
                },
                onRemoveItem : { item -> 
                    if( mode == "view" ) return false;
                    if( MsgBox.confirm("Remove selected item?") ) {
                        entity.materials.remove( item );
                    }
                },
            ] as SubListModel;
            
            void updateMaterials( item ){
                item.objid = item.material.objid;
                item.materialcode = item.material.materialcode;
                item.materialdesc = item.material.materialdesc;
            }
            
            void validateMaterial( item ){
                required( 'Code', item.material );
                checkDuplicate( item );
            }
            
            void checkDuplicate( item ){
                def data = entity.materials.find{ it.objid == item.objid }
                if( data ){ 
                    MsgBox.alert('Duplicate not allowed!');
                    throw new Exception('Duplicate not allowed!');
                }
            }
            
            void save() {
                if( mode == "create") entity = svc.create( entity );
                else entity = svc.update( entity );
                
                mode = "view";
                binding.refresh("entity.*");
            }
            
            void edit() {
                mode = "edit";
                focus( "entity.structurecode" );
            }
            
            /*---------------------------------------------------------------------
            * Support Methods
            ---------------------------------------------------------------------*/
            
            void focus( name ) {
                binding.refresh("entity.*");
                binding.focus( name );
            }
            
            void required( caption, value ) {
                if( !value ){ 
                    MsgBox.alert( caption + ' is required.')
                    throw new Exception( caption + ' is required.')
                }
            }
        }
        
        
        ]]>
    </code>
    
    <pages>
        <page name="new" template="etracs2.rpt.master.structures.StructuresPage" />
    </pages>
</workunit>
