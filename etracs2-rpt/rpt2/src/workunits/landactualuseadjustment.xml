<?xml version="1.0" encoding="UTF-8"?>

<workunit>
    <invokers>
        <invoker type="landactualuseadjustment.create" action="create" caption="Create Land Actual Use Adjustment" mnemonic="c" icon="images/doc-new.png" target="popup"/>
        <invoker type="landactualuseadjustment.open" action="open" caption="Open Land Actual Use Adjustment" mnemonic="o" icon="images/open.png" target="popup"/>
        
        <invoker type="formActions" action="saveAndCreate" shortcut="ctrl R" visibleWhen="#{mode == 'create'}" caption="Save and Create" mnemonic="r" icon="images/doc-save.png" default="true" />
        <invoker type="formActions" action="save" shortcut="ctrl S" caption="Save" visibleWhen="#{mode == 'create'}" mnemonic="s" icon="images/save.png"/>
        <invoker type="formActions" action="update" shortcut="ctrl U" caption="Update" visibleWhen="#{mode != 'create'}" mnemonic="u" icon="images/save.png"/>
        <invoker type="formActions" action="_close" caption="Cancel" mnemonic="c"  immediate="true" icon="images/cancel.png"/>
        
    </invokers>
    <code lang="groovy">

<![CDATA[

import com.rameses.rcp.annotations.*
import com.rameses.rcp.common.*
import com.rameses.osiris2.client.*
import java.rmi.server.UID

public class LandActualUseAdjustmentController 
{
    @Binding 
    def binding
    
    @Service('RPUService')
    def rpuSvc
    
    def addHandler
    def updateHandler
    
    def mode 
    def entity
    def errorMsg
    def adjustments
    def selectedItem
        
    void create() {
        mode = 'create'
        entity = createEntity()
    }
    
    void open() {
        mode = 'open'
    }
    
    def save() {
        invokeAddHandler()
        return '_close' 
    }
    
    void saveAndCreate() {
        invokeAddHandler()
        entity = createEntity()
        binding.refresh()
        binding.focus('entity.adjustmentcode')
    }
    
    def update() {
        checkDuplicate( 'Code', 'adjustmentcode')
        checkDuplicate( 'Name', 'adjustmentname')
        if( updateHandler ) updateHandler( entity )
        return '_close' 
    }
    
    void invokeAddHandler() {
        checkDuplicate( 'Code', 'adjustmentcode')
        checkDuplicate( 'Name', 'adjustmentname')
        if( addHandler ) addHandler( entity )
    }
    
    void checkDuplicate(caption, fieldname) {
        def data = adjustments.find{ it.objid != entity.objid && it[fieldname] == entity[fieldname] }
        if( data ) throw new Exception( 'Duplicate ' + caption + ' is already defined.')
    }
    
    def createEntity() {
        return [ 
            objid               : 'LA' + new UID(),
            classifications     : []
        ]
    }
    
    def lookupClassifications = InvokerUtil.lookupOpener("propertyclass.lookup",[:]);

    def classificationListHandler = [
        getRows    : { return 20; },
        getColumns : {
            return [
                new Column(name:"propertyclass", caption:"Code", minWidth:50, editable:true, type:"lookup", handler:lookupClassifications, expression: '#{classcode}'),
                new Column(name:"propertyname", caption:"Name", editable:false)
            ];
        },
        fetchList : { 
            return entity.classifications; 
        },
        createItem : { return [:]; },
        validate     : { li -> doValidateLandActualUseAdjustment( li.item ) },
        onAddItem : { item -> entity.classifications.add( item ); },
        onRemoveItem : { item -> 
            if( mode == "view" ) return false;
            if( MsgBox.confirm("Remove selected item?") ) {
                entity.classifications.remove( item );
            }
            clearError()
        },
    ] as SubListModel;
    
    void doValidateLandActualUseAdjustment( item ){
        try{
            if( ! item.propertyclass ) throw new Exception('Code is required.')
            
            //check duplicate 
            def data = entity.classifications.find{ it.propertyname == item.propertyname }
            if( data ) throw new Exception('Duplicate item is not allowed.')    
            
            //update classinfo
            item.propertyid = item.propertyclass.classid;
            item.propertycode = item.propertyclass.classcode;
            item.propertyname = item.propertyclass.classname;
            
            clearError()
        }
        catch( e ){
            errorMsg = e.message
            binding.refresh( 'errorMsg' )
            throw e 
        }
    }
    
    void clearError() {
        if( errorMsg ) {
            errorMsg = null
            binding.refresh( 'errorMsg' )
        }
    }
    
    /*------------------------------------------------------------------ */
    def openFormulaEditor() {
        def varlist = rpuSvc.variableList.collect{ it.name }
        if( !varlist  ) varlist = []
        return InvokerUtil.lookupOpener('formula_editor2', [
            formula         : entity.expression, 
            variableList    : varlist, 
            functionList    : rpuSvc.functionList,
            onselect        : { formula ->
                entity.expression = formula
                binding.refresh('entity.expression')
            }
        ])
    }
}


]]>

    </code>
    
    <pages>
        <page template="etracs2.rpt.ry.land.LandAdjustmentPage"/>
    </pages>
</workunit>
