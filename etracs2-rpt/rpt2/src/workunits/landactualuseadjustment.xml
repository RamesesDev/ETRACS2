<?xml version="1.0" encoding="UTF-8"?>

<workunit>
    <invokers>
        <invoker type="landactualuseadjustment.create" action="create" caption="Create Land Actual Use Adjustment" mnemonic="c" icon="images/addnew24.png" target="popup"/>
        <invoker type="landactualuseadjustment.open" action="open" caption="Open Land Actual Use Adjustment" mnemonic="o" icon="images/addnew24.png" target="popup"/>
        
        <invoker type="formActions" action="saveAndCreate" shortcut="ctrl R" visibleWhen="#{mode == 'create'}" caption="Save and Create" mnemonic="r" icon="images/save24.png" default="true" />
        <invoker type="formActions" action="save" shortcut="ctrl S" caption="Save" visibleWhen="#{mode == 'create'}" mnemonic="s" icon="images/save24.png"/>
        <invoker type="formActions" action="update" shortcut="ctrl U" caption="Update" visibleWhen="#{mode != 'create'}" mnemonic="u" icon="images/save24.png"/>
        <invoker type="formActions" action="_close" caption="Cancel" mnemonic="c"  immediate="true" />
        
    </invokers>
    <code lang="groovy">

<![CDATA[

import com.rameses.rcp.annotations.*
import com.rameses.rcp.common.*
import com.rameses.osiris2.client.*
import java.rmi.server.UID

public class LandActualUseAdjustmentController 
{
    @Binding 
    def binding
    
    def addHandler
    def updateHandler
    
    def mode 
    def entity
        
    void create() {
        mode = 'create'
        entity = createEntity()
    }
    
    void open() {
        mode = 'open'
    }
    
    def save() {
        invokeAddHandler()
        return '_close' 
    }
    
    void saveAndCreate() {
        invokeAddHandler()
        entity = createEntity()
        binding.refresh()
        binding.focus('entity.adjustmentcode')
    }
    
    def update() {
        if( updateHandler ) updateHandler( entity )
        return '_close' 
    }
    
    void invokeAddHandler() {
        if( addHandler ) addHandler( entity )
    }
    
    def createEntity() {
        return [ 
            objid               : 'LA' + new UID(),
            classifications     : []
        ]
    }
    
    def lookupClassifications = InvokerUtil.lookupOpener("propertyclass:lookup",[:]);

    def classificationListHandler = [
        getRows    : { return 20; },
        getColumns : {
            return [
                new Column(name:"propertyclass", caption:"Code", minWidth:50, editable:true, type:"lookup", handler:lookupClassifications, expression: '#{classcode}'),
                new Column(name:"propertyname", caption:"Name", minWidth:200, editable:false)
            ];
        },
        fetchList : { 
            return entity.classifications; 
        },
        createItem : { return [:]; },
        validate     : { li -> doValidateLandActualUseAdjustment( li.item ) },
        onAddItem : { item ->
            updateClassifications( item );
            entity.classifications.add( item );
        },
        onColumnUpdate : { item, colName ->
            if( colName == 'propertyclass' ) {
                updateClassifications( item );
            }
        },
        onRemoveItem : { item -> 
            if( mode == "view" ) return false;
            if( MsgBox.confirm("Remove selected item?") ) {
                entity.classifications.remove( item );
            }
        },
    ] as SubListModel;
    
    void doValidateLandActualUseAdjustment( item ){
        try{
            checkDuplicateLandActualUseAdjustment( item );
        }catch( e ){
            MsgBox.err( e.message );
            throw e
        }
    }
    
    void checkDuplicateLandActualUseAdjustment( item ) {
        def data = entity.classifications.find{ it.propertyid != item.propertyid && ( it.propertyname == item.propertyname )  }
        if( data ) throw new Exception('Duplicate item is not allowed.')    
    }
    
    void updateClassifications( item ){
        item.propertyid = item.propertyclass.classid;
        item.propertycode = item.propertyclass.classcode;
        item.propertyname = item.propertyclass.classname;
    }
    
}


]]>

    </code>
    
    <pages>
        <page template="etracs2.rpt.ry.land.LandActualUseAdjustmentPage"/>
    </pages>
</workunit>
