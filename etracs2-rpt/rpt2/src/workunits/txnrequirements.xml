<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    
     <!--
    <invoker folderid="/menu/rpt/master" action="init" caption="Transaction Requirements" index="16" permission="txnrequirements.view" />
    <invoker type="rpt.master" action="init" caption="Transaction Requirements" index="15" permission="txnrequirements.view" />
    -->    
    
        <invoker type="formActions" action="create" shortcut="ctrl N" visibleWhen="#{mode == 'view'}" immediate="true" caption="New" mnemonic="n" icon="images/doc-new.png" permission="txnrequirements.create" />
        <invoker type="formActions" action="edit" shortcut="ctrl E" visibleWhen="#{mode == 'view' and entity.objid != null }" immediate="true" caption="Edit" mnemonic="e" icon="images/doc-edit.png" permission="txnrequirements.edit" />
        <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view'}" caption="Save" mnemonic="s" icon="images/doc-save.png"/>
        <invoker type="formActions" action="cancel" visibleWhen="#{mode != 'view'}"  immediate="true" caption="Cancel" mnemonic="c" icon="images/doc-cancel.png"/>
        <invoker type="formActions" action="delete" shortcut="ctrl D" visibleWhen="#{mode == 'view' and entity.objid != null}" immediate="true" caption="Delete" mnemonic="d" icon="images/doc-delete.png" permission="txnrequirements.delete" />
    
    <code lang="groovy">
        <![CDATA[
        
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import java.rmi.server.UID;
        
        public class TransactionRequirementsController  extends etracs2.groovy.CRUDController  {
            @Service("TxnRequirementsService")
            def svc;
            
            def txntype;
            def requirements;
            def txntypelist = [];
            
            def getService() { return svc; }
            def getCreateFocusComponent() { return "txntype"; }
            def getEditFocusComponent() { return "txntype"; }
            def getListHandler() { return listHandler; }
            
            void init(){
                super.init();
                txntypelist = svc.getAllTxnTypes().collect{ [objid:it.objid, txntype:it.txntype] };
            }
            
            def getTxnTypes(){
                return txntypelist;
            }
            
            def getTxntype(){
                return [objid:entity.txntypeid, txntype: entity.txntype];
            }
            
            void setTxntype( txntype ){
                entity.txntypeid = txntype.objid;
                entity.txntype = txntype.txntype;
            }
            
            void create(){
                txntypelist = svc.getTxnTypes().collect{ [objid:it.objid, txntype:it.txntype] };
                super.create();
            }
            
            void cancel(){
                txntypelist = svc.getAllTxnTypes();
                super.cancel();
            }
            
            def createEntity() {
                return [
                    requirements : [],
                ];
            }
            
            def listHandler = [
                getRows    : { return 20; },
                getColumns : {
                    return [
                        new Column(name:"txntype", caption:"Transaction Types"),
                    ];
                },
                fetchList : { 
                    return list; 
                },
            ] as SubListModel;
            
            def lookupRequirements = InvokerUtil.lookupOpener("requirements:lookup",[:]);
            
            def requirementsHandler = [
                getRows    : { return 20; },
                getColumns : {
                    return [
                        new Column(name:"requirement", caption:"Code", minWidth:50, editable:true, type:"lookup", handler:lookupRequirements, expression: '#{reqcode}'),
                        new Column(name:"reqname", caption:"Name", minWidth:200, editable:false)
                    ];
                },
                fetchList : { 
                    return entity.requirements; 
                },
                createItem : { return [:]; },
                onAddItem : { item ->
                    updateRequirements( item );
                    entity.requirements.add( item );
                },
                onColumnUpdate : { item, colName ->
                    if( colName == 'requirement' ) {
                        updateRequirements( item );
                    }
                },
                onRemoveItem : { item -> 
                    if( mode == "view" ) return false;
                    if( MsgBox.confirm("Remove selected item?") ) {
                        entity.requirements.remove( item );
                    }
                },
            ] as SubListModel;
            
            void updateRequirements( item ){
                item.objid = item.requirement.objid;
                item.reqcode = item.requirement.reqcode;
                item.reqname = item.requirement.reqname;
            }
        }
        
        
        ]]>
    </code>
    
    <pages>
        <page template="etracs2.rpt.master.transactionrequirements.TransactionRequirementsPage" />
    </pages>
</workunit>
