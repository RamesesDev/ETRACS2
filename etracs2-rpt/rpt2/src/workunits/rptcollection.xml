<workunit>
    <invokers>
        <invoker type="collection" caption="Real Property Tax" afid="56" appcode="real_property"  />
        <invoker type="tc:real_property" action="init" caption="Real Property" afid="56"/>
        <invoker type="inquiry:tc:real_property" action="initInquiry" caption="Inquiry" />
        
        <invoker type="formActions" action="doNew" caption="New" mnemonic="n" shortcut="ctrl N" visibleWhen="#{mode == 'view' and txnmode != null}" icon="images/doc-new.png"/>
        <invoker type="formActions" action="back" caption="Back" mnemonic="b"  immediate="true" visibleWhen="#{mode == 'create'}" icon="images/back.png"/>
        <invoker type="formActions" action="create" caption="Save" mnemonic="s" shortcut="ctrl S" visibleWhen="#{mode == 'create'}" icon="images/save.png"/>
        <invoker type="formActions" action="update" caption="Save" mnemonic="s" shortcut="ctrl S" visibleWhen="#{mode == 'edit'}" icon="images/save.png"/>
        <invoker type="formActions" action="doPrint" caption="Print" mnemonic="p" shortcut="ctrl P" visibleWhen="#{mode == 'view'}" />
        <invoker type="formActions" action="doPrintDetail" caption="Print Detail" mnemonic="d" shortcut="ctrl P" visibleWhen="#{mode == 'view'}"/>
        <invoker type="formActions" action="doVoid" caption="Void" mnemonic="v" visibleWhen="#{mode == 'view' and entity.voided == 0}" icon="images/doc-void.png"/>

        <invoker type="receipt.actions:tc:real_property" action="edit" caption="Edit" mnemonic="e" shortcut="ctrl E" target="popup" icon="images/edit.png"/>
        <invoker type="receipt.actions:tc:real_property" action="doPrint" caption="Print" mnemonic="p" shortcut="ctrl P" />
        <invoker type="receipt.actions:tc:real_property" action="doPrintDetail" caption="Print Detail" mnemonic="d" shortcut="ctrl P" />
        <invoker type="receipt.actions:tc:real_property" action="doVoid" caption="Void" mnemonic="v" icon="images/doc-void.png"/>   
    </invokers>
    <code>
<![CDATA[

    import com.rameses.rcp.common.*
    import com.rameses.rcp.annotations.*
    import com.rameses.osiris2.client.*
    import com.rameses.osiris2.reports.*
    import etracs2.groovy.*
    import etracs2.tc.groovy.*
    import etracs2.rpt.groovy.*
    import java.text.DecimalFormat;
    import java.rmi.server.UID
    import com.rameses.rcp.framework.TaskManager;

    class RPTCollectionController extends AbstractCollectionController
    {
        @Service('RPTReceiptService')
        def svc
        
        @Service('RPTReceiptHtmlService')
        def htmlSvc
        
        @Service('DateService')
        def dateSvc
        
        @Service('ReportParameterService')
        def svcParams;
        
        @Service('RPTBillingService')
        def billingSvc
    
        def currdate 
        def parsedate 
        def payments = []
        def response
        
        
        def getParameters() { return svcParams.getStandardParameter( OsirisContext.env.USERNAME ); }
        def getService() { return svc }
        def getHtmlService() { return htmlSvc }
        def getCollectionTitle() { return 'Real Property Tax Collection' }
        def getReportName() { return 'rptreceipt/af56' }
        def getDetailReportName() { return 'rptreceipt/af56' }
        
        void init() {
            super.init()
            entity.doctype = 'RPT'
            currdate = dateSvc.parseCurrentDate()    
            if( entity.info.mode == 'CAPTURE' ) entity.info.txndate = currdate.date 
        }
        
        void newRecord() {
            init()
            listHandler.load()
            paymentSummary.handle.reload()
        }
        
      
        
        
        /*================================================================================================
        *
        * Receipt Actions Support 
        *
        ================================================================================================*/
        
        def create() {
            if( bill == null ) {
                throw new Exception('At least one ledger for payment is required.')
            }
            
            def itemsForPayment = bill.items.findAll{ it.pay == true && it.amount > 0}
            if( itemsForPayment.size() == 0 ) {
                throw new Exception('At least one ledger for payment is required.')
            }
            
            if( MsgBox.confirm("Save collection?") ) {
                validateTxnDate()
                if( payoption == 'remote' ) {
                    entity = svc.createRemoteCollection( entity, itemsForPayment, response.fromlguindex, response.fromlguname  )
                }
                else {
                    entity = svc.create( entity, itemsForPayment  )
                }
                print()
                mode = 'view'
                return 'view'
            }
            return null
        }
        
        /*================================================================================================
        *
        * Initial Page Support 
        *
        ================================================================================================*/
        def payoption = 'all'
        def payor
        def errorMsg
        def selectedItem
        def bill
        def billtoyear 
        
        def getLookupPayor(){
            return InvokerUtil.lookupOpener('entity.lookup', [:])
        }
        
        void setPayor( payor ) {
            this.payor = payor
            entity.info.payorid   = payor?.objid
            entity.info.payorname = payor?.entityname
            entity.info.payoraddress = payor?.entityaddress
            entity.info.paidby = entity.info.payorname
            entity.info.paidbyaddress = entity.info.payoraddress
            binding.refresh( 'entity.info.*')
        }
        
        def process() {
        
            if( ! entity.info.payorid ) throw new Exception('Payor is required.')
            if( entity.info.mode == 'CAPTURE' && !entity.info.txndate ) throw new Exception('Txn Date is required.')
            
            if( entity.info.mode == 'CAPTURE' ) {
                parsedate = dateSvc.parseDate( entity.info.txndate, null )
                if( parsedate.date > currdate.date ) throw new Exception('Txn Date must be earlier or equal to current date.')
            }
            else {
                parsedate = dateSvc.parseCurrentDate()
            }
            if( payoption == 'all' ) {
                loadBill()
                return 'main'
            }
            else if( payoption == 'advance' ) {
                if( billtoyear == null ) throw new Exception('Year is required.')
                if( billtoyear <= parsedate.year ) throw new Exception('Year must be greater than ' + (parsedate.year) + '.' )
                loadBill()
                return 'main'
            }
            else if ( payoption == 'bytd' ) {
                return 'bytd'
            }
            else if ( payoption == 'remote' ) {
                sendRemoteBillingRequest()
                return 'wait'
            }
            return 'init' 
            
        }
        
        void loadBill() {
            if( payoption == 'bytd' ) {
                def ledgerids = bill.items.objid
                bill = createBill()
                bill.ledgerids = ledgerids
            }
            else {
                bill = createBill()
            }
            
            bill = billingSvc.generateBill( bill )
            
            //add pay and amount fields in every item
            bill.items.each { 
                it.pay    = true 
                it.amount = it.total
            }
            calculateReceiptAmount()
        }
        
        Map createBill() {
            return [
                sessionid      : 'S' + new UID(),
                taxpayerid     : entity.info.payorid,
                ledgerids      : [],
                advancepayment : false,
                billdate       : parsedate.date,
                billtoyear     : ( payoption == 'advance' ? billtoyear : parsedate.year),
                billtoqtr      : 4,
                fullpayment    : true,
                qtrlypaymentavailed : false, 
                advancepayment : false,
                items          : []
            ]
        }
        
        
        /*================================================================================================
        *
        * Main Page Support 
        *
        ================================================================================================*/
        def listHandler = [
            getRows     : { return 50 },
            getColumns  : { return [
                new Column(name:'pay', caption:'Pay?', type:'boolean', maxWidth:60, editable:true),
                new Column(name:'tdno', caption:'TD No.', width:150),
                new Column(name:'pin', caption:'PIN', width:150),
                new Column(name:'fromyear', caption:'From Year', format:'0000', type:'integer'),
                new Column(name:'fromqtr', caption:'From Qtr', format:'0', type:'integer'),
                new Column(name:'toyear', caption:'To Year*', editable:true, type:'integer', format:'0000'),
                new Column(name:'toqtr', caption:'To Qtr*', editable:true, type:'integer', format:'0'),
                new Column(name:'amount', caption:'Amount', type:'decimal'),
            ]},
            onColumnUpdate : { item, colname -> processColumnUpdate( item, colname) },
            fetchList   : { return bill?.items }
        ] as SubListModel

        void processColumnUpdate( item, colname) {
            try {
                if( colname == 'pay' ) {
                    processPayColumn( item )
                }
                else if( colname == 'toyear' || colname == 'toqtr' ) {
                    // if( item.toyear > (item.toyear + 4) ) throw new Exception('To Year must not exceed ' + (item.toyear+4) + '.' )
                    // if( item.toqtr < 0 || item.toqtr > 4 ) throw new Exception('To Qtr must be between 1 and 4.')
                    
                    int maxtoyear = parsedate.year + 3
                    if( item.toyear  > maxtoyear ) {
                        showError('To Year must not exceed ' + maxtoyear + '.' ) 
                        item.toyear =parsedate.year 
                    }
                    if( item.toqtr < 0 || item.toqtr > 4 ) {
                        showError('To Qtr must be between 1 and 4.')
                        item.toqtr = 4
                    }
                    
                    if( item.toyear < item.fromyear ) {
                        showError('To Year must be greater than or equal to From Year.')
                        item.toyear = item.fromyear
                    }
                    if( item.toyear == item.fromyear && item.toqtr < item.fromqtr) {
                        showError('To Qtr must be greater than or equal to From Qtr.')
                        item.toqtr = item.fromqtr 
                    }   
                    
                    if( payotion == 'remote' )
                        processBillToRemote( item )
                    else 
                        processBillTo( item )
                }
                calculateReceiptAmount()
            }
            catch( e ) {
                e.printStackTrace()
                showError( e.message )
                item.total  = 0.0
                item.amount = 0.0
            }
        }
        
        
        /*================================================================================================
        *
        * ByLedger Support 
        *
        ================================================================================================*/
        def ledger
        
        def getLookupLedger() {
            return InvokerUtil.lookupOpener( 'rptledger.lookup',  [:] )
        }
        
        void setLedger( ledger ) {
            this.ledger = ledger 
            if( ! ledger ) return 
            try {
                if( ledger.docstate == 'PENDING' ) throw new Exception("Ledger $ledger.tdno is still pending.")
                if( ledger.docstate == 'CANCELLED' ) throw new Exception("Ledger $ledger.tdno has already been cancelled.")
                if( ledger.lastyearpaid == parsedate.year && ledger.lastyearpaid == 4 ) throw new Exception("Ledger $ledger.tdno is already paid.")
                if( bill && duplicateLedger( ledger ) ) return 

                //load billitems for this ledger
                def newbill = createBill()
                newbill.ledgerids.add( ledger.objid )

                newbill = billingSvc.generateBill( newbill )

                //add pay and amount fields in every item
                newbill.items.each { 
                    it.pay    = true 
                    it.amount = it.total
                }
                if( ! bill ) {
                    bill = newbill 
                }
                else {
                    bill.items.addAll( newbill.items )
                }
                listHandler.load()
                calculateReceiptAmount()
                showError('')
            }
            catch( e ) {
                showError( e.message )
            }
        }
        
        boolean duplicateLedger( ledger ) {
            if( bill.items.findAll{ it.objid == ledger.objid } ) {
                return true
            }
            return false 
        }
        
        
        
        
        void showError( msg ) {
            errorMsg = msg
            binding.refresh('errorMsg')
        }
        
        void processBillTo( item ) {
            def newbill = createBill()
            newbill.ledgerids.add( item.objid )
            newbill.billtoyear = item.toyear
            newbill.billtoqtr  = item.toqtr 
            newbill.fullpayment = ( item.toyear == parsedate.year && item.toqtr == 4 )
            newbill.qtrlypaymentavailed = ( item.toqtr != 4 )
            newbill.advancepayment  = (item.toyear > parsedate.year )
            
            newbill = billingSvc.generateBill( newbill )
            def newitem = newbill.items[0]
            if( !newitem )  throw new Exception('Cannot process bill for this item.')
            
            def toyear = item.toyear
            def toqtr = item.toqtr
            
            item.details.clear()
            item.putAll( newitem )
            item.toyear = toyear
            item.toqtr  = toqtr 
            item.pay = true
            item.amount = newitem.total
            calculateReceiptAmount()
        }
        
        void processPayColumn( item ) {
            if( item.pay  ) {
                item.amount = item.total
            }
            else {
                item.amount = 0.0
            }
        }
        
        
        void selectAll() {
            if( bill == null || !bill.items ) return 
            bill.items.each { 
                it.pay    = true
                it.amount = it.total 
            }
            listHandler.load()
            calculateReceiptAmount()
        }
        
        void deselectAll() {
            if( bill == null || !bill.items ) return 
            bill.items.each { 
                it.pay    = false
                it.amount = 0.0
            }
            listHandler.load()
            calculateReceiptAmount()
        }
        
        void fullPayment() {
            if( bill == null || !bill.items) return 
            loadBill()
            listHandler.load()
            calculateReceiptAmount()
        }
        
        void calculateReceiptAmount() {
            entity.info.amount = bill.items.amount.sum()
            def payments = []
            payments.addAll( entity.payments )
            updatePaymentInfo( payments )
            binding.refresh('entity.info.amount|entity.info.totalpayment|entity.info.change')
        }
        
        def getAssessedvalue() {
            if( selectedItem ) {
                return (new DecimalFormat('#,##0.00')).format( selectedItem.assessedvalue )
            }
            return ''
        }
        
        
        /*================================================================================================
        *
        * Remote Collection Support 
        *
        ================================================================================================*/
        def remotedomain
        def itemrecalculated = false 
        
        def taskmgr 
        def timertask
        boolean displaymsg = false
        def stopped = false
        def msg 
        
        def ontimer = {
            if( ! stopped ) {
                updateRemoteMessage()
                manualRefresh()
            }
        }
        
        void updateRemoteMessage() {
            if( displaymsg ) {
                displaymsg = false
                showError('')
            }
            else {
                displaymsg = true
                showError( msg )
            }
        }
        
        void sendRemoteBillingRequest() {
            if( ! remotedomain ) {
                binding.focus('remoteadmin')
                throw new Exception('LGU is required.')
            }
            bill = createBill()
            svc.sendRemoteBillingRequest( payor.objid, remotedomain, bill )
            
            msg = 'Sending request to ' + remotedomain.domainname + ' server. Please wait...' 
            
            taskmgr = new TaskManager()
            timertask = new TTimerTask( ontimer : ontimer, sleeptime:1000)
            taskmgr.addTask( timertask )
            taskmgr.start()   
            
        }
        
        void processBillToRemote( item ) {
            return 
            /*
            def newbill = createBill()
            newbill.ledgerids.add( item.objid )
            newbill.billtoyear = item.toyear
            newbill.billtoqtr  = item.toqtr 
            newbill.fullpayment = ( item.toyear == parsedate.year && item.toqtr == 4 )
            newbill.qtrlypaymentavailed = ( item.toqtr != 4 )
            newbill.advancepayment  = (item.toyear > parsedate.year )
            itemrecalculated = true 
            svc.sendRemoteBillingRequest( payor.objid, remotedomain, newbill )
            */
        }
        
        List getRemoteDomainList() {
            return svc.getRemoteDomainList()
        }
        
        void manualRefresh() {
            response = billingSvc.getRemoteResponse( bill.sessionid )
            if( ! response ) return 

            def status = response.status
            if( status.iserror ) {
                msg = status.errormsg 
                updateRemoteMessage()
                stopTimer( msg )
            }
            else {
                def newbill = response.data.bill 
                if( ! newbill ) return 
                billingSvc.deleteRemoteGeneratedBill( bill.sessionid )

                newbill.items.each { 
                    it.pay    = true 
                    it.amount = it.total
                }
                if( ! bill ) {
                    bill = newbill 
                }
                else if( itemrecalculated )  {
                    updateRecalculatedItem( newbill )
                    itemrecalculated = false 
                }
                else {
                    bill.items.addAll( newbill.items )
                }
                listHandler.load()
                calculateReceiptAmount()
                binding.fireNavigation('remote')
                msg = ''
                updateRemoteMessage()
                stopTimer('')
            }
        }
        
        void updateRecalculatedItem( newbill ) {
            def newitem = newbill.items[0]
            if( !newitem )  throw new Exception('Cannot process bill for this item.')
            
            def toyear = item.toyear
            def toqtr = item.toqtr
            
            item.details.clear()
            item.putAll( newitem )
            item.toyear = toyear
            item.toqtr  = toqtr 
            item.pay = true
            item.amount = newitem.total
            calculateReceiptAmount()
        }
        
        void stopTimer( msg ) {
            stopped = true 
            displaymsg = true 
            timertask.setCancelled( true )
            timertask.setEnded( true )
            taskmgr?.removeTask( timertask )
            taskmgr?.stop()
            taskmgr = null
            showError( msg )
        }
        
        def cancelWait(){
           stopTimer()
           back()
           return null
        }
        
        
        
        
        /*----------------------------------------------------------------------
        *
        * Partial Payment Support 
        *
        *------------------------------------------------------------------------*/
        
        def partialPayment() {
            if( !selectedItem ) return 
            return InvokerUtil.lookupOpener('rptpartialpayment', [
                amount    : selectedItem.amount,
                onpartial : { partial ->
                    def partialitem = billingSvc.computePartialPayment( selectedItem, partial)
                    def item = bill.items.find{ it.objid == partialitem.objid }
                    if( item ) { 
                        item.clear() 
                        item.putAll( partialitem )
                    }
                    listHandler.load()
                    calculateReceiptAmount()
                }
                
            ])
        }
    }    



]]>        
    </code>
    <pages>
        <page name="init" template="etracs2.rpt.collection.RPTReceiptInitPage" />
        <page name="main" template="etracs2.rpt.collection.RPTReceiptPage" />
        <page name="bytd" template="etracs2.rpt.collection.RPTReceiptByTDPage" />
        <page name="remote" template="etracs2.rpt.collection.RPTReceiptByRemotePage" />
        <page name="wait" template="etracs2.rpt.collection.WaitPage" />
        <page name="view" template="etracs2.tc.collection.CollectionViewPage"/>
        <page name="html" template="etracs2.tc.HtmlPage"/>
    </pages>
    
</workunit>