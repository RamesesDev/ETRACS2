<?xml version="1.0" encoding="UTF-8"?>
<workunit>
        <invoker type="rptsetting.create" action="createItem" caption="Create RPT Setting" mnemonic="c" icon="images/addnew24.png" target="popup"/>
        <invoker type="rptsetting.open" action="openItem" caption="Edit RPT Setting" mnemonic="e" icon="images/addnew24.png" target="popup"/>
        
        <invoker type="formActions" action="_close" shortcut="ctrl C" immediate="true" caption="Close" mnemonic="c" icon="images/addnew24.png" />
        <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view'}" caption="Save" mnemonic="s" icon="images/save24.png"/>
    
    <code lang="groovy">
        <![CDATA[
        
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import java.rmi.server.UID;
        
        public class RPTSettingController {
            @Binding
            def binding;
            
            @Service("RPTSettingService")
            def svc;
            
            @Service('DateService')
            def svcDate;
            
            def entity;
            def mode = "view";
            def selectedItem;
            
            /*---------------------------------------------------------------------
            * FormAction Support
            ---------------------------------------------------------------------*/
            def createItem() {
                mode = "create"; 
                entity = createEntity();
                
                return "new";
            }

            void openItem() {
                mode = "edit";
                entity = svc.open();
            }

            
            /*---------------------------------------------------------------------
            * Main
            ---------------------------------------------------------------------*/
            
            def createEntity(){
                return [
                    ry                          : svcDate.getServerDate(),
                    approvedmvbelow             : 0.0,
                    allowlandcancellation       : 0,
                    roundadjmarketvalue         : 0,
                    agriculturaltitle           : "",
                    adjustplanttree             : 0,
                    allowtransferwithbalance    : 0,
                    allowcorrectionwithbalance  : 1,
                    allowdepreciationwithbalance: 1,
                    allowchangetaxabilitywithbalance : 1,
                    allowsubdivisionwithbalance : 1,
                    allowconsolidationwithbalance : 1,
                    allowreclasswithbalance     : 1,
                    usenewtdprintout            : 1,
                    landreportbasedonactualuse  : 1,
                    propertyclassifications     : []
                ];
            }
            
            def getPropertyClassifications(){
                return entity?.propertyclassifications;
            }
            
            void save(){
                if( mode == 'create' ) svc.create( entity );
                else svc.update( entity );
                
                MsgBox.alert( "Settings saved." );
                binding.refresh("entity.*");
            }
            
            def lookupAgricultural(){
                return InvokerUtil.lookupOpener("propertyclass:lookup",[onselect:selectAgricultural]);
            }
            
            def selectAgricultural = { agri ->
                entity.agriculturalid = agri.objid;
                entity.agriculturaltitle = agri.propertydesc;
                binding.refresh("entity.*");
            }
            
            def add(){
                def opener = InvokerUtil.lookupOpener("propertyclass:lookup",[onselect:selectPropertyclass]);
                return opener;
            }
            
             def selectPropertyclass = { property ->
                entity.propertyclassifications.add( [
                    objid           : property.objid,
                    propertycode    : property.propertycode,
                    propertydesc    : property.propertydesc
                ]);
                
                binding.refresh("entity.*");
            }
            
            void remove(){
                entity.propertyclassifications.remove( selectedItem );
            }

           
        }
        
        
        ]]>
    </code>
    
    <pages>
        <page name="new" template="etracs2.rpt.master.rptsetting.RPTSettingPage" />
    </pages>
</workunit>
