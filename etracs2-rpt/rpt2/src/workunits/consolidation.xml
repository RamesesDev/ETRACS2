<?xml version="1.0" encoding="UTF-8"?>
<!--
// author    : jzamora
// copyright : Rameses Systems Inc
// date      : 07 Jul 2011
-->
<workunit>
    <invokers>
        <invoker type="rpttransaction" folderid="/menu/rpt/txn" action="initConsolidation" caption="Consolidation" target="window" permission="consolidation.view" index="302"/>
        <invoker type="rpttransaction.initConsolidation" action="initConsolidation" caption="Consolidation" target="window" />
        
        <invoker type="consolidation.create" action="init" caption="New" mnemonic="n" shortcut="ctrl N" target="window" icon="images/doc-new.png" permission="consolidation.view" />
        <invoker type="consolidation.open" action="open" caption="Open" mnemonic="o" shortcut="ctrl O" target="window" icon="images/open.png" permission="consolidation.view" />
        
        <invoker type="formActions" action="update" shortcut="ctrl S" visibleWhen="#{consolidation.docstate == 'DRAFT' or consolidation.docstate == 'FORAPPROVAL'}" caption="Save" mnemonic="s" icon="images/save.png" permission="consolidation.update" />
        <invoker type="formActions" action="edit" shortcut="ctrl E" visibleWhen="#{consolidation.docstate == 'DRAFT' or consolidation.docstate == 'FORAPPROVAL'}" caption="Edit Consolidated FAAS" mnemonic="e" icon="images/edit.png" permission="consolidation.edit" />
        <invoker type="formActions" action="submit" shortcut="ctrl M" visibleWhen="#{consolidation.docstate == 'DRAFT'}" caption="Submit For Approval" mnemonic="m" icon="images/doc-submit.png" permission="consolidation.submit" />
        <invoker type="formActions" action="remove" shortcut="ctrl D" visibleWhen="#{consolidation.docstate == 'DRAFT' }" immediate="true" caption="Delete" mnemonic="d" icon="images/cancel.png" permission="consolidation.remove" />
        <invoker type="formActions" action="disapprove" visibleWhen="#{showDisapproveAction == true}" caption="Disapprove" icon="images/disapprove.png" permission="consolidation.disapprove" />
        <invoker type="formActions" action="approve" shortcut="ctrl A" visibleWhen="#{showApproveAction == true}" caption="Approve" mnemonic="a" icon="images/approve.png" permission="consolidation.approve" />
        <invoker type="formActions" action="submitToProvince" shortcut="ctrl M" visibleWhen="#{showSubmitToProvinceAction == true}" caption="Submit To Province" mnemonic="m" icon="images/doc-submit.png" permission="consolidation.submitToProvince" />
        <invoker type="formActions" action="disapproveByProvince" visibleWhen="#{showDisapproveByProvinceAction == true}" caption="Disapprove" icon="images/disapprove.png" permission="consolidation.disapproveByProvince" />
        <invoker type="formActions" action="approveByProvince" shortcut="ctrl A" visibleWhen="#{showApprovedByProvinceAction == true}" caption="Approve" mnemonic="a" icon="images/approve.png" permission="consolidation.approveByProvince" />
        <invoker type="formActions" action="viewTaxdeclaration" shortcut="ctrl V" visibleWhen="#{consolidation.docstate == 'APPROVED'}" caption="View Taxdeclarations" mnemonic="a" icon="images/doc-view.png"/>
        
        <invoker type="realpropertyActions" action="validateRealProperty" caption="Next" mnemonic="n" icon="images/next.png" permission="consolidation.view" />
        
        <invoker type="landActions" action="backToPinPage" caption="Back" mnemonic="b" icon="images/back.png" />
        <invoker type="landActions" action="updateLand" caption="Next" mnemonic="n" icon="images/next.png" permission="consolidation.updateland" />
        
    </invokers>
    <code lang="groovy">
        
<![CDATA[
import com.rameses.rcp.annotations.* 
import com.rameses.rcp.common.* 
import com.rameses.osiris2.client.* 
import java.text.DecimalFormat;

public class ConsolidationController
{
    @Binding
    def binding
    
    @Service('ConsolidationService')
    def svc
    
    @Service('FAASService')
    def faasSvc
    
    @Service('Var')
    def var 
    
    def consolidation
    def consolidatedlands
    def affectedrpus
    def rp
    def errorMsg
    
    def barangay 
    def section = 0
    def parcel  = 0
    def mode 
    
    
    def initConsolidation() {
        consolidation       = svc.initConsolidation()
        rp                  = consolidation.rp
        affectedrpus        = []
        consolidatedlands   = []
        mode = 'create' 
        return 'rp' 
    }
    
    
    void open() {
        consolidation       = svc.open( consolidation.objid )
        rp                  = consolidation.rp 
        consolidatedlands   = svc.getConsolidatedLands( consolidation.objid )
        affectedrpus        = svc.getAffectedRpus( consolidation.objid )
        taxpayername        = consolidation.newtaxpayername 
        barangay            = getBarangays().find{ it.indexno == rp.barangayindex }
        section             = parseInt( rp.section )
        parcel              = parseInt( rp.parcel )
        mode = 'open' 
    }
    
    void update() {
        svc.update( consolidation )
    }
    
    def edit() {
        return 'rp' 
    }
    
    void submit() {
        if( MsgBox.confirm('Submit for approval?') ) {
            svc.update( consolidation )
            consolidation = svc.submit( consolidation.objid )
        }
    }
    
    void approve() {
        if( MsgBox.confirm('Approve consolidation?') ) {
            consolidation = svc.approve( consolidation.objid )
        }
    }
    
    void disapprove() {
        if( MsgBox.confirm('Disapprove consolidation?') ) {
            consolidation = svc.disapprove( consolidation.objid )
        }
    }
    
    void submitToProvince() {
        if( MsgBox.confirm('Submit to province?') ) {
            consolidation = svc.submitToProvince( consolidation.objid )
        }
    }
    
    void approveByProvince() {
        if( MsgBox.confirm('Approve?') ) {
            consolidation = svc.approveByProvince( consolidation.objid )
        }
    }
    
    void disapproveByProvince() {
        if( MsgBox.confirm('Disapprove consolidation?') ) {
            consolidation = svc.disapproveByProvince( consolidation.objid )
        }
    }
    
    def remove() {
        if( MsgBox.confirm('Delete record?') ) {
            svc.remove( consolidation.objid )
            return '_close'
        }
        return 'default' 
    }
    
    
    /*----------------------------------------------------------
    *
    * Consolidation support
    *
    ----------------------------------------------------------*/
    def opener 
    def getOpener() {
        if( ! opener ) {
            def faas = [docstate:consolidation.docstate, info:[txntype:consolidation.txntype]]
            opener = InvokerUtil.lookupOpener('rpu.land', [faas:faas, rpu:consolidation.rpu ] )
        }
        return opener 
    }
    
    def backToPinPage() {
        return 'rp'
    }   
    
    def validateRealProperty() {
        rp.putAll( svc.validateRealProperty( rp, section, parcel ) )
        consolidation.newpin = rp.pin
        return 'land' 
    }
    
    def updateLand() {
        consolidation.areasqm = opener.handle.rpu.totalareasqm
        consolidation.areaha  = opener.handle.rpu.totalareaha
        if( mode == 'create' ) {
            consolidation = svc.create( consolidation )
        }
        else {
            svc.update( consolidation )
        }
        mode = 'open' 
        return 'default' 
    }
    
    
    
    /*----------------------------------------------------------
    *
    * ConsolidatedLand support
    *
    ----------------------------------------------------------*/
    def selectedLand
    
    def getLookupFaas() {
        return InvokerUtil.lookupOpener('faas.lookup', [:] )
    }
    
    def landListHandler = [
        createItem  : { return [consolidationid:consolidation.objid] },
        getRows     : { return 25 },
        getColumns  : { return [
            new Column(name:'faas', caption:'TD No.*', handler:lookupFaas, editable:true, type:'lookup', expression:'#{tdno}'),
            new Column(name:'pin', caption:'PIN'),
            new Column(name:'areasqm', caption:'Area (Sqm)', type:'decimal', format:'#,##0.00'),
            new Column(name:'areaha', caption:'Area (Ha)', type:'decimal', format:'#,##0.000000'),
        ]},
        validate     : { li -> validateConsolidatedLand( li.item ) },
        onRemoveItem : { item ->
            if( MsgBox.confirm('Delete selected item?') ) {
                svc.removeConsolidatedLand( item  )
                def ritem = consolidatedlands.find{ it.objid == item.objid }
                if( ritem ) consolidatedlands.remove(  ritem   ) 
                def arpus = affectedrpus.findAll{ it.landfaasid == item.landfaasid }
                affectedrpus.removeAll( arpus )
                affectedrpuListHandler.load()
            }
        }, 
        onAddItem    : { item -> 
            item.putAll( svc.createConsolidatedLand( item ) )
            affectedrpus.addAll( svc.createConsolidatedLandAffectedRpus( item ) )
            consolidatedlands.add( item )
            affectedrpuListHandler.load()
        },
        fetchList  : { return consolidatedlands },
    ] as SubListModel
    
    void validateConsolidatedLand( item ) {
        try {
            if( ! item.faas ) throw new Exception('TD No. is required.')
            if( item.faas.rputype != 'land' ) throw new Exception('Only land properties are allowed.') 
            if( item.faas.docstate != 'CURRENT' ) throw new Exception('Only current FAAS is allowed.')
            checkDuplicateLand( item )
            item.landfaasid = item.faas.objid 
            item.tdno       = item.faas.tdno
            item.pin        = item.faas.fullpin
            item.taxpayerid = item.faas.taxpayerid
            item.taxpayername = item.faas.taxpayername 
            item.mv         = item.faas.totalmv
            item.av         = item.faas.totalav
            item.areasqm    = item.faas.totalareasqm
            item.areaha     = item.faas.totalareaha
            if( item.objid ) {
                svc.updateConsolidatedLand( item )
            }
        }
        catch( e ) {
            e.printStackTrace()
            showError( e )
        }
    }
    
    void checkDuplicateLand( item ) {
        def dup = consolidatedlands.find{ it.objid != item.objid && it.landfaasid == item.faas.objid }
        if( dup ) throw new Exception('Duplicate land not allowed.')
    }
    
    void showError(e ) {
        errorMsg = e.message
        binding.refresh( 'errorMsg' )
        throw e 
    }
    
    
    /*----------------------------------------------------------
    *
    * AffectedRPU support
    *
    ----------------------------------------------------------*/
    def selectedAffectedRpu
    
    def affectedrpuListHandler = [
        getRows    : { return 50 },
        getColumns : { return [
            new Column( name:'rputype', caption:'Type', maxWidth:60 ),
            new Column( name:'prevfullpin', caption:'PIN', maxWidth:150),
            new Column( name:'prevtdno', caption:'TD No.', maxWidth:120),
            new Column( name:'newtdno', caption:'New TD No.', maxWidth:120, editable:true),
            new Column( name:'newsuffix', caption:'New Suffix', type:'integer', format:'0000', maxWidth:120, editable:true),
            new Column( name:'memoranda', caption:'Memoranda*', editable:true),
        ]},
        validate  : { li -> validateAffectedRpu( li.item ) },
        onColumnUpdate : {item, colname ->  checkDuplicateSuffix( colname, item ) },
        fetchList : { return affectedrpus },
    ] as SubListModel
    
    
    void checkDuplicateSuffix( colname, item ) {
        if( colname != 'newsuffix' ) return 
        try {
            def arpu = affectedrpus.find{ it.objid != item.objid && it.rputype == item.rputype && it.newsuffix == item.newsuffix }
            if( arpu ) throw new Exception('Duplicate suffix for ' + item.rputype + ' property is not allowed.')
        }
        catch( e ) {
            showError( e )
        }
    }
    
    
    void validateAffectedRpu( item ) {
        try {
            svc.updateAffectedRpu( item )
        }
        catch( e ) {
            showError( e) 
        }
    }
    
    
    
    /*-----------------------------------------------------------------------------
    *
    * Lookup and LIst Support 
    *
    -----------------------------------------------------------------------------*/
    def taxpayername 
    
    def lookupTaxpayer() {
        return InvokerUtil.lookupOpener('entity.lookup', [
            searchText : taxpayername,
            onselect   : { entity ->
                consolidation.newtaxpayerid     = entity.objid
                consolidation.newtaxpayerno     = entity.entityno
                consolidation.newtaxpayername   = entity.entityname
                consolidation.newtaxpayeraddress= entity.entityaddress
                taxpayername = entity.entityname 
                binding.refresh('taxpayername|consolidation.newtaxpayeraddress')
            }
        ])
    }
    
    def lookupAppraiser() { 
        return InvokerUtil.lookupOpener('rptofficers.lookup', [
            searchText  : consolidation.appraisedby, 
            officerType : 'APPRAISER',
            onselect    : { officer ->
                consolidation.appraisedbyid    = officer.objid
                consolidation.appraisedby      = officer.name
                consolidation.appraisedbytitle = officer.title 
                binding.refresh( 'consolidation.appraisedby' )
            }
        ])
    }
    
    def lookupRecommender() {
        return InvokerUtil.lookupOpener('rptofficers.lookup', [
            searchText  : consolidation.recommendedby, 
            officerType : 'RECOMMENDER',
            onselect    : { officer ->
                consolidation.recommendedbyid    = officer.objid
                consolidation.recommendedby      = officer.name
                consolidation.recommendedbytitle = officer.title 
                binding.refresh( 'consolidation.recommendedby' )
            }
        ])
    }

    def lookupApprover() {
        return InvokerUtil.lookupOpener('rptofficers.lookup', [
            searchText  : consolidation.approvedby, 
            officerType : 'APPROVER',
            onselect    : { officer ->
                consolidation.approvedbyid    = officer.objid
                consolidation.approvedby      = officer.name
                consolidation.approvedbytitle = officer.title 
                binding.refresh( 'consolidation.approvedby' )
            }
        ])
    }
    
    void setBarangay( barangay ) {
        this.barangay = barangay 
        if( barangay ) {
            rp.putAll( svc.updatePinInfo( rp, barangay ) )
        }
    }
    
    
    def getQuarterList() {
        return [1,2,3,4]
    }
    
    def brgyList
    
    List getBarangays(){ 
        if( ! brgyList ) {
            brgyList = faasSvc.getBarangays() 
        }
        return brgyList 
    }
    
    
    /*----------------------------------------------------------
    *
    * Toolbar support
    *
    ----------------------------------------------------------*/
    boolean getShowApproveAction() {
        if( consolidation.rp.lgutype?.toLowerCase() != 'city'  ) return false
        if( consolidation.docstate != 'FORAPPROVAL' ) return false
        return true
    }
    
    boolean getShowDisapproveAction() {
        if( consolidation.lgutype?.toLowerCase() != 'city'  ) return false
        if( consolidation.docstate != 'FORAPPROVAL' ) return false
        return true
    }
    
    boolean getShowSubmitToProvinceAction() {
        if( consolidation.rp.lgutype?.toLowerCase() != 'municipality'  ) return false
        if( consolidation.docstate != 'FORAPPROVAL' ) return false
        return true 
    }
    
    boolean getShowApprovedByProvinceAction() {
        if( consolidation.rp.lgutype?.toLowerCase() != 'municipality'  ) return false
        if( consolidation.docstate != 'FORPROVAPPROVAL' ) return false
        return true
    }
    
    boolean getShowDisapproveByProvinceAction() {
        if( consolidation.rp.lgutype?.toLowerCase() != 'municipality'  ) return false
        if( consolidation.docstate != 'FORPROVAPPROVAL' ) return false
        return true
    }
    
    def getTotalareasqm() {
        return formatNumber( consolidatedlands.areasqm.sum() )        
    }
    
    def getTotalareaha() {
        return formatNumber( consolidatedlands.areaha.sum() )        
    }
    
    def formatNumber( value ) {
        try {
            return (new DecimalFormat('#,##0.000000')).format( value )
        }
        catch( e ) {
            return '0.000000'
        }
    }
    
    boolean getAllowEdit() {
        if( consolidation.docstate == 'FORPROVAPPROVAL' ) return false
        if( consolidation.docstate == 'APPROVED' ) return false
        return true
    }
    
    def parseInt( val ) {
        try {
            return Integer.parseInt( val + '') 
        }
        catch( e ) {
            return 0
        }
    }
    
    def viewTaxdeclaration(){
        def list = []
        list << [tdno:consolidation.newtdno, objid:consolidation.newfaasid];
        affectedrpus.each{ list << [tdno: it.newtdno, objid: it.newfaasid] }
        return InvokerUtil.lookupOpener('batchtd.report', [faaslist:list])
    }
}

]]>
    </code>
    
    <pages>
        <page template="etracs2.rpt.txn.consolidation.ConsolidationPage" />
        <page name="rp" template="etracs2.rpt.txn.consolidation.ConsolidationPINPage" />
        <page name="land" template="etracs2.rpt.txn.consolidation.ConsolidationLandPage" />
    </pages>
</workunit>

