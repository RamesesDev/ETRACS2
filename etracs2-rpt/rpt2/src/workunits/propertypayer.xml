<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invoker folderid="/menu/rpt/txn" action="init" caption="Property Payers" index="11" permission="propertypayer.view" />
    <invoker type="home.action" action="init" caption="Property Payers" index="203" target="window" icon="images/folder.png" permission="propertypayer.view" />

    <invoker type="formActions" action="create" shortcut="ctrl N" visibleWhen="#{mode == 'view'}" immediate="true" caption="New" mnemonic="n" icon="images/doc-new.png" />
    <invoker type="formActions" action="edit" shortcut="ctrl E" visibleWhen="#{mode == 'view' and entity.objid != null }" immediate="true" caption="Edit" mnemonic="e" icon="images/edit.png" />
    <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view'}" caption="Save" mnemonic="s" icon="images/save.png" />
    <invoker type="formActions" action="cancel" visibleWhen="#{mode != 'view'}"  immediate="true" caption="Cancel" mnemonic="c" icon="images/cancel.png" />
    <invoker type="formActions" action="delete" shortcut="ctrl D" visibleWhen="#{mode == 'view' and entity.objid != null}" immediate="true" caption="Delete" mnemonic="d" icon="images/doc-delete.png" />
    
    <code lang="groovy">
        <![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import java.rmi.server.UID;

public class PropertyPayersController  extends etracs2.groovy.CRUDController  {
    
    @Service("PropertyPayerService")
    def svc;

    def getService() { return svc; }
    def getCreateFocusComponent() { return "taxpayer"; }
    def getEditFocusComponent() { return "taxpayer"; }
    def getListHandler() { return listHandler; }

    
    def taxpayer
    def selectedProperty
    def errorMsg 
    
    
    void open( objid ) {
        super.open( objid )
        taxpayer = [ 
            objid        : entity.taxpayerid,
            entityname   : entity.taxpayername,
            entityadress : entity.taxpayeraddress,
        ]
        propertyListHandler.load()
        clearMsg()
    }
    
    def createEntity() {
        taxpayer = [:]
        return [
            objid  :'P' + new UID(),
            _items  : [] 
        ]
    }
    
    def getLookupEntity() {
        return InvokerUtil.lookupOpener('entity.lookup', [:] )
    }

    void setTaxpayer( taxpayer ) {
        this.taxpayer = taxpayer
        entity.taxpayerid       = taxpayer?.objid
        entity.taxpayername     = taxpayer?.entityname
        entity.taxpayeraddress  = taxpayer?.entityaddress 
    }
    
    
    def getLookupLedger() {
        return InvokerUtil.lookupOpener( 'rptledger.lookup', [docstate:'APPROVED'] )
    }

    def propertyListHandler = [
        createItem : { return [
            objid           : 'PP' + new UID(), 
            propertypayerid : entity.objid
        ]},
        getRows    : { return 20; },
        getColumns : { return [
            new Column(name:'ledger', caption:'TD No.*', editable:true, type:'lookup', handler:lookupLedger, expression:'#{tdno}' ),
            new Column(name:'taxpayername', caption:"Declared Owner"),
            new Column(name:'taxpayeraddress', caption:"Address"),
            new Column(name:'classification', caption:"Class" ),
            new Column(name:'fullpin', caption:"PIN" ),
            new Column(name:'cadastrallotno', caption:"Cadastral Lot No." ),
            new Column(name:'assessedvalue', caption:"Assessed Value"),
        ]},
        onColumnUpdate : { item, colName -> updateInfo( item )},
        onAddItem      : { item -> entity._items.add( item ) },
        onRemoveItem : { item -> 
            if( MsgBox.confirm("Remove selected item?") ) {
                svc.removeItem( item )
                entity._items.remove( item )
                clearMsg()
            }
        },
        validate  : { li -> validateInfo( li.item ) },
        fetchList : { return entity._items },
    ] as SubListModel;

    void updateInfo( item ) {
        item.ledgerid           = item.ledger?.objid
        item.taxpayername       = item.ledger?.taxpayername
        item.taxpayeraddress    = item.ledger?.taxpayeraddress
        item.classification     = item.ledger?.classcode
        item.fullpin            = item.ledger?.fullpin
        item.cadastrallotno     = item.ledger?.cadastrallotno
        item.assessedvalue      = item.ledger?.assessedvalue
    }

    void validateInfo( item ){
        try {
            updateInfo( item )
            required( 'TD No.', item.ledger )
            checkDuplicate( item )
            if( entity.taxpayerid && entity.taxpayerid == item.ledger?.taxpayerid ) {
                throw new Exception('Property is already owned by this ' + entity.taxpayername )
            }
            if( mode != 'create' ) {
                svc.saveItem( item )
            }
            clearMsg()
        }
        catch( e ) {
            e.printStackTrace()
            errorMsg = e.message
            binding.refresh( 'errorMsg' )
            throw e 
        }
    }
    
    void clearMsg() {
        errorMsg = null
        binding.refresh( 'errorMsg' )
    }

    void checkDuplicate( item ){
        def ledger = entity._items.find{ it.objid != item.objid && it.ledgerid == item.ledgerid }
        if( ledger ){ 
            throw new Exception('Duplicate item is not allowed.');
        }
    }

    void required( caption, value ) {
        if( !value ){ 
            MsgBox.alert(caption + ' is required.');
            throw new Exception( caption + ' is required.');
        }
    }

    
    
    /* -------------------------------------------------------------------
    *
    * List support
    *
    *-------------------------------------------------------------------*/
    def listHandler = [
        getColumns : { return [
            new Column(name:"taxpayername", caption:"Taxpayer Name"),
            new Column(name:"taxpayeraddress", caption:"Address")
        ]},
        fetchList : { return list },
    ] as SubListModel

}
        


        
        ]]>
    </code>
    
    <pages>
        <page template="etracs2.rpt.txn.propertypayer.PropertyPayerPage" />
    </pages>
</workunit>
