<?xml version="1.0" encoding="UTF-8"?>
<workunit>
        <invoker type="structuretemplate.create" action="createItem" caption="Create Structure Template" mnemonic="c" icon="images/doc-new.png" target="popup"/>
        <invoker type="structuretemplate.open" action="openItem" caption="Edit Structure Template" mnemonic="e" icon="images/edit.png" target="popup"/>
        
        <invoker type="formActions" action="_close" shortcut="ctrl C" immediate="true" caption="Close" mnemonic="c" icon="images/cancel.png" />
        <invoker type="formActions" action="edit" shortcut="ctrl E" visibleWhen="#{mode == 'view' and entity.objid != null }" immediate="true" caption="Edit" mnemonic="e" icon="images/edit.png" />
        <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view'}" caption="Save" mnemonic="s" icon="images/save.png"/>
    
    <code lang="groovy">
        <![CDATA[
        
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import java.rmi.server.UID;
        
        public class StructureTemplateController  {
            @Binding
            def binding
            
            @Service("StructureTemplateService")
            def svc;
            
            def structures;
            def mode = "view" ;
            def entity;
            
            /*---------------------------------------------------------------------
            * FormAction Support
            ---------------------------------------------------------------------*/
            def createItem() {
                mode = 'create';
                entity = createEntity();
                
                return "new";
            }

            void openItem() {
                mode = "view";
                entity = svc.open();
            }

            
            /*---------------------------------------------------------------------
            * Main
            ---------------------------------------------------------------------*/
            
            def createEntity() {
                return [
                    structures : [],
                ];
            }
            
            def lookupStructures = InvokerUtil.lookupOpener("structures:lookup",[:]);
            
            def structuresHandler = [
                getRows    : { return 20; },
                getColumns : {
                    return [
                        new Column(name:"structure", caption:"Code", minWidth:50, editable:true, type:"lookup", handler:lookupStructures, expression: '#{structurecode}'),
                        new Column(name:"structuredesc", caption:"Structure", minWidth:200, editable:false)
                    ];
                },
                fetchList : { 
                    return entity.structures; 
                },
                createItem : { return [:]; },
                validate       : { li -> validateStructure( li.item ) },
                onAddItem : { item ->
                    updateStructures( item );
                    entity.structures.add( item );
                },
                onColumnUpdate : { item, colName ->
                    if( colName == 'structure' ) {
                        updateStructures( item );
                    }
                },
                onRemoveItem : { item -> 
                    if( mode == "view" ) return false;
                    if( MsgBox.confirm("Remove selected item?") ) {
                        entity.structures.remove( item );
                    }
                },
            ] as SubListModel;
            
            void updateStructures( item ){
                item.objid = item.structure.objid;
                item.structurecode = item.structure.structurecode;
                item.structuredesc = item.structure.structuredesc;
                item.structure.remove('materials');
            }
            
            void validateStructure( item ){
                required( 'Code', item.structure );
                checkDuplicate( item );
            }
            
            void checkDuplicate( item ){
                def data = entity.structures.find{ it.objid == item.objid }
                if( data ){ 
                    MsgBox.alert('Duplicate not allowed!');
                    throw new Exception('Duplicate not allowed!');
                }
            }
            
            void save(){
                if( mode == 'create' ) svc.create( entity );
                else svc.update( entity );
                
                mode = 'view';
                MsgBox.alert( "Settings saved." );
                binding.refresh("entity.*");
            }
            
            void edit(){
                mode = "edit";
                focus( "entity.structurecode" );
            }
            
            void focus( name ) {
                binding.refresh("entity.*");
                binding.focus( name );
            }
            
            void required( caption, value ) {
                if( !value ){ 
                    MsgBox.alert( caption + ' is required.')
                    throw new Exception( caption + ' is required.')
                }
            }
        }
        
        
        ]]>
    </code>
    
    <pages>
        <page name="new" template="etracs2.rpt.master.structures.StructureTemplatePage" />
    </pages>
</workunit>
