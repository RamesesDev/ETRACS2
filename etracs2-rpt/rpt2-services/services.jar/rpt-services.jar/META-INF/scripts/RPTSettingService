import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class RPTSettingService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
	def logService
	
	def schemaname = 'rptsetting:rptsetting';
	def schemaversion = '1.0';
	
	@ProxyMethod
	public def getList( searchText ) {
		if( !searchText ) return em.sqlContext.createQuery('SELECT * FROM rptsetting').resultList;
		
		return [];
	}
	
	@ProxyMethod
	public def open(){
		def o = em.sqlContext.createQuery( 'SELECT objid FROM rptsetting' ).singleResult;
		if( o ) return em.read( schemaname, o );
		
		return null;
	}
	
	@ProxyMethod
	public def create( rptsetting ){
		rptsetting.objid = 'RPTSET' + new UID();
		rptsetting.schemaname = schemaname;
		rptsetting.schemaversion = schemaversion;
		rptsetting.ry = Integer.parseInt( rptsetting.ry );
		
		validate( rptsetting );
		em.create( rptsetting.schemaname, rptsetting );
		
		return rptsetting;
	}
	
	@ProxyMethod
	public def update( rptsetting ){
		rptsetting.ry = Integer.parseInt( rptsetting.ry );
		
		validate( rptsetting );
		em.update( rptsetting.schemaname, rptsetting );
		
		return rptsetting;
	}
	
	private void validate( rptsetting ){
		def oldsetting = em.read(rptsetting.schemaname, rptsetting);
		util.validateLastUpdate( rptsetting, oldsetting );	
		
		em.validate( rptsetting.schemaname, rptsetting );
	}
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
}
