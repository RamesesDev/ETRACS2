import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class FaasReportService
{
	@PersistenceContext('main')
	def em
	
	@Service('NumberService')
	def numberSvc
	
	@ProxyMethod
	public def getReportData( faasid ) {
		def faasdata = [:]
		def faas = em.read('faas', [objid:faasid])
		if( !faas ) throw new Exception('Cannot open FAAS with ID No. ' + faasid + '.')
		
		faasdata.putAll( faas.info )
    	faasdata.putAll( faas.rp )
    	faasdata.putAll( faas.rpu )
		faasdata.taxeffectivity = faas.info.effectivityqtr + "Q - " + faas.info.effectivityyear
		faasdata.taxability = ( faasdata.info.taxable ? "TAXABLE" : "EXEMPT" )
		
		if( faas.rpu.rputype == 'land' ) {
			faasdata.landappraisals = getLandDetails( faas.rpu )
			faasdata.planttreesappraisals = getPlantTreeDetails( faas.rpu )
			faasdata.landadjustments = getLandAdjustments( faas.rpu )
			faasdata.propertyassessments = getPropertyAssessements( faas.rpu )
		} else if( faas.rpu.rputype == 'mach' ) {
			getLandOwnerInfo( faasdata )
			faasdata.machdetails = getMachDetails( faas.rpu )
			faasdata.propertyappraisals = getPropertyAppraisals( faas.rpu )
			faasdata.propertyassessments = getMachPropertyAssessments( faas.rpu )
		} else 
			throw new Exception( 'There is no FAAS report for this record yet.' )
			
		return faasdata
	}
	
	private def getLandDetails( rpu ) {
    	def data = []
		def landdetails = rpu.info.landdetails
		
		landdetails.each {
			def item = [
				classification	: rpu.classname,
				subclass		: it.subclassname,
				actualuse 		: it.actualusename,
				area			: ( it.areatype == 'HA' ? it.areaha : it.areasqm ),
				unitvalue		: it.unitvalue,
				basemarketvalue	: it.basemarketvalue,
				areatype		: it.areatype
			]
			
			data.add( item )
		}
		
		return data
    }
	
	private def getPlantTreeDetails( rpu ) {
    	def data = []
		def planttreedetails= []
    	if( rpu.info.planttrees ) 
			planttreedetails = rpu.info.planttrees
		else 
			planttreedetails = rpu.info.planttreedetails
			
		planttreedetails.each {
			def item = [
				subclass	 	: rpu.classname,
				nonbearing		: it.nonbearing,
				bearing			: it.bearing,
				unitvalue		: it.unitvalue,
				basemarketvalue	: it.basemarketvalue
			]
			
			data.add( item )
		}
		
		return data
    }
	
	private def getLandAdjustments( rpu ) {
		def data = []
		def landdetails = rpu.info.landdetails
		def adjpercentage
		def percentadj
		def item
		
		landdetails.each { itm ->
			itm.landadjustments?.each {
				adjpercentage = ''
				
				if(itm.basemarketvalue != 0.00) {
					percentadj = (it.adjustment / itm.basemarketvalue) * 100
					adjpercentage = numberSvc.format("#,##0", percentadj) + ' %'
				}
				
				item = [
					itemid			: itm.objid,
					actualuse		: itm.actualusename,
					basemarketvalue	: itm.basemarketvalue,
					adjtypename		: it.adjtypename,
					adjpercentage	: adjpercentage,
					adjustment		: it.adjustment,
					marketvalue		: itm.marketvalue
				]
				
				data.add( item )
			}
			
			itm.adjustments?.each {
				adjpercentage = ''
				
				if(itm.basemarketvalue != 0.00) {
					percentadj = (it.adjustment / itm.basemarketvalue) * 100
					adjpercentage = numberSvc.format("#,##0", percentadj) + ' %'
				}
				
				item = [
					itemid			: itm.objid,
					actualuse		: itm.actualusename,
					basemarketvalue	: itm.basemarketvalue,
					adjtypename		: it.adjtypename,
					adjpercentage	: adjpercentage,
					adjustment		: it.adjustment,
					marketvalue		: itm.marketvalue
				]
				
				data.add( item )
			}
		}
		
		def group = data.groupBy{ it.itemid }
		group.keySet().each{
			def list = group[it] 
			for( int i = 0; i<list.size() -1; i++ ) {
				list[i].marketvalue = null 
			}
		}
		
		return data
	}
	
	private def getPropertyAssessements( rpu ) {
		def data = []
		def landdetails = rpu.info.landdetails
		
		landdetails.each {
			def assesslevel = numberSvc.format("#,##0", it.assesslevel)
			def item = [
				classification	: rpu.classname,
				actualuse 		: it.actualusename,
				marketvalue		: it.marketvalue,
				assesslevel		: assesslevel + " %",
				assessedvalue	: it.assessedvalue
			]
			
			data.add( item )
		}
		
		return data
	}
	
	private void getLandOwnerInfo( faasdata ) {
		def info = em.sqlContext.createNamedQuery('faas:getLandOwnerInfo').setParameter('objid', faasdata.landfaasid).singleResult

		if(info) {
			faasdata.landownername = info.taxpayername
			faasdata.landownerpin = info.pin
		}
	}
	
	private def getMachDetails( rpu ) {
		def data = []
		def machuses = rpu.info.machuses
		
		machuses?.each { itm ->
			itm.machdetails?.each {
				def brandmodel = (it.brand? it.brand : '') + (it.model? '/' + it.model : '')
				
				def item = [
					machinename			: it.machinename,
					brandmodelno		: brandmodel,
					capacity			: it.capacity,
					yearacquired		: it.yearacquired,
					acquiredcondition	: '?',
					estimatedlife		: it.estimatedlife,
					remaininglife		: it.remaininglife,
					yearinstalled		: it.yearinstalled,
					operationyear		: it.operationyear,
					remarks				: '?'
				]
				
				data.add( item )
			}
		}
		
		return data
	}
	
	private def getPropertyAppraisals( rpu ) {
		def data = []
		def machuses = rpu.info.machuses
		
		machuses?.each { itm ->
			itm.machdetails?.each {
				def item = [
					machinename			: it.machinename,
					unitcount			: 1,
					acquisitioncost		: it.acquisitioncost,
					freightcost			: it.freightcost,
					insurancecost		: it.insurancecost,
					installationcost	: it.installationcost,
					othercost			: it.othercost,
					marketvalue			: it.marketvalue,
					depreciation		: it.depreciation,
					depreciationvalue	: it.depreciationvalue
				]
				
				data.add( item )
			}
		}
		
		return data
	}
	
	private def getMachPropertyAssessments( rpu ) {
		def data = []
		def machuses = rpu.info.machuses
		
		machuses?.each {
			def assesslevel = numberSvc.format("#,##0", it.assesslevel) + ' %'
			def item = [
				actualuse		: it.actualusename,
				marketvalue		: it.marketvalue,
				assesslevel		: assesslevel,
				assessedvalue	: it.assessedvalue
			]
			
			data.add( item )
		}
		
		return data
	}
}