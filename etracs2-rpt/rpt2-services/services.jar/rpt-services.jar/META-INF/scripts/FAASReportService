import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class FaasReportService
{
	@PersistenceContext('main')
	def em
	
	@Service('NumberService')
	def numberSvc
	
	def LISTLIMITSIZE1 = 10
	def LISTLIMITSIZE2 = 7
	
	@Service('FAASService')
	def faasSvc 

	
	@ProxyMethod
	public def getReportData( faasid ) {
		def faasdata = [:]
		def faas = faasSvc.open(faasid)
		if( !faas ) throw new Exception('Cannot open FAAS with ID No. ' + faasid + '.')
		
		faasdata.putAll( faas.info )
    	faasdata.putAll( faas.rp )
    	faasdata.putAll( faas.rpu )
		faasdata.taxeffectivity = faas.info.effectivityqtr + "Q - " + faas.info.effectivityyear
		println faasdata.info.taxable
		faasdata.taxability = ( faasdata.taxable ? "TAXABLE" : "EXEMPT" )
		
		if( faas.rpu.rputype == 'land' ) {
			faasdata.landappraisals = getLandDetails( faas.rpu )
			faasdata.planttreesappraisals = getPlantTreeDetails( faas.rpu )
			faasdata.landadjustments = getLandAdjustments( faas.rpu )
			faasdata.propertyassessments = getPropertyAssessements( faas.rpu )
		} else if( faas.rpu.rputype == 'mach' ) {
			LISTLIMITSIZE2 = 14
			getLandReference( faasdata )
			faasdata.machdetails = getMachDetails( faas.rpu )
			faasdata.propertyappraisals = getPropertyAppraisals( faas.rpu )
			faasdata.propertyassessments = getMachPropertyAssessments( faas.rpu )
		} else if( faas.rpu.rputype == 'planttree' ) {
			faasdata.landappraisals = getDummy()
			faasdata.planttreesappraisals = getPlantTreeDetails( faas.rpu )
			faasdata.landadjustments = getPlantTreeLandAdjustments( faas.rpu )
			faasdata.propertyassessments = getPlantTreePropertyAssessements( faas.rpu )
		} else if( faas.rpu.rputype == 'misc' ) {
			LISTLIMITSIZE1 = 25			
			faasdata.miscpropertyappraisals = getMiscPropertyAppraisals( faas.rpu )
			faasdata.miscadjustments = getMiscAdjustments( faas.rpu )
			faasdata.propertyassessments = getMiscPropertyAssessments( faas.rpu )
		} 
		else {
			LISTLIMITSIZE1 = 30
			LISTLIMITSIZE2 = 3
			getLandReference( faasdata )
			def depreciation = numberSvc.format("#,##0.00", faasdata.info.depreciation) + ' %'
			faasdata.depreciation = depreciation
			faasdata.bldgstructures = getBldgStructures( faas.rpu )
			faasdata.additionalitems = getAdditionalItems( faas.rpu )
			faasdata.propertyassessments = getBldgPropertyAssessment( faas.rpu )
		}
			
		return faasdata
	}
	
	private def getLandDetails( rpu ) {
    	def data = []
		def landdetails = rpu.info.landdetails
		
		landdetails.each {
			def item = [
				classification	: rpu.classname,
				subclass		: it.subclassname,
				actualuse 		: it.actualusename,
				area			: ( it.areatype == 'HA' ? it.areaha : it.areasqm ),
				unitvalue		: it.unitvalue,
				basemarketvalue	: it.basemarketvalue,
				areatype		: it.areatype
			]
			
			data.add( item )
		}
		
		LISTLIMITSIZE1 = buildEmptyRows( data, LISTLIMITSIZE1, true )
		
		return data
    }
	
	private def getPlantTreeDetails( rpu ) {
    	def data = []
		def planttreedetails= []
		
    	if( rpu.info.planttrees ) 
			planttreedetails = rpu.info.planttrees
		else 
			planttreedetails = rpu.info.planttreedetails
			
		planttreedetails.each {
			def item = [
				planttreename 	: it.planttreename,
				nonbearing		: it.nonbearing,
				bearing			: it.bearing,
				unitvalue		: it.unitvalue,
				basemarketvalue	: it.basemarketvalue
			]
			
			data.add( item )
		}
		
		LISTLIMITSIZE1 = buildEmptyRows( data, LISTLIMITSIZE1, false )
		
		return data
    }
	
	private def getLandAdjustments( rpu ) {
		def data = []
		def adjpercentage
		def percentadj
		def item
		def landdetails = rpu.info.landdetails
		
		landdetails.each { itm ->
			itm.landadjustments?.each {
				adjpercentage = ''
				
				if(itm.basemarketvalue != 0.00) {
					percentadj = (it.adjustment / itm.basemarketvalue) * 100
					adjpercentage = numberSvc.format("#,##0", percentadj) + ' %'
				}
				
				item = [
					itemid			: itm.objid,
					actualuse		: itm.actualusename,
					basemarketvalue	: itm.basemarketvalue,
					adjtypename		: it.adjtypename,
					adjpercentage	: adjpercentage,
					adjustment		: it.adjustment,
					marketvalue		: itm.marketvalue
				]
				
				data.add( item )
			}
			
			itm.adjustments?.each {
				adjpercentage = ''
				
				if(itm.basemarketvalue != 0.00) {
					percentadj = (it.adjustment / itm.basemarketvalue) * 100
					adjpercentage = numberSvc.format("#,##0", percentadj) + ' %'
				}
				
				item = [
					itemid			: itm.objid,
					actualuse		: itm.actualusename,
					basemarketvalue	: itm.basemarketvalue,
					adjtypename		: it.adjtypename,
					adjpercentage	: adjpercentage,
					adjustment		: it.adjustment,
					marketvalue		: itm.marketvalue
				]
				
				data.add( item )
			}
		}
		
		if( rpu.info.planttotal.basemarketvalue != 0.0 )
			data = data + getPlantTreeLandAdjustments( rpu )
		
		def group = data.groupBy{ it.itemid }
		group.keySet().each{
			def list = group[it] 
			for( int i = 0; i<list.size() -1; i++ ) {
				list[i].marketvalue = null 
			}
		}
		
		LISTLIMITSIZE2 = buildEmptyRows( data, LISTLIMITSIZE2, true )
		
		return data
	}
	
	private def getPropertyAssessements( rpu ) {
		def data = []
		def assesslevel
		def item
		
		if( rpu.info.landdetails ) {
			assesslevel = numberSvc.format("#,##0", rpu.info.landdetails[0].assesslevel) + " %"
			item = [
				classification	: rpu.classname,
				actualuse 		: rpu.info.landdetails[0].actualusename,
				marketvalue		: rpu.info.landtotal.marketvalue,
				assesslevel		: assesslevel,
				assessedvalue	: rpu.info.landtotal.assessedvalue
			]
			
			data.add( item )
		}
		
		if( rpu.info.planttrees ) {
			assesslevel = numberSvc.format("#,##0", rpu.info.planttrees[0].assesslevel) + " %"
			item = [
				classification	: rpu.classname,
				actualuse 		: 'PLANT',
				marketvalue		: rpu.info.planttotal.marketvalue,
				assesslevel		: assesslevel,
				assessedvalue	: rpu.info.planttotal.assessedvalue
			]
			
			data.add( item )
		}
		
		LISTLIMITSIZE2 = buildEmptyRows( data, LISTLIMITSIZE2, false )
		
		return data
	}
	
	private void getLandReference( faasdata ) {
		def info = em.sqlContext.createNamedQuery('faas:getLandReference').setParameter('objid', faasdata.landfaasid).singleResult

		if(info) {
			faasdata.landownername = info.taxpayername
			faasdata.landownerpin = info.pin
			faasdata.landlotno = info.cadastrallotno
			faasdata.landtdno = info.tdno
			faasdata.landarea = info.totalareasqm
		}
	}
	
	private def getMachDetails( rpu ) {
		def data = []
		def machuses = rpu.info.machuses
		
		machuses?.each { itm ->
			itm.machdetails?.each {
				def brandmodel = (it.brand? it.brand : '') + (it.model? '/' + it.model : '')
				
				def item = [
					machinename			: it.machinename,
					brandmodelno		: brandmodel,
					capacity			: it.capacity,
					yearacquired		: it.yearacquired,
					estimatedlife		: it.estimatedlife,
					remaininglife		: it.remaininglife,
					yearinstalled		: it.yearinstalled,
					operationyear		: it.operationyear
				]
				
				data.add( item )
			}
		}
		
		LISTLIMITSIZE1 = buildEmptyRows( data, LISTLIMITSIZE1, true )
		
		return data
	}
	
	private def getPropertyAppraisals( rpu ) {
		def data = []
		def machuses = rpu.info.machuses
		
		machuses?.each { itm ->
			itm.machdetails?.each {
				def additionalcost = new BigDecimal( 0.0 )
				
				if( it.freightcost )
					additionalcost.add( it.freightcost )
				
				if( it.insurancecost )
					additionalcost.add( it.insurancecost )
					
				if( it.installationcost )
					additionalcost.add( it.installationcost )
					
				if( it.othercost )
					additionalcost.add( it.othercost )
					
				def depreciation = numberSvc.format("#,##0", it.depreciation) + ' %'
				
				def item = [
					machinename			: it.machinename,
					originalcost		: it.originalcost,
					additionalcost		: additionalcost,
					acquisitioncost		: it.acquisitioncost,
					conversionfactor	: it.conversionfactor,
					replacementcost		: it.replacementcost,
					yearsused			: it.yearsused,
					marketvalue			: it.marketvalue,
					depreciation		: depreciation,
					depreciationvalue	: it.depreciationvalue
				]
				
				data.add( item )
			}
		}
		
		LISTLIMITSIZE1 = buildEmptyRows( data, LISTLIMITSIZE1, false )
		
		return data
	}
	
	private def getMachPropertyAssessments( rpu ) {
		def data = []
		def machuses = rpu.info.machuses
		
		machuses?.each {
			def assesslevel = numberSvc.format("#,##0", it.assesslevel) + ' %'
			def item = [
				actualuse		: it.actualusename,
				marketvalue		: it.marketvalue,
				assesslevel		: assesslevel,
				assessedvalue	: it.assessedvalue
			]
			
			data.add( item )
		}
		
		LISTLIMITSIZE2 = buildEmptyRows( data, LISTLIMITSIZE2, false )
		
		return data
	}
	
	private def getPlantTreeLandAdjustments( rpu ) {
		def data = []
		def adjpercentage
		def planttreedetails = []
		
		if( rpu.info.planttrees ) 
			planttreedetails = rpu.info.planttrees
		else 
			planttreedetails = rpu.info.planttreedetails
		
		if( planttreedetails ) {
			if( planttreedetails[0].adjustmentrate != 0.0 ) { 
				adjpercentage = numberSvc.format("#,##0", planttreedetails[0].adjustmentrate) + ' %'
				
				def item = [
					itemid			: 'PLANT',
					actualuse		: 'PLANT',
					basemarketvalue	: planttreedetails.basemarketvalue.sum(),
					adjtypename		: 'TOTAL LAND ADJUSTMENT',
					adjpercentage	: adjpercentage,
					adjustment		: planttreedetails.adjustment.sum(),
					marketvalue		: planttreedetails.marketvalue.sum()
				]
				
				data.add( item )
			}
		}
		
		if( rpu.rputype == 'planttree' )
			LISTLIMITSIZE2 = buildEmptyRows( data, LISTLIMITSIZE2, true )
		
		return data
	}
	
	private def getPlantTreePropertyAssessements( rpu ) {
		def data = []
		def assesslevel = numberSvc.format("#,##0", rpu.info.planttreedetails[0].assesslevel) + ' %'
		
		def item = [
			classification	: rpu.classname,
			actualuse 		: 'PLANT',
			marketvalue		: rpu.totalmv,
			assesslevel		: assesslevel,
			assessedvalue	: rpu.totalav
		]
		
		data.add( item )
		LISTLIMITSIZE2 = buildEmptyRows( data, LISTLIMITSIZE2, false )
		
		return data
	}
	
	private def getMiscPropertyAppraisals( rpu ) {
		def data = []
		def miscrpuitems = rpu.info.miscrpuitems
		
		miscrpuitems?.each {
			def binding = buildFieldBindings( it, rpu.rputype )
			binding += buildParamBindings( it.params )
			def expr = replaceExpr( it.expr, binding )
		
			def item = [
				classification	: rpu.classname,
				actualuse		: rpu.info.actualusename,
				miscitemname	: it.miscitemname,
				expr			: expr,
				basemarketvalue	: it.basemarketvalue
			]
			
			data.add( item )
		}
		
		LISTLIMITSIZE1 = buildEmptyRows( data, LISTLIMITSIZE1, false )
		
		return data
	}
	
	private def getMiscAdjustments( rpu ) {
		def data = []
		def miscrpuitems = rpu.info.miscrpuitems
		
		miscrpuitems?.each {
			def depreciationrate = numberSvc.format("#,##0", it.depreciation) + ' %'
			
			def item = [
				actualuse		: rpu.info.actualusename,
				basemarketvalue	: it.basemarketvalue,
				adjtypename		: 'DEPRECIATION',
				depreciationrate: depreciationrate,
				depreciatedvalue: it.depreciatedvalue,
				marketvalue		: it.marketvalue
			]
			
			data.add( item )
		}
		
		LISTLIMITSIZE2 = buildEmptyRows( data, LISTLIMITSIZE2, true )
		
		return data
	}
	
	private def getMiscPropertyAssessments( rpu ) {
		def data = []
		def assesslevel = numberSvc.format("#,##0.00", rpu.info.miscrpuitems[0].assesslevel) + ' %'
		def item = [
			classification	: rpu.classname,
			actualuse 		: rpu.info.actualusename,
			marketvalue		: rpu.totalmv,
			assesslevel		: assesslevel,
			assessedvalue	: rpu.totalav
		]
			
		data.add( item )
		
		LISTLIMITSIZE2 = buildEmptyRows( data, LISTLIMITSIZE2, false )
		
		return data
	}
	
	private def getBldgStructures( rpu ) {
		def data = []
		def bldgstructures = rpu.bldgstructures
		
		bldgstructures?.each {
			def item = [
				structurename : it.structurename,
				materialname  : it.materialname
			]
			
			data.add( item )
		}
		
		LISTLIMITSIZE1 = buildEmptyRows( data, LISTLIMITSIZE1, false )
		
		return data
		
	}
	
	private def getAdditionalItems( rpu ) {
		def data = []
		def bldguses = rpu.info.bldguses
		
		bldguses?.each { bldguse ->
			bldguse.floors?.each { floor ->
				floor.additionalitems?.each {
					def binding = buildFieldBindings( floor, rpu.rputype )
					binding += buildParamBindings( it.params )
					def  expr = replaceExpr( it.expr, binding )
					
					def item = [
						floorno 	: floor.floorno,
						addlitemcode: it.addlitemcode,
						addlitemname: it.addlitemname,
						expr		: expr,
						amount		: it.amount
					]
					
					data.add( item )
				}
			}
		}
		
		LISTLIMITSIZE2 = buildEmptyRows( data, LISTLIMITSIZE2, true )
		
		return data
	}
	
	private def getBldgPropertyAssessment( rpu ) {
		def data = []
		def bldguses = rpu.info.bldguses
		
		bldguses?.each {
			def assesslevel = numberSvc.format("#,##0", it.assesslevel) + ' %'
			
			def item = [
				actualuse	 : it.actualuse.actualusename,
				marketvalue	 : it.marketvalue,
				assesslevel	 : assesslevel,
				assessedvalue: it.assessedvalue
			]
			
			data.add( item )
		}
		
		LISTLIMITSIZE2 = buildEmptyRows( data, LISTLIMITSIZE2, false )
		
		return data
	}
	
	private def buildFieldBindings( item, rputype ) {
		if( rputype == 'misc' ) {
			return [
				SYS_BASE_MARKET_VALUE       : item.basemarketvalue,
				SYS_MARKET_VALUE            : item.marketvalue,
				SYS_DEPRECIATED_VALUE		: item.depreciatedvalue,
				SYS_ASSESSED_VALUE          : item.assessedvalue
			]
		}
		else {
			return [
				SYS_BASE_MARKET_VALUE       : item.basemarketvalue,
				SYS_MARKET_VALUE            : item.marketvalue,
				SYS_BASE_VALUE              : item.basevalue,
				SYS_UNIT_VALUE              : item.unitvalue,
				SYS_AREA                    : item.area
			]
		}
	}
	
	private def buildParamBindings( params ) {
		def binding = [:]
        params.each {
            binding[it.paramname] = it.paramvalue 
        }
		
        return binding
	}
	
	private def replaceExpr( expr, binding ) {
		binding.keySet().each { key ->
			expr = expr.replace( key, numberSvc.format( "#,##0.00", binding[key] ) )
		}
		
		return expr
	}
	
	private def getDummy() {
		def data = []
		LISTLIMITSIZE1 = buildEmptyRows( data, LISTLIMITSIZE1, false )
		
		return data
	}
	
	private def buildEmptyRows( data, listlimitsize, flag ) {
		for(int i=data.size +1; i<=listlimitsize; i++) {
			data.add( [areatype:null] )
		}
		
		if( flag && data.size > listlimitsize )
			listlimitsize = listlimitsize - ( data.size - listlimitsize )
			
		return listlimitsize
	}
}