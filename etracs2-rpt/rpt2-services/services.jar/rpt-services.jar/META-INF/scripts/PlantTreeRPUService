import com.rameses.annotations.*
import java.rmi.server.UID

class PlantTreeRPUService
{
	@PersistenceContext('main')
	def em
    
    @Service('NumberService')
	def numberSvc
    
    @Service('RPUService')
    def rpuSvc 

	@Env
	def env
	
	
	@ProxyMethod
	public Map initGeneralRevision( faas, newrysetting ) {
		checkLandFaasIsRevised( faas, newrysetting )
		revisePlantTrees( faas, newrysetting )
		calculateTotals( faas )
		return faas 
	}
	
	void calculateTotals( faas ) {
		def rpu = faas.rpu 
		
		faas.rpu.info.planttreedetails.each { item ->
			calculatePlantTreeAssessmentByLandId( item.landfaasid, item )
		}
		
		
		// clear totals 
		rpu.totalbmv     = 0.0
        rpu.totalmv      = 0.0
        rpu.totalav      = 0.0
		rpu.info.totalbearing       = 0
        rpu.info.totalnonbearing    = 0
		
		def items = rpu.info.planttreedetails
		rpu.totalbmv     		= items.basemarketvalue.sum()
		rpu.totalmv      		= items.marketvalue.sum()
		rpu.totalav      		= items.assessedvalue.sum()
		rpu.info.totalbearing   = items.bearing.sum()
		rpu.info.totalnonbearing = items.nonbearing.sum()
    }
    
	void revisePlantTrees( faas, newrysetting ) {
		def deletedItems = []
		def rysetting = em.sqlContext.createNamedQuery('planttreerpu:getRYSetting')
							.setParameter('ry', newrysetting.ry)
							.singleResult 
		if( rysetting ) {
			rysetting.assesslevels = em.serializer.read( rysetting.assesslevels )
		}
		
		faas.rpu.info.planttreedetails.each { planttree -> 
			def ptuv = em.sqlContext.createNamedQuery('planttreerpu:lookupUnitValueByPrevId')
							.setParameter('previd', planttree.unitvalueid )
							.singleResult 
			
			if( ptuv ) {
				planttree.objid 		= 'PT' + new UID()
				planttree.landfaasid	= faas.info.landfaasid 
				planttree.ptuv 			= ptuv 
				planttree.putAll( ptuv )
				
				def al = rysetting?.assesslevels?.find{ it.previd = planttree.assesslevelid }
				if( al ) {
					planttree.al = [
						assesslevelid	: al.objid,
						assesslevelcode	: al.code,
						assesslevelname	: al.name,
						assesslevel		: al.rate, 
					]
					planttree.assesslevelid 	= al.objid 
					planttree.assesslevelcode 	= al.code
					planttree.assesslevelname 	= al.name 
					planttree.assesslevel		= al.rate 
				}
			}
			else {
				deletedItems.add( planttree )
			}
		}
		
		faas.rpu.info.planttreedetails.removeAll( deletedItems ) 
	}
	
	void checkLandFaasIsRevised( faas, newrysetting) {
		def pin = faas.rp.pin
		def landfaas = em.sqlContext.createNamedQuery('planttreerpu:getLatestRevisedLandFaas')
							.setParameters([ pin:pin, ry:newrysetting.ry  ])
							.singleResult 
							
		if( ! landfaas ) {
			throw new Exception("Land FAAS $pin is not yet revised.\nFirst revise the Land RPU before revising any improvements.")
		}	
		
		faas.info.landfaasid 			= landfaas.objid 
		faas.info.landfaastaxpayerid 	= landfaas.taxpayerid 
	}
    
    @ProxyMethod
    public Map initPlantTreeRpu( faas ) {
        rpuSvc.buildCommonRpuInfo( faas )
        def rpuinfo = faas.rpu.info 
        //
        //set plant/tree specific info below
        rpuinfo.totalbearing 	= 0;
        rpuinfo.totalnonbearing = 0;
        
        return faas 
    }
	
	@ProxyMethod
	public Map calculatePlantTreeAssessmentByLandId( landfaasid, planttree ) {
		def landfaas = em.read('faas', [objid:landfaasid] )
		if( !landfaas ) throw new Exception('Land Reference cannot be loaded.\nPlease verify that the land where the property is located still exists.')
		return calculatePlantTreeAssessment( landfaas.rpu.info.landdetails, planttree ) 
	}
	
    @ProxyMethod
    public Map calculatePlantTreeAssessment( landdetails, planttree ) {
		//reset values to 0.0
        planttree.basemarketvalue  = 0.0
        planttree.adjustment       = 0.0
        planttree.marketvalue      = 0.0
        planttree.assessedvalue    = 0.0
        
        //calculate basemarketvalue
        planttree.basemarketvalue = numberSvc.round( planttree.bearing * planttree.unitvalue )
		
        //calculate adjustment 
		planttree.adjustmentrate = 0.0
		planttree.adjustment 	 = 0.0
        
		def rysetting = em.sqlContext.createNamedQuery( 'landrpu:getRPTSetting' ).singleResult;
		if( rysetting.adjustplanttree == 1 || rysetting.adjustplanttree == true  ){
			// get total basemarketvalue for agrilands only 
			def agrilands 		= landdetails.findAll{ it.actualuseid == rysetting.agriculturalid }
			if( ! agrilands )   {
				agrilands = landdetails.findAll{ it.actualusecode == 'AGR' }
			}
			def totallandbmv 	  = agrilands.basemarketvalue.sum()
			def totalvalueadj     = 0.0 
			def totalactualuseadj = 0.0 
			
			if( landdetails.landadjustments ) {
				totalvalueadj     = landdetails.landvalueadjustment.sum()
			}
			if( landdetails.adjustments ) {
				totalactualuseadj = landdetails.actualuseadjustment.sum()
			}
		
			totallandbmv 		= ( totallandbmv ? totallandbmv : 0.0 )
			totalvalueadj 		= ( totalvalueadj ? totalvalueadj : 0.0 )
			totalactualuseadj 	= ( totalactualuseadj ? totalactualuseadj : 0.0 )
			def totallandadj  	= totalvalueadj + totalactualuseadj 
			
			if( totallandbmv > 0 ){
				planttree.adjustmentrate = ( totallandadj / totallandbmv ) * 100;
				planttree.adjustment 	 = numberSvc.round( planttree.basemarketvalue * planttree.adjustmentrate / 100 )
			}
		}
        
		//calculate marketvalue 
        planttree.marketvalue = numberSvc.round( planttree.basemarketvalue + planttree.adjustment )
		if( rysetting && IS_TRUE( rysetting.roundadjmarketvalue ) ) {
			planttree.marketvalue = numberSvc.roundToTen( planttree.marketvalue )
		}
        //calculate assessedvalue
        planttree.assessedvalue = numberSvc.roundToTen(planttree.marketvalue * planttree.assesslevel / 100.0 )
        return planttree 
    }
    
    /*----------------------------------------------------------------------------------
    * Lookup Support
    ----------------------------------------------------------------------------------*/
    @ProxyMethod
    public List lookupUnitValues( ry, searchText, params) {
        if( !searchText ) return getListByName('planttreerpu:lookupUnitValue', [ry:ry], params)
        return getListByName('planttreerpu:lookupUnitValueByCode', [ry:ry, code:searchText+'%'], params)
    }
    
    @ProxyMethod
    public List lookupAssessLevel( ry, searchText, params) {
        def setting = em.sqlContext.createNamedQuery('planttreerpu:getRYSetting').setParameter('ry', ry ).singleResult
        if( ! setting) throw new Exception('Plant/Tree Revision Setting for year ' + ry + ' is not defined.')
        setting.assesslevels = em.serializer.read( setting.assesslevels )
        def levels = []
        if( !searchText || searchText.startsWith('%') ) return buildAssessLevels( setting.assesslevels )
        return buildAssessLevels( setting.assesslevels.findAll{ it.code.startsWith(searchText) } )
    }
    
    
    
    
    /*----------------------------------------------------------------------------------
    * Support Methods 
    ----------------------------------------------------------------------------------*/
    List buildAssessLevels( list ) {
        List levels = []
        list.each {
            levels.add([
                assesslevelid     : it.objid,
                assesslevelcode   : it.code,
                assesslevelname   : it.name,
                assesslevel       : it.rate,
            ])
        }
        return levels 
    }
    def determineAssessLevel( planttree ) {
        def al = em.sqlContext.createNamedQuery('landrpu:getAssessLevelById').setParameter('objid', planttree.assesslevelid).singleResult
        if( ! al ) throw new Exception('Assess Level for ' + planttree.assesslevelname + ' does not exists or has been deleted.')
        if( (al.fixrate as boolean ) ==  true ) {
            return al.rate 
        }
        List ranges = em.serializer.read( al.ranges )
        def range = ranges.find{ planttree.marketvalue > it.mvfrom && (planttree.marketvalue <= it.mvto || it.mvto == 0.0) }
        if( ! range ) throw new Exception('Market Value of P' + numberSvc.format('#,##0.00', planttree.marketvalue) + ' has no assess level range definition.' )
        return range.rate 
    }
    
    def calculateAdjustment( landfaasid, planttree ) {
        def faas = em.read('faas', [objid:landfaasid]);
        def adjrate = 0.00
        def adjustment = 0.0 
        
        if( faas ) {
            adjrate = getAgriculturalRate( faas.rpu.info.landdetails );
            adjustment = planttree.basemarketvalue * adjrate;
        }
        return [adjustment:adjustment, adjustmentrate:adjrate];
    }
    
    def getAgriculturalRate( landdetails ) {
    	def adjrate = 0.0;
    	
    	def rysetting = em.sqlContext.createNamedQuery( 'landrpu:getRPTSetting' ).singleResult;
    	
    	if( rysetting.adjustplanttree == 1 ){
    		def agrilands = landdetails.findAll{ it.actualuseid == rysetting.agriculturalid };

    		if( agrilands ) {
    			def totalbmv = agrilands.basemarketvalue.sum();
    			def totaladj = agrilands.adjustment.sum();
    			
    			if( totalbmv != 0.0 )  adjrate = ( totaladj / totalbmv ) * 100.0;
    		}
    	} 
    	
    	return adjrate;
    }
    
    
    
    private def getListByName(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
	
	boolean IS_TRUE( value ) {
		return TO_BOOLEAN( value ) == true 
	}
	
	boolean TO_BOOLEAN( value ) {
		if( value instanceof Boolean ) return value 
		return '1/y/yes/true/t'.indexOf( value.toString().toLowerCase() ) >= 0
	}
}
