import com.rameses.annotations.*
import java.rmi.server.UID

class MiscRPUService
{
	@PersistenceContext('main')
	def em
    
    @Service('NumberService')
	def numberSvc
    
    @Service('RPUService')
	def rpuSvc

	@Env
	def env
    
    
    @ProxyMethod
    public Map initMiscRpu( faas ) {
        rpuSvc.buildCommonRpuInfo( faas )
        def rpuinfo = faas.rpu.info 
        
        //
        //set misc specific info below
        rpuinfo.each{
        	it.miscrpuitems = [
				depreciation		: 0.0,
				depreciatedvalue	: 0.0,
				basemarketvalue		: 0.0,
				marketvalue			: 0.0,
				assesslevel			: 0.0,
				assessedvalue		: 0.0,
			]
		}
        return faas;
    }
    
    @ProxyMethod
    public Map calculateMiscItemAssessment( miscitem ) {
        //reset values to 0.0
        miscitem.basemarketvalue  = 0.0;
        miscitem.depereciatedvalue = 0.0;
        miscitem.marketvalue      = 0.0;
        miscitem.assesslevel      = 0.0;
        miscitem.assessedvalue    = 0.0;
        
        //calculate expression
        def expression = calculateExpression( miscitem );
        
        //calculate assessment 
		miscitem.basemarketvalue = numberSvc.round( expression );
		miscitem.depreciatedvalue = numberSvc.round( miscitem.basemarketvalue * miscitem.depreciation / 100.0 );
		miscitem.marketvalue = numberSvc.round( miscitem.basemarketvalue - miscitem.depreciatedvalue );
		miscitem.assesslevel = determineAssessLevel( miscitem );
		miscitem.assessedvalue = numberSvc.roundToTen( miscitem.marketvalue * miscitem.assesslevel / 100.0 );
		
        return miscitem;
    }
    
    @ProxyMethod
    public List recalcMiscItems( miscitems ) {
        miscitems.each { calculateMiscItemAssessment( it ); }
        return miscitems;
    }
    
    
    @ProxyMethod
    public def calculateExpression( miscitem ) {
        def result = 0.0;
		// evaluate the expr
		def binding = buildFieldBindings( miscitem );
		binding += buildParamBindings( miscitem );
		def adjamout = numberSvc.round( evaluateExpr( miscitem.expr, binding ) );
		result = adjamout;

        return result;
    }
    
    /*----------------------------------------------------------------------------------
    * Lookup Support
    ----------------------------------------------------------------------------------*/
    
    @ProxyMethod
    public List lookupAssessLevel( ry ) {
        return getListByName('miscrpu:lookupAssessLevel', [ ry:ry ], null)
    }
    
    @ProxyMethod
    public List getLookupMiscItems( ry, searchText, params ){
    	def searchValue = (searchText ? searchText+'%' : '%');
    	def criteria = [ry:ry, miscitemcode:searchValue];
    	return getListByName( 'miscrpu:lookupMiscItems', criteria, params );
    }
    
    
    /*----------------------------------------------------------------------------------
    * calculateTotals Support 
    ----------------------------------------------------------------------------------*/
    def determineAssessLevel( miscitem ) {
        def al = em.sqlContext.createNamedQuery('miscrpu:getAssessLevelById').setParameter('objid', miscitem.actualuse.assesslevelid).singleResult
        if( ! al ) throw new Exception('Assess Level for ' + miscitem.actualuse.assesslevelname + ' does not exists or has been deleted.')
        if( (al.fixrate as boolean ) ==  true ) {
            return al.rate;
        }
        List ranges = em.serializer.read( al.ranges )
        def range = ranges.find{ miscitem.marketvalue > it.mvfrom && (miscitem.marketvalue <= it.mvto || it.mvto == 0.0) }
        if( ! range ) throw new Exception('Market Value of P' + numberSvc.format('#,##0.00', miscitem.marketvalue) + ' has no assess level range definition.' )
        return range.rate 
    }
    
    
    /*----------------------------------------------------------------------------------
    * Miscellaneous Methods
    ----------------------------------------------------------------------------------*/
    def buildFieldBindings( miscitem ) {
        return [
            SYS_BASE_MARKET_VALUE       : miscitem.basemarketvalue,
            SYS_MARKET_VALUE            : miscitem.marketvalue,
            SYS_DEPRECIATED_VALUE		: miscitem.depreciatedvalue,
            SYS_ASSESSED_VALUE          : miscitem.assessedvalue,
        ]
    }
    
    def buildParamBindings( adjustment ) {
        def binding = [:]
        adjustment.params.each {
            binding[it.paramname] = it.paramvalue 
        }
        return binding 
    }
    
    def getListByName(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
    
    def evaluateExpr( expr, params ) {
		return (new GroovyShell( new Binding( params) )).evaluate( expr )
	}
}
