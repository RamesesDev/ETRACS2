import com.rameses.annotations.*
import java.rmi.server.UID

class MiscRPUService
{
	@PersistenceContext('main')
	def em
    
    @Service('NumberService')
	def numberSvc
    
    @Service('RPUService')
	def rpuSvc

	@Env
	def env
    
	@ProxyMethod
	public Map initGeneralRevision( faas, newrysetting ) {
		checkLandFaasIsRevised( faas, newrysetting )
		reviseActualUse( faas, newrysetting )
		reviseMiscRpuItems( faas, newrysetting )
		recalculate( faas ) 
		return faas 
	}
	
	void recalculate( faas )  {
		faas.rpu.info.miscrpuitems.each { item ->
			calculateMiscItemAssessment( item )
		}
		
		//calculate totals 
		def rpu 		= faas.rpu 
		def items 		= faas.rpu.info.miscrpuitems
		rpu.totalbmv    = items.basemarketvalue.sum()
        rpu.totalmv     = items.marketvalue.sum()
        rpu.totalav     = items.assessedvalue.sum()
	}
    
	
	void reviseActualUse( faas, newrysetting ) {
		def rpuinfo = faas.rpu.info 
		def actualuse = em.sqlContext.createNamedQuery('miscrpu:getActualUseByPrevId')
							.setParameter('previd', rpuinfo.actualuseid )
							.singleResult 
		if( actualuse ) {
			rpuinfo.putAll( actualuse ) 
		}
	}
	
	void reviseMiscRpuItems( faas, newrysetting ) {
		def deletedItems = [] 
		faas.rpu.info.miscrpuitems.each { miscitem ->
			def misc = em.sqlContext.createNamedQuery('miscrpu:getMiscItemByPrevId')
							.setParameter('previd', miscitem.miscitemvalueid  )
							.singleResult 
			
			if( misc ) {
				miscitem.misc = misc 
				miscitem.putAll( misc )
				miscitem.objid = 'MCI' + new UID()
				
				def al = em.sqlContext.createNamedQuery('miscrpu:getAssessLevelByPrevId')
							.setParameter('previd', miscitem.actualuse.assesslevelid )
							.singleResult 
							
				if( al ) {
					miscitem.actualuse = al 
				}
			}
			else {
				deletedItems.add( miscitem )
			}
		}
		faas.rpu.info.miscrpuitems.removeAll( deletedItems )
	}
	
	
	void checkLandFaasIsRevised( faas, newrysetting) {
		def pin = faas.rp.pin
		def landfaas = em.sqlContext.createNamedQuery('miscrpu:getLatestRevisedLandFaas')
							.setParameters([ pin:pin, ry:newrysetting.ry  ])
							.singleResult 
							
		if( ! landfaas ) {
			throw new Exception("Land FAAS $pin is not yet revised.\nFirst revise the Land RPU before revising any improvements.")
		}	
		
		faas.info.landfaasid 			= landfaas.objid 
		faas.info.landfaastaxpayerid 	= landfaas.taxpayerid 
	}
	
	
    
    @ProxyMethod
    public Map initMiscRpu( faas ) {
        rpuSvc.buildCommonRpuInfo( faas )
        def rpuinfo = faas.rpu.info 
        
        //
        //set misc specific info below
        rpuinfo.each{
        	it.miscrpuitems = [
				depreciation		: 0.0,
				depreciatedvalue	: 0.0,
				basemarketvalue		: 0.0,
				marketvalue			: 0.0,
				assesslevel			: 0.0,
				assessedvalue		: 0.0,
			]
		}
        return faas;
    }
    
    @ProxyMethod
    public Map calculateMiscItemAssessment( miscitem ) {
        //reset values to 0.0
        miscitem.basemarketvalue  = 0.0;
        miscitem.depereciatedvalue = 0.0;
        miscitem.marketvalue      = 0.0;
        miscitem.assesslevel      = 0.0;
        miscitem.assessedvalue    = 0.0;
        
        //calculate expression
        def expression = calculateExpression( miscitem );
        
        //calculate assessment 
		miscitem.basemarketvalue = numberSvc.round( expression );
		miscitem.depreciatedvalue = numberSvc.round( miscitem.basemarketvalue * miscitem.depreciation / 100.0 );
		miscitem.marketvalue = numberSvc.round( miscitem.basemarketvalue - miscitem.depreciatedvalue );
		
		def rysetting = em.sqlContext.createNamedQuery( 'landrpu:getRPTSetting' ).singleResult;
		if( rysetting && IS_TRUE( rysetting.roundadjmarketvalue ) ) {
			miscitem.marketvalue = numberSvc.roundToTen( miscitem.marketvalue )
		}
		
		miscitem.assesslevel = determineAssessLevel( miscitem );
		miscitem.assessedvalue = numberSvc.roundToTen( miscitem.marketvalue * miscitem.assesslevel / 100.0 );
        return miscitem;
    }
    
    @ProxyMethod
    public List recalcMiscItems( miscitems ) {
        miscitems.each { calculateMiscItemAssessment( it ); }
        return miscitems;
    }
    
    
    @ProxyMethod
    public def calculateExpression( miscitem ) {
        def result = 0.0;
		// evaluate the expr
		def binding = buildFieldBindings( miscitem );
		binding += buildParamBindings( miscitem );
		def adjamout = numberSvc.round( evaluateExpr( miscitem.expr, binding ) );
		result = adjamout;

        return result;
    }
    
    /*----------------------------------------------------------------------------------
    * Lookup Support
    ----------------------------------------------------------------------------------*/
    
    @ProxyMethod
    public List lookupAssessLevel( ry ) {
        return getListByName('miscrpu:lookupAssessLevel', [ ry:ry ], null)
    }
    
    @ProxyMethod
    public List getLookupMiscItems( ry, searchText, params ){
    	def searchValue = (searchText ? searchText+'%' : '%');
    	def criteria = [ry:ry, miscitemcode:searchValue];
    	return getListByName( 'miscrpu:lookupMiscItems', criteria, params );
    }
    
    
    /*----------------------------------------------------------------------------------
    * calculateTotals Support 
    ----------------------------------------------------------------------------------*/
    def determineAssessLevel( miscitem ) {
        def al = em.sqlContext.createNamedQuery('miscrpu:getAssessLevelById').setParameter('objid', miscitem.actualuse.assesslevelid).singleResult
		println 'al -> ' + al 
        if( ! al ) throw new Exception('Assess Level for ' + miscitem.actualuse.assesslevelname + ' does not exists or has been deleted.')
        if( IS_TRUE(al.fixrate ) ) {
            return al.rate;
        }
        List ranges = em.serializer.read( al.ranges )
        def range = ranges.find{ miscitem.marketvalue > it.mvfrom && (miscitem.marketvalue <= it.mvto || it.mvto == 0.0) }
        if( ! range ) throw new Exception('Market Value of P' + numberSvc.format('#,##0.00', miscitem.marketvalue) + ' has no assess level range definition.' )
        return range.rate 
    }
    
    
    /*----------------------------------------------------------------------------------
    * Miscellaneous Methods
    ----------------------------------------------------------------------------------*/
    def buildFieldBindings( miscitem ) {
        return [
            SYS_BASE_MARKET_VALUE       : miscitem.basemarketvalue,
            SYS_MARKET_VALUE            : miscitem.marketvalue,
            SYS_DEPRECIATED_VALUE		: miscitem.depreciatedvalue,
            SYS_ASSESSED_VALUE          : miscitem.assessedvalue,
        ]
    }
    
    def buildParamBindings( adjustment ) {
        def binding = [:]
        adjustment.params.each {
            binding[it.paramname] = it.paramvalue 
        }
        return binding 
    }
    
    def getListByName(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
    
    def evaluateExpr( expr, params ) {
		return (new GroovyShell( new Binding( params) )).evaluate( expr )
	}
	
	boolean IS_TRUE( value ) {
		return TO_BOOLEAN( value ) == true 
	}
	
	boolean TO_BOOLEAN( value ) {
		if( value instanceof Boolean ) return value 
		return '1/y/yes/true/t'.indexOf( value.toString().toLowerCase() ) >= 0
	}
}
