import com.rameses.annotations.*
import java.rmi.server.UID
import com.rameses.eserver.*;
import com.rameses.common.*;

class FAASService
{
	@PersistenceContext('java:system')
	def em_sys
	
	@PersistenceContext('main')
	def em
    
	@Env
	def env
	
	@Service('DateService')
	def dateSvc

    @Service('Var')
	def var

	@Service('SequenceService')
	def seqSvc
    
    @Service('LogService')
    def logSvc
    
    @Service('RPTLedgerService')
    def ledgerSvc 

    def INTERIM_STATE = 'INTERIM'
    def FORAPPROVAL_STATE = 'FORAPPROVAL'
    def FORTAXMAP_STATE = 'FORTAXMAP'
    def FORPROVAPPROVAL_STATE = 'FORPROVAPPROVAL'
	def CURRENT_STATE = 'CURRENT'
	def CANCELLED_STATE = 'CANCELLED'
    
	def SCHEMA_NAME = 'faas'
    def SCHEMA_VERSION = '1.0'
    def LISTSCHEMA_NAME = 'faas:faaslist'
    
    def LAND_TYPE = 'land' 
    def BLDG_TYPE = 'bldg'
    def MACH_TYPE = 'mach'
    def PLANTTREE_TYPE = 'planttree'
    def MISC_TYPE = 'misc' 
    
	@ProxyMethod
	public def getList( search, params ) {
		def result = null
        def criteria = [
            tdno : search,
            taxpayername : search+'%',
            pin : search,
            barangay : search,
            cadastrallotno : search,
            surveyno : search,
            blockno  : search
        ]
		if( ! search ) return getListByQuery('faas:findByState', [:], params)
		if( (result = getListByQuery('faas:findByTdNo', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findByTaxpayerName', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findByPin', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findByBarangay', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findByCadastralLotNo', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findBySurveyNo', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findByBlockNo', criteria, params)) ) return result
		return result
	}
    
    @ProxyMethod
    public Map createFaas() {
        def ry = getCurrentRY()
        return [
            objid         : 'F' + new UID(),
            schemaname    : SCHEMA_NAME, 
            schemaversion : SCHEMA_VERSION,
            docstate      : INTERIM_STATE,
            transmitted   : false,
            info          : [txntype:'DC', datacapture:true, prevmv:0.0, prevav:0.0, effectivityqtr:1, memoranda:'REVISED PURSUANT TO R.A. 7160'],
            rp            : [attributes:[]],
            rpu           : [ry:ry, classid:'RES', classcode:'RES', classname:'RES',suffix:0,info:[:]],
            previousfaases: [],
            lgutype       : var.lgu_type,
        ]
    }
    
    @ProxyMethod
    public Map validateCreate( faas ) {
        resolveRpuType( faas  )
        buildPinInfo( faas )
        validateRpu( faas )
        initFaasInfo( faas )
        return faas 
    }
    
    @ProxyMethod
    public Map create( faas ) {
        checkDuplicateTdNo( faas.objid, faas.info.tdno )
        validateRpu( faas )
        em.validate( faas.schemaname, faas )
        em.validate( LISTSCHEMA_NAME, faas )
        
        em.create( faas.schemaname, faas )
        em.create( LISTSCHEMA_NAME, faas )
        createPIN( faas ) 
        logSvc.log('CREATE','Faas', faas.objid)
        return faas 
    }
    
    @ProxyMethod
    public Map update( faas ) {
        checkDuplicateTdNo( faas.objid, faas.info.tdno )
        em.validate( faas.schemaname, faas )
        em.validate( LISTSCHEMA_NAME, faas )
        
        if( faas.docstate == INTERIM_STATE ) {
            em.update( faas.schemaname, faas )
        }
        else {
            em.update( faas.schemaname, faas, { diff ->
                logSvc.logB('UPDATE', 'FAAS', faas.objid, '', diff )
            } as UpdateChangeHandler )
        }
        em.update( LISTSCHEMA_NAME, faas )
        return faas 
    }    
    
    @ProxyMethod
    public Map open( faasid ) {
        def faas = em.read( SCHEMA_NAME, [objid:faasid] )
        if( !faas ) throw new Exception('FAAS does not exists.')
        faas.info.datacapture = faas.info.datacapture as boolean
        faas.rpu.taxable = faas.rpu.taxable as boolean
        faas.rpu.useswornamount = faas.rpu.useswornamount as boolean
        initOpenRpuInfo( faas.rpu )
        return faas 
    }
    
    @ProxyMethod
    public Map submit( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        validateSubmit( faasinfo )
        def faas = open( faasinfo.objid )
        updateFaasState( faas, FORAPPROVAL_STATE )
        logSvc.log('SUBMIT','FAAS', faasid)
        return faas 
    }
    
    @ProxyMethod
    public Map submitToProvince( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        validateSubmitToProvince( faasinfo )
        def faas = open( faasinfo.objid )
        updateFaasState( faas, FORPROVAPPROVAL_STATE )
        logSvc.log('SUBMIT_TO_PROVINCE','FAAS', faasid)
        return faas 
    }
    
    @ProxyMethod
    public Map approve( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        validateApprove( faasinfo )
        def faas = open( faasinfo.objid )
        validateRPUInfo( faas )
        updateFaasState( faas, CURRENT_STATE )
        ledgerSvc.post( faasid )
        logSvc.log('APPROVE','FAAS', faasid)
        return faas 
    }
    
    @ProxyMethod
    public Map approveByProvince( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        validateProvinceApproval( faasinfo )
        def faas = open( faasinfo.objid )
        validateRPUInfo( faas )
        updateFaasState( faas, CURRENT_STATE )
        ledgerSvc.post( faasid  )
        logSvc.log('PROVINCE_APPROVE','FAAS', faasid)
        return faas 
    }
    
    
    @ProxyMethod
    public void delete( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        
        //validate delete 
        if( faasinfo.docstate != INTERIM_STATE ) throw new Exception('Delete not allowed for ' + faasinfo.docstate + ' record.' )
        checkFaasTxnReference( faasid )
        
        //delete record
        if( faasinfo.datacapture ) {
            deletePin( faasinfo )
        }
        em.delete(LISTSCHEMA_NAME, [objid:faasid] )
        em.delete(SCHEMA_NAME, [objid:faasid ] )
    }
    
    
    @ProxyMethod
    public void checkDuplicateTdNo( faasid, tdno ) {
        if( ! tdno ) return 
        def data = em.sqlContext.createNamedQuery('faas:checkDuplicateTdNo').setParameters([objid:faasid, tdno:tdno]).singleResult
        if( data ) throw new Exception('TD No. ' + tdno + ' is already existing.')
    }
    
    
    @ProxyMethod
    public List getTxnTypes() {
        return ['DC','GR','RL','ND','IL','LI','TR','MU','SD','CS','PR','PC','CC','AR','CT','CD','CE','BI','CTD','RE','MC','CP']
    }
    
    @ProxyMethod
    public List getBarangays() {
        String lguindex = var.lgu_index 
        def lgu = em.read('lgu', [objid:lguindex] )
        if( !lgu) throw new Exception('LGU ' + lguindex + ' not found.')
        return lgu.barangays 
    }
    
    /*-----------------------------------------------------------------------
    ** Support Methods
    -----------------------------------------------------------------------*/
    void createPIN( faas ) {
        def pin = [pin:faas.rpu.fullpin, claimno:faas.info.claimno, docstate:faas.docstate]
        em.sqlContext.createNamedExecutor('faas:insertPin').setParameters( pin ).execute()
    }
    void buildPinInfo( faas ) {
        def lgu = em.sqlContext.createNamedQuery('faas:getLgu').setParameter('objid', faas.rp.munidistrictid).singleResult
        if( !lgu) throw new Exception('Cannot load LGU for index ' + faas.rp.munidistrictid + '.' )
        def parentlgu = em.sqlContext.createNamedQuery('faas:getLgu').setParameter('objid', lgu.parentid).singleResult
        if( !parentlgu) throw new Exception('Cannot load Parent LGU for index ' + lgu.parentid  + '.' )
        
        faas.rp.provcity = parentlgu.lguname 
        faas.rp.provcityindex = parentlgu.indexno 
        faas.rp.munidistrict = lgu.lguname 
        faas.rp.munidistrictindex = lgu.indexno 
        faas.rp.pin = faas.rp.provcityindex + '-' + faas.rp.munidistrictindex + '-' + faas.rp.barangayindex + '-' + faas.rp.section + '-' + faas.rp.parcel 
        
    }
    
    void validateRpu( faas ) {
        validateRY( faas )
        checkDuplicatePin( faas.rpu.rputype, faas.rpu.info.fullpin, faas.info.claimno )
        validateSuffix( faas )
    }
    
    void validateRY( faas ) {
        int ry = faas.rpu.ry 
        def query = 'faas:getRYSetting_' + faas.rpu.rputype // results to getRYSetting_land, etc
        def data = em.sqlContext.createNamedQuery(query).setParameter('ry', ry ).singleResult
        if( ! data ) throw new Exception('Revision Setting ' + faas.rpu.ry + ' does not exist.')
    }
    
    void checkDuplicatePin( rputype, fullpin, claimno ) {
        if( rputype != LAND_TYPE ) return 
        
        if( claimno == null ) {
            //check for unique pin only
            def data = em.sqlContext.createNamedQuery('faas:getPin').setParameter('pin', fullpin).singleResult
            if( data ) throw new Exception('Duplicate PIN ' + fullpin + ' not allowed.')
        }
        else {
            //check for unique pin and claimno  only
            def data = em.sqlContext.createNamedQuery('faas:getPinClaimno').setParameters([pin:fullpin, claimno:claimno]).singleResult
            if( data ) throw new Exception('Duplicate PIN ' + fullpin + ' with Claim No. ' + claimno + ' not allowed.')
        }
    }
    
    
    
    void validateSuffix( faas ) {
        int suffix = faas.rpu.suffix 
        if( suffix == 0 ) return 
        if( suffix >= 1001 && suffix <= 1999 ) return 
        if( suffix >= 2001 && suffix <= 2999 ) return 
        if( suffix >= 3001 && suffix <= 6999 ) return 
        if( suffix >= 7001 && suffix <= 7999 ) return 
        throw new Exception('Invalid Suffix No. ' + suffix + '.')
    }
    
    void initFaasInfo( faas ) {
        String rputype = faas.rpu.rputype 
        if( rputype == LAND_TYPE) initLandRpu( faas )
        else if( rputype == BLDG_TYPE) initBldgRpu( faas )
        else if( rputype == MACH_TYPE) initMachRpu( faas )
        else if( rputype == PLANTTREE_TYPE) initPlantTreeRpu( faas )
        else if( rputype == MISC_TYPE) initMiscRpu( faas )
        else throw new Exception('Invalid RPU Type ' + rputype + '.')
    }
    
    void initLandRpu( faas ) {
        buildCommonRpuInfo( faas )
        def rpuinfo = faas.rpu.info 
        //
        //land specific info
        rpuinfo.idleland = false 
        rpuinfo.landvalueadjustment = 0.0
        rpuinfo.landdetails = []
        rpuinfo.landtotal = [ 
            areasqm         : 0.0,
            areaha          : 0.0,
            basemarketvalue : 0.0,
            adjustment      : 0.0,
            marketvalue     : 0.0,
            assessedvalue   : 0.0,
        ]
        rpuinfo.planttrees = []
        rpuinfo.planttotal = [
            bearing         : 0,
            nonbearing      : 0,
            basemarketvalue : 0.0,
            adjustment      : 0.0,
            marketvalue     : 0.0,
            assessedvalue   : 0.0,
        ]
        rpuinfo.adjustments = []
    }
    
    void initBldgRpu( faas ) {
    }
    
    void initMachRpu( faas ) {
    }
    
    void initPlantTreeRpu( faas ) {
    }
    
    void initMiscRpu( faas ) {
    }
    
    void buildCommonRpuInfo( faas  ) {
        def rpuinfo = faas.rpu 
        rpuinfo.fullpin         = buildFullPin( faas )
        rpuinfo.taxable         = true 
        rpuinfo.totalbmv        = 0.0
        rpuinfo.totalmv         = 0.0
        rpuinfo.totalav         = 0.0
        rpuinfo.totalareasqm    = 0.0
        rpuinfo.totalareaha     = 0.0
        rpuinfo.useswornamount  = false
    }
    
    String buildFullPin( faas ) {
        String fullpin = faas.rp.pin 
        if( faas.rpu.rputype != LAND_TYPE ) {
            fullpin += '-' + faas.rpu.suffix 
        }
        if( faas.rpu.rputype == BLDG_TYPE && faas.rpu.info.iscondo ) {
            fullpin += '-' + faas.rpu.info.subsuffix
        }
        return fullpin 
    }
    
    void initOpenRpuInfo( rpu ) {
        if( rpu.rputype == LAND_TYPE ) {
            rpu.info.landdetails.each{ it.taxable = it.taxable as boolean }
        }
        else if( rpu.rputype == BLDG_TYPE ) {
            throw new Exception('initOpenRpuInfo not yet implemented')
        }
        else if( rpu.rputype == MACH_TYPE ) {
            throw new Exception('initOpenRpuInfo not yet implemented')
        }
        else if( rpu.rputype == PLANTTREE_TYPE ) {
            throw new Exception('initOpenRpuInfo not yet implemented')
        }
        else if( rpu.rputype == MISC_TYPE ) {
            throw new Exception('initOpenRpuInfo not yet implemented')
        }
    }
    
    void resolveRpuType( faas ) {
        int suffix = faas.rpu.suffix 
        def rputype = null 
        if( suffix == 0 ) rputype = LAND_TYPE
        else if( suffix >= 1001 && suffix <= 1999 ) rputype = BLDG_TYPE
        else if( suffix >= 2001 && suffix <= 2999 ) rputype = MACH_TYPE
        else if( suffix >= 3001 && suffix <= 6999 ) rputype = PLANTTREE_TYPE
        else if( suffix >= 7001 && suffix <= 7999 ) rputype = MISC_TYPE
        else throw new Exception('Invalid Suffix No. ' + suffix + '.')
        faas.rpu.rputype = rputype
    }
    
	def getListByQuery( namedQuery, criteria, params ) {
        if( ! params ) params = [ _start:0, _limit:25]
		return em.sqlContext.createNamedQuery( namedQuery )
						.setParameters( criteria )
						.setFirstResult( params._start )
						.setMaxResults( params._limit )
						.resultList
	}
	
	def faasExists( faasId ) {
		def data = em.sqlContext.createNamedQuery('faas:getState').setParameter('objid', faasId).singleResult
		if( data ) 
			return true
		return false
 	}
	
	def assignNewTdNo( faas ) {
		if( ! faas.tdNo ) return true
		if( faas.info.dataCapture && faas.info.dataCapture == false ) return true
		return false
	}
    
    def getCurrentRY() {
        def data = em.sqlContext.createNamedQuery('faas:getCurrentRY').singleResult 
        if( ! data ) return null 
        return data.ry 
    }
    
    def getFaasInfo( faasid ){
        def faasinfo = em.read(LISTSCHEMA_NAME, [objid:faasid])
        faasinfo.datacapture = faasinfo.datacapture as boolean 
        return faasinfo 
    }
    
    def checkFaasTxnReference( faasid ) {
        def ref = em.sqlContext.createNamedQuery('faas:getTxnReference').setParameter('objid', faasid).singleResult
        if( ref ) {
            throw new Exception(ref.message)
        }
    }
    
    void deletePin( faasinfo ) {
        em.sqlContext.createNamedExecutor('faas:deletePin').setParameter('pin', faasinfo.fullpin).execute()
    }
    
    void validateSubmit( faasinfo ) {
        if( faasinfo.docstate == FORAPPROVAL_STATE ) throw new Exception('FAAS has already been submitted.')
        if( faasinfo.docstate == FORPROVAPPROVAL_STATE ) throw new Exception('FAAS has already been submitted to province.')
        if( faasinfo.docstate == CURRENT_STATE) throw new Exception('FAAS is already current.')
        if( faasinfo.docstate == CANCELLED_STATE ) throw new Exception('FAAS has already been cancelled.')
        checkDuplicateTdNo( faasinfo.objid, faasinfo.tdno )
    }
    
    void validateSubmitToProvince( faasinfo ) {
        if( faasinfo.docstate == INTERIM_STATE ) throw new Exception('FAAS is still interim.')
        if( faasinfo.docstate == FORPROVAPPROVAL_STATE ) throw new Exception('FAAS has already been submitted to province.')
        if( faasinfo.docstate == CURRENT_STATE) throw new Exception('FAAS is already current.')
        if( faasinfo.docstate == CANCELLED_STATE ) throw new Exception('FAAS has already been cancelled.')
        checkDuplicateTdNo( faasinfo.objid, faasinfo.tdno )
    }
    
    void validateApprove( faasinfo ) {
        if( faasinfo.docstate == INTERIM_STATE ) throw new Exception('FAAS is still interim.')
        if( faasinfo.docstate == CURRENT_STATE) throw new Exception('FAAS is already current.')
        if( faasinfo.docstate == CANCELLED_STATE ) throw new Exception('FAAS has already been cancelled.')
        checkDuplicateTdNo( faasinfo.objid, faasinfo.tdno )
        checkCurrentLand( faasinfo )
    }
    
    //valida rpu specific information here
    void validateRPUInfo( faas ) {
        if( faas.rpu.rputype == LAND_TYPE ) {
            //TODO:validate LandRPU 
            println 'FAASService.validateRPUInfo -> LAND not yet implemented.'
        }
    }
    
    void validateProvinceApproval( faasinfo ) {
        if( faasinfo.docstate == INTERIM_STATE ) throw new Exception('FAAS is still interim.')
        if( faasinfo.docstate == FORAPPROVAL_STATE ) throw new Exception('FAAS must not be FORAPPROVAL state.')
        if( faasinfo.docstate == CURRENT_STATE) throw new Exception('FAAS is already current.')
        if( faasinfo.docstate == CANCELLED_STATE ) throw new Exception('FAAS has already been cancelled.')
        checkDuplicateTdNo( faasinfo.objid, faasinfo.tdno )
        checkCurrentLand( faasinfo )
    }
    
    void checkCurrentLand( faasinfo ) {
        // this validation is applied for land improvements.
        // approve improvements only when the land is current 
        if( faasinfo.rputype != 'land' ) {
            def landfaas = getFaasInfo( faasinfo.landfaasid )
            if( landfaas.docstate == CANCELLED_STATE ) throw new Exception('Land FAAS with TD No. ' + landfaas.tdno + ' has already been cancelled.')
            if( landfaas.docstate != CURRENT_STATE) throw new Exception('Land FAAS with TD No. ' + landfaas.tdno + ' is not yet current.\nApprove the land before approving this record.')
        }
    }
	
    Map updateFaasState( faas, state ) {
        faas.docstate = state
        em.sqlContext.createNamedExecutor('faas:updateState').setParameters( faas ).execute()
        em.sqlContext.createNamedExecutor('faas:updateListState').setParameters( faas ).execute()
        updatePinState( faas.rpu.fullpin, faas.info.claimno, faas.docstate )
        return faas 
    }
    
    void updatePinState( fullpin, claimno, docstate ) {
        def pincriteria = [pin:fullpin, claimno:claimno, docstate:docstate]
        if( claimno ) {
            em.sqlContext.createNamedExecutor('faas:updatePinStateWithClaimno').setParameters( pincriteria ).execute()
        }
        else {
            em.sqlContext.createNamedExecutor('faas:updatePinState').setParameters( pincriteria ).execute()
        }
    }
}

