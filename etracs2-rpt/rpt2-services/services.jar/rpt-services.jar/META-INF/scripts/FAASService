import com.rameses.annotations.*
import java.rmi.server.UID
import com.rameses.eserver.*;
import com.rameses.common.*;

class FAASService
{
	@PersistenceContext('java:system')
	def em_sys
	
	@PersistenceContext('main')
	def em
    
	@Env
	def env
	
	@Service('DateService')
	def dateSvc

    @Service('Var')
	def var

	@Service('SequenceService')
	def seqSvc
    
    @Service('LogService')
    def logSvc
    
    @Service('RPTLedgerService')
    def ledgerSvc 
    
    @Service('LandRPUService')
    def landRpuSvc
    
    @Service('BldgRPUService')
    def bldgRpuSvc
    
    @Service('MachRPUService')
    def machRpuSvc
    
    @Service('PlantTreeRPUService')
    def planttreeRpuSvc
    
    @Service('MiscRPUService')
    def miscRpuSvc

    def INTERIM_STATE = 'INTERIM'
    def FORAPPROVAL_STATE = 'FORAPPROVAL'
    def FORTAXMAP_STATE = 'FORTAXMAP'
    def FORPROVAPPROVAL_STATE = 'FORPROVAPPROVAL'
	def CURRENT_STATE = 'CURRENT'
	def CANCELLED_STATE = 'CANCELLED'
    
	def SCHEMA_NAME = 'faas'
    def SCHEMA_VERSION = '1.0'
    def LISTSCHEMA_NAME = 'faas:faaslist'
    
    def LAND_TYPE = 'land' 
    def BLDG_TYPE = 'bldg'
    def MACH_TYPE = 'mach'
    def PLANTTREE_TYPE = 'planttree'
    def MISC_TYPE = 'misc' 
    
	@ProxyMethod
	public List getFilterList() {
		def list = em.sqlContext.createNamedQuery('faas:getFaasFilters').resultList 
		list.each{
			it.info = em.serializer.read( it.info )
		}
		return list 
	}
	
	
	@ProxyMethod
	public def getList( search, params ) {
		return getList2( search, null, params ) 
	}
	
	@ProxyMethod
	public def getListByFilter( search, filter, params ) {
		if( ! filter ) {
			return getList( null, null) 
		}
		
		def qry = em.sqlContext.createNamedQuery('faas:findByFilter')
		
		def whereclause = ''
		if( filter.info.docstate ) {
			whereclause += ' docstate = $P{docstate} '
		}
		if( filter.info.barangay ) {
			if( whereclause.length() > 0 ) whereclause += ' AND ' 
			whereclause += ' barangayid = $P{barangayid} '
		}
		if( filter.info.classification ) {
			if( whereclause.length() > 0 ) whereclause += ' AND ' 
			whereclause += ' classid = $P{classid} '
		}
		if( filter.info.rputype ) {
			if( whereclause.length() > 0 ) whereclause += ' AND ' 
			whereclause += ' rputype = $P{rputype} '
		}
		if( filter.info.owner ) {
			if( whereclause.length() > 0 ) whereclause += ' AND ' 
			whereclause += ' taxpayerid = $P{taxpayerid} '
		}
		
		if( whereclause.length() > 0 ) {
			whereclause = ' WHERE ' + whereclause
		}
		
		def filtervalue = [
			docstate 	: ( filter.info.docstate ? filter.info.docstate 		: null ),
			barangayid 	: ( filter.info.barangay ? filter.info.barangay.objid : null ),
			classid 	: ( filter.info.classification ? filter.info.classification.objid : null ),
			rputype 	: ( filter.info.rputype ? filter.info.rputype : null ),
			taxpayerid 	: ( filter.info.owner  ? filter.info.owner.objid : null ),
		]
		
		return qry.setVars([whereclause:whereclause])
					.setParameters( filtervalue )
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList 
	}
	
	@ProxyMethod
	public def getList2( search, docstate, params ) {
		def result = null
        def criteria = buildSearchCriteria( search, docstate )
		if( ! search ) return getListByQuery('faas:findByState', criteria, params)
		if( (result = getListByQuery('faas:findByTdNo', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findByTaxpayerName', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findByPin', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findByBarangay', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findByCadastralLotNo', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findBySurveyNo', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findByBlockNo', criteria, params)) ) return result
		return result
	}
	
	@ProxyMethod
	public def getLookupList( searchText, params ) {
		def result;
		
		if( !searchText ) return getListByQuery('faas:getLookupList', [:], params )
		if((result = getListByQuery('faas:getLookupByTdNo', [tdno:searchText], params))) return result
		
		return result
	}
	
	@ProxyMethod
	public List getClearedFaasList( searchText, taxpayerid, params) {
		def criteria = buildSearchCriteria( searchText, 'CURRENT' )
		criteria.taxpayerid = taxpayerid 
		if( ! searchText ) return getListByQuery('faas:findClearedByState', criteria, params)
		def result = []
		if( (result = getListByQuery('faas:findClearedByTdNo', criteria, params)) ) return result
		if( (result = getListByQuery('faas:findClearedByPin', criteria, params)) ) return result
		return result
	}
	
	@ProxyMethod
	public List getRyList( rputype ) {
		if( !rputype || 'land'.equals( rputype ) ) {
			return em.sqlContext.createNamedQuery('faas:getLandRYSetting').resultList 
		}
		else if( 'bldg'.equals( rputype ) ) {
			return em.sqlContext.createNamedQuery('faas:getBldgRYSetting').resultList 
		}
		else if( 'mach'.equals( rputype ) ) {
			return em.sqlContext.createNamedQuery('faas:getMachRYSetting').resultList 
		}
		else if( 'planttree'.equals( rputype ) ) {
			return em.sqlContext.createNamedQuery('faas:getPlantTreeRYSetting').resultList 
		}
		else if( 'misc'.equals( rputype ) ) {
			return em.sqlContext.createNamedQuery('faas:getMiscRYSetting').resultList 
		}
		return []
	}
	
	def buildSearchCriteria( search, docstate ) {
		return [
            tdno : search,
            taxpayername : search+'%',
            pin : search,
            barangay : search,
            cadastrallotno : search,
            surveyno : search,
            blockno  : search,
			docstate : ( docstate ? docstate : '%' ),
        ]
	}
    
    @ProxyMethod
    public Map createFaas( ) {
        def ry = getCurrentRY()
        return [
            objid         : 'F' + new UID(),
            schemaname    : SCHEMA_NAME, 
            schemaversion : SCHEMA_VERSION,
            docstate      : INTERIM_STATE,
            transmitted   : false,
            info          : [   datacapture : true, 
                                prevmv      : 0.0, 
                                prevav      : 0.0, 
                                effectivityqtr  : 1, 
                                memoranda       : 'REVISED PURSUANT TO R.A. 7160', 
                                autonumber      : TO_BOOLEAN( var.td_autonumber ),
                                backtaxyrs      : 0, 
                                claimno			: '-',
								annotated		: false, 
                            ],
            rp            : [lgutype: var.lgu_type, attributes:[], autonumber:var.pin_autonumber, pintype:var.pin_type],
            rpu           : [ry:ry, classid:'RES', classcode:'RES', classname:'RES',suffix:0,info:[:], taxable:true, totalareasqm:0.0, totalareaha:0.0],
            previousfaases: [],
            lgutype       : var.lgu_type,
        ]
    }
    
    @ProxyMethod
    public Map validateCreate( faas ) {
        resolveRpuType( faas  )
        buildPinInfo( faas )
        validateRpu( faas )
        initFaasInfo( faas )
        return faas 
    }
    
    @ProxyMethod
    public Map create( faas ) {
        checkDuplicateTdNo( faas.objid, faas.info.tdno )
        validateRpu( faas )
        em.validate( faas.schemaname, faas )
        em.validate( LISTSCHEMA_NAME, faas )
		faas.txntimestamp = dateSvc.buildCustomTimeStamp( faas.info.issuedate ) 
        em.create( faas.schemaname, faas )
        em.create( LISTSCHEMA_NAME, faas )
        createPIN( faas ) 
		carryoverAnnotations( faas )
        insertTxnReference( faas )
        logSvc.log('CREATE','Faas', faas.objid)
        return faas 
    }
	
	void carryoverAnnotations( faas ) {
		if( faas.info.annotated == false ) return 
		//copy annotations of previous faas 
		faas.previousfaases.each{ prev ->
			def activeAnnotationList = em.sqlContext.createNamedQuery('faas:getActiveAnnotations')
										.setParameter( 'faasid', prev.faasid )
										.resultList 
			activeAnnotationList.each{ newAnnotation ->
				newAnnotation.objid 	= 'A' + new UID()
				newAnnotation.faasid 	= faas.objid 
				newAnnotation.tdno		= faas.info.tdno 
				em.create( newAnnotation.schemaname, newAnnotation )
			}
		}
	}
    
    @ProxyMethod
    public Map update( faas ) {
        checkDuplicateTdNo( faas.objid, faas.info.tdno )
        em.validate( faas.schemaname, faas )
        em.validate( LISTSCHEMA_NAME, faas )
        
		faas.txntimestamp = dateSvc.buildCustomTimeStamp( faas.info.issuedate ) 
		
        if( faas.docstate == INTERIM_STATE ) {
            em.update( faas.schemaname, faas )
        }
        else {
            em.update( faas.schemaname, faas, { diff ->
                logSvc.logB('UPDATE', 'FAAS', faas.objid, '', diff )
            } as UpdateChangeHandler )
        }
        em.update( LISTSCHEMA_NAME, faas )
        return faas 
    }    
    
    @ProxyMethod
    public Map open( faasid ) {
        def faas = em.read( SCHEMA_NAME, [objid:faasid] )
        if( !faas ) throw new Exception('FAAS does not exists.')
        faas.info.datacapture 	= TO_BOOLEAN( faas.info.datacapture )
		faas.info.annotated 	= ( faas.info.annotated ? TO_BOOLEAN( faas.info.annotated ) : false )
        faas.info.autonumber 	= TO_BOOLEAN( faas.info.autonumber )
        faas.rpu.taxable 		= TO_BOOLEAN( faas.rpu.taxable )
        initOpenRpuInfo( faas.rpu )
        return faas 
    }
    
    @ProxyMethod
    public Map getFaasInfo( faasid ){
        def faasinfo = em.read(LISTSCHEMA_NAME, [objid:faasid])
        if( ! faasinfo ) throw new Exception('Cannot open FAAS with ID No. ' + faasid )
        faasinfo.datacapture = TO_BOOLEAN( faasinfo.datacapture )
        return faasinfo 
    }
    
    @ProxyMethod
    public Map submit( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        validateSubmit( faasinfo )
        def faas = open( faasinfo.objid )
        updateFaasState( faas, FORAPPROVAL_STATE )
        logSvc.log('SUBMIT','FAAS', faasid)
        return faas 
    }
    
    @ProxyMethod
    public Map submitToProvince( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        validateSubmitToProvince( faasinfo )
        def faas = open( faasinfo.objid )
        updateFaasState( faas, FORPROVAPPROVAL_STATE )
        updateMessage(faas, null )
        updateAttachmentStates( faas, 'FORTRANSMITTAL' )
        sendToOutbox( faas )
        logSvc.log('SUBMIT_TO_PROVINCE','FAAS', faasid)
        return faas 
    }
    
    @ProxyMethod
    public Map approve( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        validateApprove( faasinfo )
        def faas = open( faasinfo.objid )
        updateAutonumberTdNo( faas  )
        invokeCommonApproveActions( faas )
        logSvc.log('APPROVE','FAAS', faas.objid)
        return faas 
    }
    
    @ProxyMethod
    public Map approveByProvince( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        validateProvinceApproval( faasinfo )
        def faas = open( faasinfo.objid )
        updateAutonumberTdNo( faas )
		assignNextPin( faas ) 
        invokeCommonApproveActions( faas )
        logSvc.log('APPROVEBYPROVINCE','FAAS', faas.objid)
        return faas 
    }
        
    @ProxyMethod
    public Map disapproveByProvince( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        if( faasinfo.docstate == INTERIM_STATE) throw new Exception('FAAS is still interim.')
        if( faasinfo.docstate == FORAPPROVAL_STATE) throw new Exception('FAAS has already been submitted for approval.')
        if( faasinfo.docstate == CURRENT_STATE) throw new Exception('FAAS is already current.')
        if( faasinfo.docstate == CANCELLED_STATE) throw new Exception('FAAS has already been cancelled.')
        def faas = open( faasinfo.objid )
        updateFaasState( faas, FORAPPROVAL_STATE )
        moveOutboxMessageToProcessed( faasid )
        return faas 
    }
    
    @ProxyMethod
    public Map onlineApprove( faasid, approvaldata  ) {
        def faas = open( faasid )
		if( faas.docstate == CURRENT_STATE || faas.docstate == CANCELLED_STATE)  {
            //the faas is already approve
            //this happens if the approval was done manually
            //so just return the faas 
            return [date:new Date(), status:'Faas is already ' + faas.docstate] 
        }
        faas.info.tdno          = approvaldata.tdno
        faas.info.dtapproved    = approvaldata.dtapproved 
        faas.message            = null 
        //update pin for land type 
        if( faas.info.datacapture == false && faas.rpu.rputype == LAND_TYPE) {
            deletePin( [fullpin: faas.rpu.fullpin] )
            faas.rp.pin         = approvaldata.pin 
            faas.rpu.fullpin    = approvaldata.fullpin 
            createOnlinePIN( faas ) 
        }
        em.update( faas.schemaname, faas )
        em.update(LISTSCHEMA_NAME, faas )
        invokeCommonApproveActions( faas )
        return [date:new Date(), status:'Processed successfully.']
    }
    
    @ProxyMethod
    public Map onlineDisapprove( faasid, disapprovaldata ) {
        def faas = open( faasid  )
        if( faas.docstate == CURRENT_STATE || faas.docstate == CANCELLED_STATE){
            //the faas has already been approved or superseded
            //do not alter the state, just a message 
            return [date:new Date(), status:'Faas is already ' + faas.docstate]
        }  
        faas.message = disapprovaldata.message 
        updateMessage( faas, faas.message )
        updateFaasState( faas, FORAPPROVAL_STATE )
        return [date:new Date(), status:'Processed successfully.']
    }
    
    @ProxyMethod
    public Map approveSubdivisionFaas( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        validateApprove( faasinfo )
        def faas = open( faasinfo.objid )
        updateAutonumberTdNo( faas  )
        validateRPUInfo( faas )
        updateFaasState( faas, CURRENT_STATE )
        cancelPreviousFaas( faas )
        deleteTxnReference( faas )
        ledgerSvc.postSubdivisionFaas( faas.objid )
        logSvc.log('APPROVE','FAAS', faas.objid)
        return faas 
    }
    
    @ProxyMethod
    public Map approveConsolidatedFaas( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        validateApprove( faasinfo )
        def faas = open( faasinfo.objid )
        assignNextPin( faas )
        updateAutonumberTdNo( faas  )
        validateRPUInfo( faas )
        updateFaasState( faas, CURRENT_STATE )
        cancelPreviousFaas( faas )
        deleteTxnReference( faas )
        ledgerSvc.postConsolidatedFaas( faas.objid )
        logSvc.log('APPROVE','FAAS', faas.objid)
        return faas 
    }
    
    void invokeCommonApproveActions( faas ) {
        validateRPUInfo( faas )
		updateFaasState( faas, CURRENT_STATE )
		updateImprovementLandReference( faas ) 
		approveCarryOverAnnotations( faas )
		cancelPreviousFaas( faas )
		deleteTxnReference( faas )
		ledgerSvc.post( faas.objid )
		moveOutboxMessageToProcessed( faas.objid )
		logSvc.log('APPROVE','FAAS', faas.objid)
    }
    
	void approveCarryOverAnnotations( faas ){
		// approve carryover annotations 
		em.sqlContext.createNamedExecutor('faas:updateFAASAnnotationInfo')
				.setParameters([
					faasid:faas.objid, tdno:faas.info.tdno, docstate:'APPROVED'
				])
				.execute() 
	
		//cancel previous annotations 
		faas.previousfaases.each{ prev -> 
			em.sqlContext.createNamedExecutor('faas:updateFAASAnnotationState')
				.setParameters([faasid:prev.faasid, docstate:'CANCELLED'])
				.execute() 
		}
	}
	
	void updateFAASAnnotationState( faasid, docstate ) {
		
	}
	
	
    @ProxyMethod
    public void delete( faasid ) {
        def faasinfo = getFaasInfo( faasid )
        
        //validate delete 
        if( faasinfo.docstate == FORPROVAPPROVAL_STATE ) throw new Exception('FAAS has already been submitted for province approval.' )
		if( faasinfo.docstate == CURRENT_STATE ) throw new Exception('FAAS is already current.' )
		if( faasinfo.docstate == CANCELLED_STATE ) throw new Exception('FAAS has already been cancelled.' )
		
        checkFaasTxnReference( faasid )
		deleteTxnReference( [objid:faasid ] )
        
        //delete record
        if( faasinfo.datacapture ) {
            deletePin( faasinfo )
        }
		deleteFAASAnnotations( faasid )
        em.delete(LISTSCHEMA_NAME, [objid:faasid] )
        em.delete(SCHEMA_NAME, [objid:faasid ] )
    }
    
	void deleteFAASAnnotations( faasid ) {
		em.sqlContext.createNamedExecutor('faas:deleteFAASAnnotations').setParameter('faasid', faasid).execute()
	}
	
    @ProxyMethod
    public def getNextParcelNo( barangay, section ) {
        def key = barangay.pin + '-' + buildSectionNo( section )
        return seqSvc.getCurrentSeries( key )
    }
    
    @ProxyMethod
    public def buildSectionNo( section )  {
		def sectionLen = Integer.parseInt( var.pin_section_length )
		return section.toString().padLeft(sectionLen, '0')
	}
	
	@ProxyMethod
    public def buildParcelNo( newSeries ) {
		def parcelLen = Integer.parseInt( var.pin_parcel_length )
		return newSeries.toString().padLeft( parcelLen,'0')
	}
    
    @ProxyMethod
    public def resolveTxnType( txntype ) {
        def type = getTxnTypes().find{ it.txntype == txntype }
        if( ! type ) throw new Exception('TxnType ' + txntype + ' is not defined in TxnTypes.')
        return type 
    }
    
    @ProxyMethod
    public void assignNextPin( faas  ) {
        def autonumber = TO_BOOLEAN( faas.rp.autonumber )
		def datacapture = TO_BOOLEAN (faas.info.datacapture )
		if( ! autonumber ) return 
		if( faas.rp.pin == '-' ) return 
		if( faas.rpu.rputype != LAND_TYPE ) return 
		if( datacapture ) return 
		if( 'MC,ND,SD,CS'.indexOf( faas.info.txntype ) < 0 ) return 
		
        def key =   faas.rp.provcityindex + '-' + 
                    faas.rp.munidistrictindex + '-' + 
                    faas.rp.barangayindex + '-' + faas.rp.section 
					
        def nextparcel      = seqSvc.getNextSeries( key )
        faas.rp.pin         = key + '-' + buildParcelNo( nextparcel )
        faas.rpu.fullpin    = faas.rp.pin 
        checkDuplicatePin( faas.info.txntype, faas.info.datacapture, faas.rpu.fullpin, faas.info.claimno  )
		createPIN( faas ) 
		em.update( faas.schemaname, faas )
		em.update( LISTSCHEMA_NAME, faas )
    }
    
    @ProxyMethod
	public def assignPin( faas, key, section, newSeries, oldSeries ) {
		if( faas.rpu.rputype != 'land') throw new Exception("Only Land RPU could be assigned a new PIN.")
		if( ! faasExists( faas.objid ) ) throw new Exception("FAAS not found.")
		
		validateParcelSeries( key, newSeries, oldSeries ) 
		def sectionNo       = buildSectionNo( section )
		def parcelNo        = buildParcelNo( newSeries )
		def pin             = key + '-' + parcelNo
        faas.rp.pin         = pin 
        faas.rpu.fullpin    = pin 
		checkDuplicatePin( faas.info.txntype, faas.info.datacapture, faas.rpu.fullpin, faas.info.claimno  )
		seqService.updateNextSeries( key, newSeries + 1)
		
		/* update faas pin related info */
		faas.rp.section  = sectionNo
		faas.rp.parcel   = parcelNo
		em.update( faas.schemaname, faas )
        def params = [objid:faas.objid, fullpin:faas.rpu.fullpin, pin:faas.rp.pin ]
		em.sqlContext.createNamedExecutor('faas:updateFaasListPin').setParameters(params ).execute()
		return faas
	}
    
    private void validateParcelSeries( key, newSeries, oldSeries) {
		def seq = em_sys.sqlContext.createNamedQuery("sequence:getCurrentSeries").setParameter("objid",key).singleResult
		if( seq && oldSeries != seq.currentSeries ) throw new Exception("Current Series has been modified. Please try again.")
		if( seq && seq.currentSeries > newSeries) throw new Exception("New Series $newSeries must be greater than or equal to $seq.currentSeries")
	}
    
    /*-----------------------------------------------------------------------
    ** Transaction Support Methods
    -----------------------------------------------------------------------*/
    @ProxyMethod
    public Map createNewDiscovery() {
        def faas            = createFaas() 
        faas.info.txntype   = 'ND'
        faas.info.txn       = resolveTxnType( faas.info.txntype )
        faas.info.datacapture = false 
        return faas 
    }
	
    @ProxyMethod
	public Map initTransaction( txntype, prevtdno, autonumber, claimno) {
		return initTransaction2( txntype, prevtdno, autonumber, null )
	}
	
	@ProxyMethod
    public Map initTransaction2( txntype, prevtdno, autonumber, claimno, newrysetting ) {
		autonumber = TO_BOOLEAN( var.td_autonumber )
		def faas = em.sqlContext.createNamedQuery('faas:getInfoByTdno').setParameter('tdno', prevtdno).singleResult
        if( ! faas ) throw new Exception('FAAS ' + prevtdno + ' does not exists.')
        if( faas.docstate == CANCELLED_STATE ) throw new Exception('FAAS ' +  prevtdno + ' has already been cancelled.')
        if( faas.docstate != CURRENT_STATE ) throw new Exception('FAAS ' +  prevtdno + ' is not current.')
        
		checkFaasTxnReference( faas.objid )
		checkDuplicatePin( txntype, false, faas.fullpin, claimno  )
		if( txntype != 'GR' ) {
			checkLedgerBalanceByDate( faas, faas.issuedate )
		}
		
        faas = open( faas.objid )
        faas.info.claimno = claimno 
        if( txntype == 'TR' ) {
			return initTransfer( faas, txntype, prevtdno, autonumber )
		}
		else if( txntype == 'GR' ) {
			return initGeneralRevision( faas, txntype, prevtdno, autonumber, newrysetting )
		}
        else if( 'CC,RE,CE,CT'.indexOf( txntype ) >= 0 ) {
			return initReassessment( faas, txntype, prevtdno, autonumber )
		}
		else if( 'MC'.indexOf( txntype ) >= 0 ) {
			return initMultipleClaim( faas, txntype, prevtdno, autonumber )
		}
		else {
            throw new Exception('TxnType ' + txntype + ' not yet supported.')
        }
    }
    
    
    @ProxyMethod
    public void checkDuplicateTdNo( faasid, tdno ) {
        if( ! tdno ) return 
        def data = em.sqlContext.createNamedQuery('faas:checkDuplicateTdNo').setParameters([objid:faasid, tdno:tdno]).singleResult
        if( data ) throw new Exception('TD No. ' + tdno + ' is already existing.')
    }
    
    @ProxyMethod
    public List getLandImprovementIds( landfaasid) {
        return em.sqlContext.createNamedQuery('faas:getLandImprovementIds').setParameter('landfaasid', landfaasid ).resultList 
    }
    
    
    @ProxyMethod
    public List getTxnTypes() {
        return [
            [txntype:'DC', caption:'Data Capture'],
            [txntype:'GR', caption:'General Revision'],
            [txntype:'ND', caption:'New Discovery'],
            [txntype:'TR', caption:'Transfer of Ownership'],
            [txntype:'SD', caption:'Subdivision'],
            [txntype:'CS', caption:'Consolidation'],
            [txntype:'CC', caption:'Change Classification'],
            [txntype:'CT', caption:'Change Taxability'],
            [txntype:'CE', caption:'Correction'],
            [txntype:'CTD', caption:'Cancellation'],
            [txntype:'RE', caption:'Reassessment'],
            [txntype:'MC', caption:'Multiple Claim'],
        ]
        //return ['DC','GR','RL','ND','IL','LI','TR','MU','SD','CS','PR','PC','CC','AR','CT','CD','CE','BI','CTD','RE','MC','CP']
    }
	
	@ProxyMethod
	public List getTitleTypeList() {
		return ['OCT','TCT','CLOA','EP', 'KOT', 'CLT', 'T', 'P']
	}
     
    @ProxyMethod
    public List getBarangays() {
        return em.sqlContext.createNamedQuery('faas:getBarangays').resultList 
    }
    
    @ProxyMethod
    public void checkLedgerBalance( faas ) {
		checkLedgerBalanceByDate( faas, dateSvc.serverDate )
    }
	
	@ProxyMethod
    public void checkLedgerBalanceByDate( faas, refdate ) {
		def ledger = em.sqlContext.createNamedQuery('faas:getLedgerInfo').setParameter('objid', faas.ledgerid ).singleResult
        if( !ledger) throw new Exception('Cannot open Ledger for FAAS ' + faas.tdno + '.')
        
		//check clearance against FAAS issuedate 
		def msg = 'Ledger is not fully paid.'
        def parseddate = dateSvc.parseDate( refdate, null )
        if( ledger.docstate == 'PENDING' ) throw new Exception('Ledger is not yet approved.\nLet LandTax approve the ledger before processing the transaction.')
        if( ledger.docstate == 'CANCELLED') throw new Exception('Ledger has already been cancelled.')
		if( TO_BOOLEAN( ledger.taxable ) == false ) return 
		if( ledger.assessedvalue > 0.0 && ledger.lastyearpaid < parseddate.year ) throw new Exception( msg )
        if( ledger.assessedvalue > 0.0 && ledger.lastqtrpaid < 4 ) throw new Exception( msg )
    }
    
    
    @ProxyMethod
    public void initFaasInfo( faas ) {
        faas.info.txntype = faas.info.txn.txntype 
        String rputype = faas.rpu.rputype 
        if( rputype != LAND_TYPE ) {
            updateLandRPInfo( faas )
        }
        if( rputype == LAND_TYPE) landRpuSvc.initLandRpu( faas.rpu )
        else if( rputype == BLDG_TYPE) bldgRpuSvc.initBldgRpu( faas )
        else if( rputype == MACH_TYPE) machRpuSvc.initMachRpu( faas )
        else if( rputype == PLANTTREE_TYPE) planttreeRpuSvc.initPlantTreeRpu( faas )
        else if( rputype == MISC_TYPE) miscRpuSvc.initMiscRpu( faas )
        else throw new Exception('Invalid RPU Type ' + rputype + '.')
    }
    
    
    @ProxyMethod
    public void checkSuffix( rputype, suffix ) {
        if( rputype == LAND_TYPE && suffix != 0  ) {
            throw new Exception('Suffix must be zero for land property.')
        }
        else if( rputype == BLDG_TYPE && (suffix < 1001 || suffix > 1999 )) {
            throw new Exception('Suffix must be between 1001 and 1999 for building property.')
        }
        else if( rputype == MACH_TYPE && (suffix < 2001 || suffix > 2999 )) {
            throw new Exception('Suffix must be between 2001 and 2999 for machine property.')
        }
        else if( rputype == PLANTTREE_TYPE && (suffix < 3001 || suffix > 6999 )) {
            throw new Exception('Suffix must be betwwen 3001 and 6999 for plant/tree property.')
        }
        else if( rputype == MISC_TYPE && (suffix < 7001 || suffix > 7999 )) {
            throw new Exception('Suffix must be betwwen 7001 and 7999 for miscellaneous property.')
        }
    }
    
    @ProxyMethod
    public void createPIN( faas ) {
        def validTxnTypes = ['ND','SD','CS','MC']
		if( faas.info.datacapture == true || validTxnTypes.contains( faas.info.txntype ) ) {
			def pin = [pin:faas.rpu.fullpin, claimno:faas.info.claimno, docstate:faas.docstate]
			em.sqlContext.createNamedExecutor('faas:insertPin').setParameters( pin ).execute()
		}
    }
	
	@ProxyMethod
    public void createOnlinePIN( faas ) {
        def pin = [pin:faas.rpu.fullpin, claimno:faas.info.claimno, docstate:faas.docstate]
		em.sqlContext.createNamedExecutor('faas:insertPin').setParameters( pin ).execute()
    }
    
    
    @ProxyMethod
    public void updateAutonumberTdNo( faas ) {
        faas.info.autonumber = TO_BOOLEAN( faas.info.autonumber )
        faas.info.autonumber = ( faas.info.datacapture == true ? false : faas.info.autonumber )
        
        if( faas.info.datacapture == true ||  faas.info.autonumber == false ) {
            return 
        }
        //TD Formatting Options:
        // Y - revision year
        // P - province index 
        // C - city index 
        // M - municipality index 
        // D - district index 
        // B - barangay index 
        def ry              = faas.rpu.ry +''
        def provindex       = faas.rp.provcityindex 
        def cityindex       = faas.rp.provcityindex 
        def muniindex       = faas.rp.munidistrictindex
        def districtindex   = faas.rp.munidistrictindex
        def barangayindex   = faas.rp.barangayindex
        
        def values = [Y:ry, P:provindex, C:cityindex, M:muniindex, D:districtindex, B:barangayindex]
        def tdno   = var.td_format 
        values.keySet().each {
            tdno = tdno.replace( it, values[it] )
        }
        tdno = tdno + '-' + seqSvc.getNextFormattedSeries( tdno )
        checkDuplicateTdNo( faas.objid, tdno )
        faas.info.tdno = tdno 
        em.update(faas.schemaname, faas )
        em.update(LISTSCHEMA_NAME, faas )
    }
	
	@ProxyMethod
	public List getClassificationList() {
		return em.sqlContext.createNamedQuery('faas:getClassificationList').resultList 
	}
    
	@ProxyMethod
	public def createFilter( filter ) {
		filter.objid = 'F' + new UID()
		def data = [:]
		data.putAll( filter )
		data.info = em.serializer.write( data.info )
		em.sqlContext.createNamedExecutor('faas:createFilter').setParameters( data ).execute()
		return filter 
	}
	
	@ProxyMethod
	public void removeFilter( filter ) {
		em.sqlContext.createNamedExecutor('faas:removeFilter').setParameter('objid', filter.objid).execute()
	}
    
    /*-----------------------------------------------------------------------
    ** Attachment Support 
    -----------------------------------------------------------------------*/
    @ProxyMethod
    public void addAttachment( faasid, attachment ) {
        attachment.objid    = 'FA' + new UID()
        attachment.faasid   = faasid 
        attachment.docstate = 'INTERIM' 
        em.validate('faas:faasattachment', attachment )
        em.create('faas:faasattachment', attachment )
    }
    
    @ProxyMethod
    public void removeAttachment( faasid, attachment )  {
        em.delete( 'faas:faasattachment', attachment )
    }
    
    @ProxyMethod
    public List getAttachments( faasid ) {
        return em.sqlContext.createNamedQuery('faas:getAttachments').setParameter('faasid', faasid).resultList
    }
    
    
    
    /*-----------------------------------------------------------------------
    ** Support Methods
    -----------------------------------------------------------------------*/
    /* for land approval, update references of all land improvements to the new faas 
    *  applied only for the following if the transaction is not 
    *  datacapture 
    */
    void updateImprovementLandReference( faas ) {
        if( faas.info.datacapture == true ) return 
        if( faas.rpu.rputype != LAND_TYPE ) return 
        def prevfaasid = ( faas.previousfaases ? faas.previousfaases[0].faasid : null )
        def improvementIds = getLandImprovementIds( prevfaasid)
        improvementIds.each { 
            def improvementfaas = em.read( faas.schemaname, [objid:it.objid ] )
            improvementfaas.info.landfaasid          = faas.objid 
            improvementfaas.info.landfaastaxpayerid  = faas.info.taxpayerid 
            em.update( improvementfaas.schemaname, improvementfaas )
            
            // update faaslist landref
            def faaslist = [objid:it.objid, landfaasid:faas.objid, landfaastaxpayerid:faas.info.taxpayerid]
            em.sqlContext.createNamedExecutor('faas:updateListLandReference').setParameters(faaslist).execute()
        }
    }
    
    
    
    
    
    public void initOpenRpuInfo( rpu ) {
        if( rpu.rputype == LAND_TYPE ) {
            rpu.info.landdetails.each{ it.taxable = TO_BOOLEAN( it.taxable )}
			rpu.info.planttreedetails.each {
				it.bearing = it.bearing * 1.0 
				it.nonbearing = it.nonbearing * 1.0 
			}
			rpu.info.planttotal.bearing  = rpu.info.planttotal.bearing * 1.0 
			rpu.info.planttotal.nonbearing  = rpu.info.planttotal.nonbearing * 1.0 
        }
        else if( rpu.rputype == BLDG_TYPE ) {
            rpu.info.swornstatement = TO_BOOLEAN( rpu.info.swornstatement  )
            rpu.info.predominant  = TO_BOOLEAN( rpu.info.predominant  )
            rpu.info.condominium  = TO_BOOLEAN( rpu.info.condominium  )
            rpu.info.autocomputebldgdepreciation  = TO_BOOLEAN( rpu.info.autocomputebldgdepreciation  )
            rpu.info.depreciatecoreanditemseparately  = TO_BOOLEAN( rpu.info.depreciatecoreanditemseparately  )
        }
        else if( rpu.rputype == MACH_TYPE ) {
            //throw new Exception('FAASService.initOpenRpuInfo not yet implemented')
        }
        else if( rpu.rputype == PLANTTREE_TYPE ) {
            rpu.info.planttreedetails.each{
				it.bearing = it.bearing * 1.0 
				it.nonbearing = it.nonbearing * 1.0 
			}
			rpu.info.totalbearing = rpu.info.totalbearing * 1.0
			rpu.info.totalnonbearing = rpu.info.totalnonbearing * 1.0
        }
        else if( rpu.rputype == MISC_TYPE ) {
            rpu.info.miscrpuitems;
        }
        else {
            throw new Exception('RPU Type ' + rpu.rputype + ' is not supported.')
        }
    }
    
    
    void buildPinInfo( faas ) {
        def lgu = em.sqlContext.createNamedQuery('faas:getLgu').setParameter('objid', faas.rp.munidistrictid).singleResult
        if( !lgu) throw new Exception('Cannot load LGU for index ' + faas.rp.munidistrictid + '.' )
        def parentlgu = em.sqlContext.createNamedQuery('faas:getLgu').setParameter('objid', lgu.parentid).singleResult
        if( !parentlgu) throw new Exception('Cannot load Parent LGU for index ' + lgu.parentid  + '.' )
        
        faas.rp.provcity = parentlgu.lguname 
        faas.rp.provcityindex = parentlgu.indexno 
        faas.rp.munidistrict = lgu.lguname 
        faas.rp.munidistrictindex = lgu.indexno 
        faas.rp.pin = faas.rp.provcityindex + '-' + faas.rp.munidistrictindex + '-' + faas.rp.barangayindex + '-' + faas.rp.section + '-' + faas.rp.parcel 
        faas.rpu.fullpin = buildFullPin( faas )
    }
    
    String buildFullPin( faas ) {
        String fullpin = faas.rp.pin 
        if( faas.rpu.rputype != LAND_TYPE ) {
            fullpin += '-' + faas.rpu.suffix 
        }
        if( faas.rpu.rputype == BLDG_TYPE && faas.rpu.info.iscondo ) {
            fullpin += '-' + faas.rpu.info.subsuffix
        }
        return fullpin 
    }
    
    void validateRpu( faas ) {
        validateRY( faas )
        checkDuplicatePin( faas.info.txntype, faas.info.datacapture, faas.rpu.fullpin, faas.info.claimno  )
        validateSuffix( faas )
        if( faas.rpu.rputype != LAND_TYPE ) checkIfLandExist( faas )
    }
    
    void validateRY( faas ) {
        int ry = faas.rpu.ry 
        def query = 'faas:getRYSetting_' + faas.rpu.rputype // results to getRYSetting_land, etc
        def data = em.sqlContext.createNamedQuery(query).setParameter('ry', ry ).singleResult
        if( ! data ) throw new Exception('Revision Setting ' + faas.rpu.ry + ' does not exist.')
    }
    
    void checkDuplicatePin( txntype, datacapture, fullpin, claimno ) {
        def checktxntypes = 'ND/SD/CS/DC/MC'
        if( datacapture == false && checktxntypes.indexOf( txntype ) < 0 ) {
            return ;
        }
        
        //check for unique pin and claimno  only
        def data = em.sqlContext.createNamedQuery('faas:getPinClaimno').setParameters([pin:fullpin, claimno:claimno]).singleResult
        if( data ) throw new Exception('PIN ' + fullpin + ' already exists.')
    }
        
    void validateSuffix( faas ) {
        int suffix = faas.rpu.suffix 
        if( suffix == 0 ) return 
        if( suffix >= 1001 && suffix <= 1999 ) return 
        if( suffix >= 2001 && suffix <= 2999 ) return 
        if( suffix >= 3001 && suffix <= 6999 ) return 
        if( suffix >= 7001 && suffix <= 7999 ) return 
        throw new Exception('Invalid Suffix No. ' + suffix + '.')
    }
    
    void checkIfLandExist( faas ){
    	def faasland = em.sqlContext.createNamedQuery( 'faas:getInfoByPin' ).setParameter( 'pin', faas.rp.pin ).singleResult;
    	if( !faasland ) throw new Exception( 'Land reference is required.' );
    }
    
    void resolveRpuType( faas ) {
        int suffix = faas.rpu.suffix 
        def rputype = null 
        if( suffix == 0 ) rputype = LAND_TYPE
        else if( suffix >= 1001 && suffix <= 1999 ) rputype = BLDG_TYPE
        else if( suffix >= 2001 && suffix <= 2999 ) rputype = MACH_TYPE
        else if( suffix >= 3001 && suffix <= 6999 ) rputype = PLANTTREE_TYPE
        else if( suffix >= 7001 && suffix <= 7999 ) rputype = MISC_TYPE
        else throw new Exception('Invalid Suffix No. ' + suffix + '.')
        faas.rpu.rputype = rputype
    }
    
    void updateLandRPInfo( faas ) {
    	def faasland = em.sqlContext.createNamedQuery( 'faas:getLandReferenceByPin' ).setParameter( 'pin', faas.rp.pin ).singleResult
        faasland = em.read( faasland.schemaname, faasland )
    	faas.info.landfaasid = faasland.objid
    	faas.info.landfaastaxpayerid = faasland.info.taxpayerid
    	faas.rp = faasland.rp
    }
    
	def getListByQuery( namedQuery, criteria, params ) {
        if( ! params ) params = [ _start:0, _limit:25]
		return em.sqlContext.createNamedQuery( namedQuery )
						.setParameters( criteria )
						.setFirstResult( params._start )
						.setMaxResults( params._limit )
						.resultList
	}
	
	def faasExists( faasId ) {
		def data = em.sqlContext.createNamedQuery('faas:getState').setParameter('objid', faasId).singleResult
		if( data ) 
			return true
		return false
 	}
	
	def assignNewTdNo( faas ) {
		if( ! faas.tdNo ) return true
		if( faas.info.dataCapture && faas.info.dataCapture == false ) return true
		return false
	}
    
    def getCurrentRY() {
        def data = em.sqlContext.createNamedQuery('faas:getCurrentRY').singleResult 
        if( ! data ) return null 
        return data.ry 
    }
    
    
    
    def checkFaasTxnReference( faasid ) {
        def ref = em.sqlContext.createNamedQuery('faas:getTxnReference').setParameter('objid', faasid).singleResult
        if( ref ) {
            throw new Exception(ref.message)
        }
    }
    
    
    void insertTxnReference( faas ) {
        if( faas.previousfaases )  {
            def prevfaas = faas.previousfaases[0]
            def msg = 'FAAS ' + prevfaas.tdno + ' is currently referenced by a ' + faas.info.txntype + ' transaction'
            if( faas.info.tdno ) {
                msg = 'FAAS ' + prevfaas.tdno + ' is currently referenced by FAAS ' + faas.info.tdno + '.' 
            }
            def ref = [
                objid       :   prevfaas.faasid,
                refid       :   faas.objid,
                refname     :   'FAAS',
                message     :   msg,
                txndate     :   faas.info.issuedate,
            ]
            em.sqlContext.createNamedExecutor('faas:insertTxnReference').setParameters( ref ).execute()
        }
    }
    
    void deletePin( faasinfo ) {
        em.sqlContext.createNamedExecutor('faas:deletePin').setParameter('pin', faasinfo.fullpin).execute()
    }
    
    void validateSubmit( faasinfo ) {
        if( faasinfo.docstate == FORAPPROVAL_STATE ) throw new Exception('FAAS has already been submitted.')
        if( faasinfo.docstate == FORPROVAPPROVAL_STATE ) throw new Exception('FAAS has already been submitted to province.')
        if( faasinfo.docstate == CURRENT_STATE) throw new Exception('FAAS is already current.')
        if( faasinfo.docstate == CANCELLED_STATE ) throw new Exception('FAAS has already been cancelled.')
        checkDuplicateTdNo( faasinfo.objid, faasinfo.tdno )
        validateTransactionInfo( faasinfo )
    }
    
    void validateSubmitToProvince( faasinfo ) {
        if( faasinfo.docstate == INTERIM_STATE ) throw new Exception('FAAS is still interim.')
        if( faasinfo.docstate == FORPROVAPPROVAL_STATE ) throw new Exception('FAAS has already been submitted to province.')
        if( faasinfo.docstate == CURRENT_STATE) throw new Exception('FAAS is already current.')
        if( faasinfo.docstate == CANCELLED_STATE ) throw new Exception('FAAS has already been cancelled.')
        checkDuplicateTdNo( faasinfo.objid, faasinfo.tdno )
        validateTransactionInfo( faasinfo )
    }
    
    void validateApprove( faasinfo ) {
        if( faasinfo.docstate == INTERIM_STATE ) throw new Exception('FAAS is still interim.')
        if( faasinfo.docstate == CURRENT_STATE) throw new Exception('FAAS is already current.')
        if( faasinfo.docstate == CANCELLED_STATE ) throw new Exception('FAAS has already been cancelled.')
        checkDuplicateTdNo( faasinfo.objid, faasinfo.tdno )
        checkCurrentLand( faasinfo )
        validateTransactionInfo( faasinfo )
    }
    
    void validateTransactionInfo( faasinfo ) {
        if( faasinfo.txntype == 'TR' ) {
            if( faasinfo.prevtaxpayerid == faasinfo.taxpayerid ) {
                throw new Exception('Taxpayer should not be equal to previous taxpayer or owner.')
            }
        }
    }
    
    //valida rpu specific information here
    void validateRPUInfo( faas ) {
        if( faas.rpu.rputype == LAND_TYPE ) {
            //TODO:validate LandRPU 
            println 'TODO:FAASService.validateRPUInfo -> LAND not yet implemented.'
        }
    }
    
    void validateProvinceApproval( faasinfo ) {
        if( faasinfo.docstate == INTERIM_STATE ) throw new Exception('FAAS is still interim.')
        if( faasinfo.docstate == FORAPPROVAL_STATE ) throw new Exception('FAAS must not be FORAPPROVAL state.')
        if( faasinfo.docstate == CURRENT_STATE) throw new Exception('FAAS is already current.')
        if( faasinfo.docstate == CANCELLED_STATE ) throw new Exception('FAAS has already been cancelled.')
        checkDuplicateTdNo( faasinfo.objid, faasinfo.tdno )
        checkCurrentLand( faasinfo )
    }
    
    void checkCurrentLand( faasinfo ) {
        // this validation is applied for land improvements.
        // approve improvements only when the land is current 
        if( faasinfo.rputype != 'land' ) {
            def landfaas = getFaasInfo( faasinfo.landfaasid )
            if( landfaas.docstate == CANCELLED_STATE ) throw new Exception('Land FAAS with TD No. ' + landfaas.tdno + ' has already been cancelled.')
            if( landfaas.docstate != CURRENT_STATE) throw new Exception('Land FAAS with TD No. ' + landfaas.tdno + ' is not yet current.\nApprove the land before approving this record.')
        }
    }
	
    Map updateFaasState( faas, state ) {
        faas.docstate = state
		em.update( faas.schemaname , faas )
		em.update( LISTSCHEMA_NAME, faas ) 
        // em.sqlContext.createNamedExecutor('faas:updateState').setParameters( faas ).execute()
        // em.sqlContext.createNamedExecutor('faas:updateListState').setParameters( faas ).execute()
        updatePinState( faas.rpu.fullpin, faas.info.claimno, faas.docstate )
        return faas 
    }
    
    void updatePinState( fullpin, claimno, docstate ) {
        def pincriteria = [pin:fullpin, claimno:claimno, docstate:docstate]
        if( claimno ) {
            em.sqlContext.createNamedExecutor('faas:updatePinStateWithClaimno').setParameters( pincriteria ).execute()
        }
        else {
            em.sqlContext.createNamedExecutor('faas:updatePinState').setParameters( pincriteria ).execute()
        }
    }
    
    void cancelPreviousFaas( faas ) {
        faas.previousfaases.each {
            def prevfaas = em.read( faas.schemaname, [objid:it.faasid])
            if( prevfaas ) {
                prevfaas.docstate           = CANCELLED_STATE 
                prevfaas.info.cancelreason  = faas.info.txntype 
                prevfaas.info.canceldate    = faas.info.issuedate 
                prevfaas.info.cancelledbytdnos = faas.info.tdno 
                em.update( prevfaas.schemaname, prevfaas )
                def previnfo = [objid:prevfaas.objid, docstate:CANCELLED_STATE, cancelreason:faas.info.txntype, canceldate:faas.info.issuedate, cancelledbytdnos:faas.info.tdno ]
                em.sqlContext.createNamedExecutor('faas:updateListCancelInfo').setParameters( previnfo  ).execute() 
            }
        }
    }
    
    void deleteTxnReference( faas ) {
        em.sqlContext.createNamedExecutor('faas:deleteTxnReference').setParameter('refid', faas.objid ).execute()
    }
    
    Map initTransfer( faas, txntype, prevtdno, autonumber ) {
        //
        //set transfer related info 
        def parseddate = dateSvc.parseCurrentDate()
        def txn = resolveTxnType( txntype ) 
        def currdate = dateSvc.format( 'yyyy-MM-dd', new Date()) 
        //
        //set previous info 
        faas.info.prevtdno      = faas.info.tdno 
        faas.info.prevpin       = faas.rpu.fullpin
        faas.info.prevtaxpayerid = faas.info.taxpayerid 
        faas.info.prevowner     = faas.info.ownername 
        faas.info.prevmv        = faas.rpu.totalmv
        faas.info.prevav        = faas.rpu.totalav 
        def prevfaas            = [ faasid:faas.objid, tdno:faas.info.tdno ]
        faas.previousfaases.add( prevfaas )
        //
        //set default values
        faas.objid              = 'F' + new UID()
        faas.docstate           = INTERIM_STATE
        faas.info.datacapture   = false 
        faas.info.txntype       = txn.txntype 
        faas.info.txn           = txn 
        faas.info.autonumber    = autonumber
        faas.info.issuedate     = currdate
        faas.info.effectivityyear = parseddate.year 
        faas.info.effectivityqtr  = 1 
        faas.info.dtappraised   = currdate 
        faas.info.dtrecommended = currdate 
        faas.info.dtapproved    = currdate 
        faas.info.titletype     = 'TCT'
        //
        //clear info 
        faas.info.tdno          = null 
        faas.info.ownername     = null 
        faas.info.owneraddress  = null
        faas.info.taxpayerid    = null
        faas.info.taxpayername  = null
        faas.info.taxpayeraddress      = null 
        faas.info.administratorid      = null 
        faas.info.administratorname    = null 
        faas.info.administratoraddress = null 
        faas.info.memoranda            = null 
        faas.info.titleno              = null
        faas.info.titledate            = null 
		faas.lgutype 					= var.lgu_type
        return faas 
    }
    
	@ProxyMethod
	public List getBarangayIdList() {
		def brgylist = em.sqlContext.createNamedQuery('faas:getBarangays').resultList
		brgylist.sort{ it.name }
		return brgylist 
	}
	
	@ProxyMethod
	public List getFaasIdForRevision( newry ) {
		return em.sqlContext.createNamedQuery('faas:getFAASIdForRevision')
				.setParameters([ newry:newry  ])
				.resultList
				.objid 
	} 
	 
	
	@ProxyMethod 
	public void validateBatchRY( newry ) {
		def rptsetting = em.sqlContext.createNamedQuery('faas:getCurrentRY').singleResult 
		if( !rptsetting ) {
			throw new Exception('RPT Setting is not defined.')
		}
		if( rptsetting.ry >= newry ) {
			throw new Exception('New Revision Year must be greater than current revision year ' + rptsetting.ry )
		}
		
		//check landry setting 
		def ry = em.sqlContext.createNamedQuery('faas:getRYSetting_land')
						.setParameter('ry', newry)
						.singleResult 
		if( ! ry ) throw new Exception( "Land Revision Year Setting for $newry is not defined.")
		
		//check bldgry setting 
		ry = em.sqlContext.createNamedQuery('faas:getRYSetting_bldg')
						.setParameter('ry', newry)
						.singleResult 
		if( ! ry ) throw new Exception( "Building Revision Year Setting for $newry is not defined.")
		
		//check machry setting 
		ry = em.sqlContext.createNamedQuery('faas:getRYSetting_mach')
						.setParameter('ry', newry)
						.singleResult 
		if( ! ry ) throw new Exception( "Machine Revision Year Setting for $newry is not defined.")
		
		//check planttreery setting 
		ry = em.sqlContext.createNamedQuery('faas:getRYSetting_planttree')
						.setParameter('ry', newry)
						.singleResult 
		if( ! ry ) throw new Exception( "Plant/Tree Revision Year Setting for $newry is not defined.")
		
		//check getRYSetting_misc setting 
		ry = em.sqlContext.createNamedQuery('faas:getRYSetting_misc')
						.setParameter('ry', newry)
						.singleResult 
		if( ! ry ) throw new Exception( "Miscellaneous Revision Year Setting for $newry is not defined.")
	}
	
	
	def getRySetting( rputype, newry ) {
		if( rputype == 'land' ) {
			return em.sqlContext.createNamedQuery('faas:getRYSetting_land')
						.setParameter('ry', newry)
						.singleResult 
		}
		
		if( rputype == 'bldg' ) {
			return em.sqlContext.createNamedQuery('faas:getRYSetting_bldg')
						.setParameter('ry', newry)
						.singleResult 
		}
		
		if( rputype == 'mach' ) {
			return em.sqlContext.createNamedQuery('faas:getRYSetting_mach')
						.setParameter('ry', newry)
						.singleResult 
		}
		
		if( rputype == 'planttree' ) {
			return em.sqlContext.createNamedQuery('faas:getRYSetting_planttree')
						.setParameter('ry', newry)
						.singleResult 
		}
		
		if( rputype == 'misc' ) {
			return em.sqlContext.createNamedQuery('faas:getRYSetting_misc')
						.setParameter('ry', newry)
						.singleResult 
		}
		return null 
	}
	
	@ProxyMethod
	public void  reviseFaas( faasidlist, newry ) {
		println 'Revise FAA --------------------------------'
		faasidlist.each{ faasid -> 
			def faas = em.read( SCHEMA_NAME, [objid:faasid] )
			if( ! faas ) {
				def msg = 'Cannot open FAAS ' + faasid 
				println msg 
				return msg  
			}

			def prevtdno     = faas.info.tdno
			def newrysetting = getRySetting( faas.rpu.rputype, newry ) 
			def autonumber 	 = TO_BOOLEAN( var.td_autonumber )
				
			def msg = null 
			try {
				faas = initGeneralRevision( faas, 'GR', prevtdno, autonumber, newrysetting )
				faas.info.memoranda	= 'REVISED PURSUANT TO R.A. 7160' 
				faas.info.annotated = TO_BOOLEAN( faas.info.annotated )
				faas = create( faas )
				logSvc.log('REVISED','Faas', faasid)
				msg = 'Successfully revised -> ' + prevtdno 
				println msg 
			}
			catch ( e ) {
				msg = 'Error revising -> ' + prevtdno + '. [Error] ' + e.message 
				println msg
			}
		}
	}		
	
	
	
	Map initGeneralRevision( faas, txntype, prevtdno, autonumber, newrysetting ) {
		if( !newrysetting ) {
			throw new Exception('New RY Setting is required.')
		}
		
		faas = initReassessment( faas, txntype, prevtdno, autonumber )
		if( faas.rpu.ry >= newrysetting.ry ) {
			throw new Exception('New Revision Year must be greater than ' + faas.rpu.ry + '.' )
		}
		
		
		//reset txntype to GR 
		def txn 			= resolveTxnType( txntype )
		faas.info.txntype	= txn.txntype 
        faas.info.txn       = txn 
		faas.rpu.ry			= newrysetting.ry 
		
		//recalculate due to gr 
		def rputype = faas.rpu.rputype 
		
		if( 'land'.equals( rputype )  ) {
			faas = landRpuSvc.initGeneralRevision( faas, newrysetting )
		}
		else if( 'bldg'.equals( rputype )  ) {
			faas = bldgRpuSvc.initGeneralRevision( faas, newrysetting )
		}
		else if( 'mach'.equals( rputype )  ) {
			faas = machRpuSvc.initGeneralRevision( faas, newrysetting )
		}
		else if( 'planttree'.equals( rputype )  ) {
			faas = planttreeRpuSvc.initGeneralRevision( faas, newrysetting )
		}
		else if( 'misc'.equals( rputype )  ) {
			faas = miscRpuSvc.initGeneralRevision( faas, newrysetting )
		}
		else {
			throw new Exception( 'Cannot process rpu type ' + rputype + '.' )
		}
		return faas 
		
	}
	
    Map initReassessment( faas, txntype, prevtdno, autonumber ) {
        //
        //set reassessment related info 
        def parseddate = dateSvc.parseCurrentDate()
        def txn = resolveTxnType( txntype ) 
        def currdate = dateSvc.format( 'yyyy-MM-dd', new Date()) 
        //
        //set previous info 
		if( txntype != 'MC' ) {
			faas.info.prevtdno      = faas.info.tdno 
			faas.info.prevpin       = faas.rpu.fullpin
			faas.info.prevtaxpayerid = faas.info.taxpayerid 
			faas.info.prevowner     = faas.info.ownername 
			faas.info.prevmv        = faas.rpu.totalmv
			faas.info.prevav        = faas.rpu.totalav 
			def prevfaas            = [ faasid:faas.objid, tdno:faas.info.tdno ]
			faas.previousfaases.clear()
			faas.previousfaases.add( prevfaas )
		}
        //
        //set default values
        faas.objid              = 'F' + new UID()
        faas.docstate           = INTERIM_STATE
        faas.info.datacapture   = false 
        faas.info.txntype       = txn.txntype 
        faas.info.txn           = txn 
        faas.info.autonumber    = autonumber
        faas.info.issuedate     = currdate
        faas.info.effectivityyear = parseddate.year + 1
        faas.info.effectivityqtr  = 1 
        faas.info.dtappraised   = currdate 
        faas.info.dtrecommended = currdate 
        faas.info.dtapproved    = currdate 
		faas.lgutype 			= var.lgu_type
        //
        //clear info 
        faas.info.tdno          = null 
        faas.info.memoranda     = null 
        return faas 
    }
	
	Map initMultipleClaim( faas, txntype, prevtdno, autonumber ) {
        //
        //set reassessment related info 
        def parseddate = dateSvc.parseCurrentDate()
        def txn = resolveTxnType( txntype ) 
        def currdate = dateSvc.format( 'yyyy-MM-dd', new Date()) 
        //
        //set default values
        faas.objid              = 'F' + new UID()
        faas.docstate           = INTERIM_STATE
        faas.info.datacapture   = false 
        faas.info.txntype       = txn.txntype 
        faas.info.txn           = txn 
        faas.info.autonumber    = autonumber
        faas.info.issuedate     = currdate
        faas.info.effectivityyear = parseddate.year + 1
        faas.info.effectivityqtr  = 1 
        faas.info.dtappraised   = currdate 
        faas.info.dtrecommended = currdate 
        faas.info.dtapproved    = currdate 
		faas.lgutype 			= var.lgu_type
        //
        //clear info 
        faas.info.tdno          = null 
        faas.info.memoranda     = null 
        return faas 
    }
    
    void updateMessage( faas, message ) {
        faas.message = message
        def params = [objid:faas.objid, message:message]
        em.sqlContext.createNamedExecutor('faas:updateMessage').setParameters( params ).execute() 
    }
    
    void sendToOutbox( faas ) {
        def msg = [
            objid           : 'MI' + new UID(),
            schemaname      : 'message:outbox',
            schemaversion   : '1.0',
            refid           : faas.objid, 
            fromlguindex    : var.lgu_index,
            fromlguname     : var.lgu_name,
            tolguindex      : faas.rp.provcityindex,
            tolguname       : faas.rp.provcity, 
            dtsent          : new Date(),
            sentby          : ( env.USERNAME ? env.USERNAME : 'SYSTEM' ),
            sentbytitle     : ( env.JOBTITLE ? env.JOBTITLE : 'SYSTEM' ),
            action          : 'faas.receive',
            data            : [ faas:faas, attachments:getAttachments( faas.objid) ],
            messages        : [],
        ]
        em.create('message:outbox', msg )
    }
    
    void moveOutboxMessageToProcessed( refid ) {
        def msg = em.sqlContext.createNamedQuery('message:getOutboxMessageByRefId').setParameter('refid', refid).singleResult
        if( msg ) {
            msg = em.read('message:outbox', msg )
            em.create('message:processedoutbox', msg )
            em.delete('message:outbox', msg )
        }
    }
    
    void updateAttachmentStates( faas, docstate ) {
        em.sqlContext.createNamedExecutor('faas:updateAttachmentState').setParameters([faasid:faas.objid, docstate:docstate]).execute()
    }
	
	boolean TO_BOOLEAN( value ) {
		if( value instanceof Boolean ) return value 
		return '1/y/yes/true/t'.indexOf( value.toString().toLowerCase() ) >= 0
	}
	
}

