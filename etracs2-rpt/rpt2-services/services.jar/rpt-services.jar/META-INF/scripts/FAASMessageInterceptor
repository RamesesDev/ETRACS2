import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class FAASMessageInterceptor
{
	@PersistenceContext('main')
	def em
    
	@Service('LogService')
    def logSvc
    
    @Service('FAASService')
    def faasSvc 
	
	def SCHEMA_NAME = 'faas'
    def SCHEMA_VERSION = '1.0'
    def LISTSCHEMA_NAME = 'faas:faaslist'
    
	@After(pattern='MessageService.onreceive') 
	public void interceptOnReceive( evt ) {
        def msg = evt.result 
        if( msg.action == 'faas.approve') approveFaas( msg ) 
        else if( msg.action == 'faas.disapprove') disapproveFaas( msg ) 
	}
    
    void approveFaas( msg ) {
        try {
            println 'Processing message -> ' + msg.action 
            faasSvc.onlineApprove( msg.data.faasid, msg.data  )
            logSvc.log('ONLINE-APPROVAL', 'FAAS', msg.data.faasid )
        }
        catch( e ) {
            println e.message
            msg.message =[date:new Date(), msg:e.message]
            throw e 
        }
    }
    
    void disapproveFaas( msg ) {
        try {
            println 'Processing message -> ' + msg.action 
            faasSvc.onlineDisapprove( msg.data.faasid, msg.data  )
            logSvc.log('ONLINE-APPROVAL', 'FAAS', msg.data.faasid )
        }
        catch( e ) {
            println '-'*30
            e.printStackTrace()
            msg.message =[date:new Date(), msg:e.message]
            throw e 
        }
    }
	
}


