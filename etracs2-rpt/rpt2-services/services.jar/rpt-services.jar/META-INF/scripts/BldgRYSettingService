import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.eserver.*;
import java.rmi.server.UID;

public class BldgRYSettingService
{
	@PersistenceContext('main')
	def em
    
	@Service('LogService')
    def logSvc
    
    
    @ProxyMethod
    public boolean settingExists() {
        def setting = em.sqlContext.createNamedQuery('bldgrysetting:getList').setMaxResults(1).singleResult 
        return setting != null
    }
    
    @ProxyMethod 
    public List getList( searchText ) {
        def list = []
        if( ! searchText ) {
            list = em.sqlContext.createNamedQuery('bldgrysetting:getList').resultList
        }
        else {
            list = em.sqlContext.createNamedQuery('bldgrysetting:getListByRy').setParameter('ry', searchText).resultList
        }
        list.each {
            it.predominant = it.predominant as boolean 
            it.depreciatecoreanditemseparately = it.depreciatecoreanditemseparately as boolean 
            it.computedepreciationbasedonschedule = it.computedepreciationbasedonschedule as boolean 
        }
        return list 
    }
    
    @ProxyMethod
    public def create( entity ) {
        entity.schemaname = 'bldgrysetting'
        entity.schemaversion = '1.0'
        validate( entity )
        em.create( entity.schemaname, entity )
        logSvc.log('CREATE', 'BldgRYSetting', entity.objid )
        return entity 
    }
    
    @ProxyMethod
    public def update( entity ) {
        validate( entity )
        em.update( entity.schemaname, entity, { diff ->
            logSvc.logB( 'UPDATE', 'BldgRYSetting', entity.objid, '', diff )
        } as UpdateChangeHandler )
        return entity 
    }
    
    @ProxyMethod 
    public Map open( objid ) {
        def entity = em.read('bldgrysetting', [objid:objid])
        if( !entity ) throw new Exception('Unable to load Revision Setting.\nVerify that the record still exists.' )
        entity.predominant = entity.predominant as boolean 
        entity.depreciatecoreanditemseparately = entity.depreciatecoreanditemseparately as boolean 
        entity.computedepreciationbasedonschedule = entity.computedepreciationbasedonschedule as boolean 
        entity.assessLevels = loadAssessLevels( objid )
        entity.additionalItems = loadBldgAdjustments( objid ) 
        entity.bldgTypes = loadBldgTypes( objid )
        return entity 
    }
    
    @ProxyMethod
    public void remove( objid ) {
        checkRemoveAllowed( objid ) 
        removeAssessLevels( objid )
        removeBldgAdditionalItems( objid )
        removeBldgTypes( objid )
    }
    
    /*----------------------------------------------------------
    * AssessLevel Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveAssessLevel( assessLevel ) {
        def schemaname = 'bldgrysetting:assesslevel'
        em.validate(schemaname, assessLevel )
        
        def old = em.read(schemaname, assessLevel )
        if( old ) {
            if( assessLevel.fixrate ) {
                assessLevel.ranges.clear()
            }
            em.update(schemaname, assessLevel )
        }
        else {
            em.create(schemaname, assessLevel )
        }
    }
    
    @ProxyMethod
    public void removeAssessLevel( assessLevel ) {
        def schemaname = 'bldgrysetting:assesslevel'
        em.delete(schemaname, assessLevel )
    }
    
    /*----------------------------------------------------------
    * AdditionalItem Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveAdditionalItem( item ) {
        def schemaname = 'bldgrysetting:bldgadditionalitem'
        em.validate(schemaname, item )
        
        def old = em.read(schemaname, item )
        if( old )
            em.update(schemaname, item )
        else 
            em.create(schemaname, item )
    }
    
    @ProxyMethod
    public void removeAdditionalItem( item ) {
        def schemaname = 'bldgrysetting:bldgadditionalitem'
        em.delete(schemaname, item )
    }
    
    
    /*----------------------------------------------------------
    * BldgType Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveBldgType( bldgtype ) {
        def schemaname = 'bldgrysetting:bldgtype'
        em.validate(schemaname, bldgtype )
        
        def old = em.read(schemaname, bldgtype )
        if( old )
            em.update(schemaname, bldgtype )
        else 
            em.create(schemaname, bldgtype )
    }
    
    @ProxyMethod
    public void removeBldgType( bldgtype ) {
        //TODO: check that bldgtype is not referenced 
        def schemaname = 'bldgrysetting:bldgtype'
        em.delete(schemaname, bldgtype )
    }
    
    
    /*----------------------------------------------------------
    * BldgKindBucc Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveBldgKindBucc( bldgkindbucc ) {
        def schemaname = 'bldgrysetting:bldgkindbucc'
        em.validate(schemaname, bldgkindbucc )
        
        def old = em.read(schemaname, bldgkindbucc )
        if( old )
            em.update(schemaname, bldgkindbucc )
        else 
            em.create(schemaname, bldgkindbucc )
    }
    
    @ProxyMethod
    public void removeBldgKindBucc( bldgkindbucc ) {
        //TODO: check that bldgtype is not referenced 
        def schemaname = 'bldgrysetting:bldgkindbucc'
        em.delete(schemaname, bldgkindbucc )
    }
    
    @ProxyMethod
    public List getBldgKindBuccList( bldgtypeid ) {
        def list = em.sqlContext.createNamedQuery('bldgrysetting:getBldgKindBucc').setParameter('bldgtypeid', bldgtypeid).resultList
        list.each {
            def extended = em.serializer.read( it.extended) 
            it.putAll( extended )
            
        }
        return list 
    }
    
    
    /*----------------------------------------------------------
    * Support Methods
    ----------------------------------------------------------*/
    List loadAssessLevels( objid )  {
        def list = em.sqlContext.createNamedQuery('bldgrysetting:getAssessLevel').setParameter('bldgrysettingid', objid).resultList
        list.each {
            it.ranges = em.serializer.read( it.ranges )
            it.fixrate = it.fixrate as boolean 
        }
        return list 
    }
    
    List loadBldgAdjustments( objid ) {
        return em.sqlContext.createNamedQuery('bldgrysetting:getAdditionalItem').setParameter('bldgrysettingid', objid).resultList
    }
    
    List loadBldgTypes( objid ) {
        def list = em.sqlContext.createNamedQuery('bldgrysetting:getBldgType').setParameter('bldgrysettingid', objid).resultList
        list.each {
            if( it.multistoreyadjustments ) {
                it.multistoreyadjustments = em.serializer.read( it.multistoreyadjustments )
            }
            if( it.depreciations ) {
                it.depreciations = em.serializer.read( it.depreciations )
            }
        }
        return list 
    }
    
    
    void validate( entity ) {
        if( entity.ry <= 0 ) throw new Exception('Revision Year must be greater than zero.')
        checkDuplicateSetting( entity )
        em.validate(entity.schemaname, entity )
    }
    
    void checkDuplicateSetting( entity ) {
        def data = em.sqlContext.createNamedQuery('bldgrysetting:checkDuplicate').setParameters( entity ).singleResult
        if( data ) throw new Exception('Setting for year ' + entity.ry + ' already exists.')
    }
    
    void checkRemoveAllowed( objid ) {
        //TODO: allow remove if not referenced by bldgrpu
    }
    
    void removeAssessLevels( objid ) {
        em.sqlContext.createNamedExecutor('bldgrysetting:deleteAssessLevel').setParameter('objid', objid ).execute()
    }
    
    void removeBldgAdditionalItems( objid ) {
        em.sqlContext.createNamedExecutor('bldgrysetting:deleteAdditionalItem').setParameter('objid', objid ).execute()
    }
    
    void removeBldgTypes( objid ) {
        em.sqlContext.createNamedExecutor('bldgrysetting:deleteBldgKindBucc').setParameter('objid', objid ).execute()
        em.sqlContext.createNamedExecutor('bldgrysetting:deleteBldgType').setParameter('objid', objid ).execute()
    }
    
	
}