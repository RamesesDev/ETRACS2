import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class CancelTDService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
	def logService
	
	def schemaname = 'canceltdreason:canceltdreason';
	def schemaversion = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		if( !searchText ) return getListByQuery( 'canceltd:getList', [:], params );
		
		def result = [];
		
		if((result = getListByQuery( 'canceltd:getListByCode', [cancelcode:searchText+"%"], params ))) return result;
		if((result = getListByQuery( 'canceltd:getListByTitle', [canceltitle:searchText+"%"], params ))) return result;
		
		return result;
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'canceltd:getById' ).setParameter( 'objid', objid ).singleResult;
	}
	
	@ProxyMethod
	public def create( canceltd ){
		canceltd.objid = "F" + new UID();
		canceltd.schemaname = schemaname;
		canceltd.schemaversion = schemaversion;
		
		validate( canceltd );
		em.create( canceltd.schemaname, canceltd );
		
		return canceltd;
	}
	
	@ProxyMethod
	public def update( canceltd ){
		validateUpdate( canceltd );
		
		em.update( canceltd.schemaname, canceltd, { diff ->
			logService.logB( 'UPDATE', 'EXEMPTION TYPE', canceltd.objid, null, diff );
		} as UpdateChangeHandler )
		
		return canceltd;
	}
	
	@ProxyMethod
	public void delete( canceltd ){
		em.delete( canceltd.schemaname, canceltd );
	}
	
	
	private void validate( canceltd ){
		def oldcanceltd = em.read(canceltd.schemaname, canceltd);
		util.validateLastUpdate( canceltd, oldcanceltd );
		
		checkDuplicates( canceltd );
		em.validate(canceltd.schemaname, canceltd);
	}
	
	private void validateUpdate( canceltd ){
		def oldcanceltd = em.read(canceltd.schemaname, canceltd);
		util.validateLastUpdate( canceltd, oldcanceltd );
		
		em.validate(canceltd.schemaname, canceltd);
	}
	
	private void checkDuplicates( canceltd ){
		def data = em.sqlContext.createNamedQuery( 'canceltd:checkDuplicateCode' ).setParameter( 'cancelcode', canceltd.cancelcode ).singleResult;
		if( data.count > 0 ) throw new Exception( "Cancel TD Reason $canceltd.cancelcode already exists." );
		data = em.sqlContext.createNamedQuery( 'canceltd:checkDuplicateTitle' ).setParameter( 'canceltitle', canceltd.canceltitle ).singleResult;
		if( data.count > 0 ) throw new Exception( "Cancel TD Reason $canceltd.canceltitle already exists." );
	}
	
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}

}
