import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class ExemptionTypesService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
	def logService
	
	def schemaname = 'exemptiontype:exemptiontype';
	def schemaversion = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		if( !searchText ) return getListByQuery( 'exemptiontype:getList', [:], params );
		
		def result = [];
		
		if((result = getListByQuery( 'exemptiontype:getListByCode', [propertycode:searchText+"%"], params ))) return result;
		if((result = getListByQuery( 'exemptiontype:getListByDescription', [propertydesc:searchText+"%"], params ))) return result;
		
		return result;
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'exemptiontype:getById' ).setParameter( 'objid', objid ).singleResult;
	}
	
	@ProxyMethod
	public def create( exemptiontype ){
		exemptiontype.objid = "EX" + new UID();
		exemptiontype.schemaname = schemaname;
		exemptiontype.schemaversion = schemaversion;
		
		validate( exemptiontype );
		em.create( exemptiontype.schemaname, exemptiontype );
		
		return exemptiontype;
	}
	
	@ProxyMethod
	public def update( exemptiontype ){
		validateUpdate( exemptiontype );
		
		em.update( exemptiontype.schemaname, exemptiontype, { diff ->
			logService.logB( 'UPDATE', 'EXEMPTION TYPE', exemptiontype.objid, null, diff );
		} as UpdateChangeHandler )
		
		return exemptiontype;
	}
	
	@ProxyMethod
	public void delete( exemptiontype ){
		em.delete( exemptiontype.schemaname, exemptiontype );
	}
	
	
	private void validate( exemptiontype ){
		def oldexemptiontype = em.read(exemptiontype.schemaname, exemptiontype);
		util.validateLastUpdate( exemptiontype, oldexemptiontype );
		
		checkDuplicates( exemptiontype );
		em.validate(exemptiontype.schemaname, exemptiontype);
	}
	
	private void validateUpdate( exemptiontype ){
		def oldexemptiontype = em.read(exemptiontype.schemaname, exemptiontype);
		util.validateLastUpdate( exemptiontype, oldexemptiontype );
		
		em.validate(exemptiontype.schemaname, exemptiontype);
	}
	
	private void checkDuplicates( exemptiontype ){
		def data = em.sqlContext.createNamedQuery( 'exemptiontype:checkDuplicateCode' ).setParameter( 'exemptcode', exemptiontype.exemptcode ).singleResult;
		if( data.count > 0 ) throw new Exception( "Exemption Type $exemptiontype.exemptcode already exists." );
		data = em.sqlContext.createNamedQuery( 'exemptiontype:checkDuplicateDescription' ).setParameter( 'exemptdesc', exemptiontype.exemptdesc ).singleResult;
		if( data.count > 0 ) throw new Exception( "Exemption Type $exemptiontype.exemptdesc already exists." );
	}
	
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}

}
