import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID

class LandTaxReportService
{
    @PersistenceContext('main')
    def em
     
	@Service('DateService')
    def dateSvc
	
	@Service('NumberService')
    def numSvc
	
	@Service('Var')
	def var 
	
	@Env
	def env
	
	@ProxyMethod 
	public def getLguType() {
		return var.lgu_type 
	}

	@ProxyMethod 
	public def generateTaxClearance( clearance ) {
		def parsedate = dateSvc.parseCurrentDate()	
		
		required( 'At least one property for clearance', clearance.items )
		validateClearedItems( clearance )
		
		//validate receipt info 
		def ordate = dateSvc.parse('yyyy-MM-dd', clearance.ordate )
        if( ordate > dateSvc.serverDate ) {
            throw new Exception('O.R. Date must be before or equal to current date.')
        }
		
		//additional info 
        clearance.issueday		= formalizeNumber( parsedate.day )
		clearance.issuemonth	= getMonth( parsedate.month ).name 
		clearance.issueyear		= parsedate.year +''
		clearance.issueplace	= var.lgu_formal_name 
		clearance.clearedyear	= clearance.year+''
		
		//load payment info 
		clearance.items.each{ item ->
			item.paymentlist = []
			if( TO_BOOLEAN( item.taxable ) == true ) {
				def pmtlist = em.sqlContext.createNamedQuery('landtaxreport:getRPTClearancePaymentInfo')
									.setParameters([ledgerid:item.ledgerid, year:clearance.year] )
									.resultList 
				pmtlist.each { pmt ->
					pmt.ordate = dateSvc.format( 'MM-dd-yyyy', pmt.ordate )
					if( pmt.period == 'Q1-Q4' ) {
						pmt.period = 'FULL ' + clearance.year 
					}
					else {
						pmt.period + ' ' + clearance.year 
					}
				}
				item.paymentlist.addAll(  pmtlist )
			}
			else {
				item.paymentlist.add([
					period : 'EXEMPT '  + clearance.year 
				])
			}
		}
		return clearance 
	}
	
	
	
	void validateClearedItems( clearance )  {
		clearance.items.each {
			it.taxable = TO_BOOLEAN( it.taxable) 
			if( it.taxable && it.assessedvalue > 0 ) {
				if( it.lastyearpaid < clearance.year ) 
					throw new Exception("TD No. $it.tdno is not cleared for the year $clearance.year.")
				else if( it.lastyearpaid == clearance.year && it.lastqtrpaid < clearance.qtr )
					throw new Exception("TD No. $it.tdno is not cleared for the year $clearance.year - Q$clearance.qtr.")
			}
		}
	}
	
	boolean TO_BOOLEAN( boolvalue ) {
		if( boolvalue instanceof Boolean ) 
			return boolvalue 
		if( '1/y/yes/t/true'.indexOf( boolvalue.toString().toLowerCase() ) >= 0 ) {
			return true 
		}
		return false 
	}
	
	
	@ProxyMethod
	public def generateAbstractOfCollection( year, qtr, month, day, type, collector ) {
		def parsedate = dateSvc.parseCurrentDate()		
		if( year > parsedate.year ) throw new Exception('Year must not exceed current year.')
		
		def params = [
			txntimestamp : resolveTimeStamp( year, qtr, month, day ),
			collectorid  : ( collector ? collector.collectorid : '%' ),
		]
		
		def items = []
		
		//type -> BASIC, SEF 
		if( type == null || type == 'BASIC'  ) {
			items.addAll(
				em.sqlContext.createNamedQuery('landtaxreport:getAbstractCollectionBASIC')
						.setParameters( params ).resultList 
			)
			items.addAll(
				em.sqlContext.createNamedQuery('landtaxreport:getAbstractCollectionManualBASIC')
						.setParameters( params ).resultList 
			)
		}
		if( type == null || type == 'SEF'  ) {
			items.addAll(
				em.sqlContext.createNamedQuery('landtaxreport:getAbstractCollectionSEF')
						.setParameters( params ).resultList 
			)
			items.addAll(
				em.sqlContext.createNamedQuery('landtaxreport:getAbstractCollectionManualSEF')
						.setParameters( params ).resultList 
			)
		}
		if( ! items ) throw new Exception('No records found.')
		
		return [
			title 	: buildTitle( year, qtr, month, day, type, collector  ),
			period 	: buildPeriod( year, qtr, month, day ),
			items  	: items 
		]
	}
	
	
	@ProxyMethod
	public def generateBarangayShare( year, month, currentrate, previousrate ) {
		def parsedate = dateSvc.parseCurrentDate()		
		if( year > parsedate.year ) throw new Exception('Year must not exceed current year.')
		if( !currentrate || currentrate < 0.0 ) throw new Exception('Current Rate must not be negative.')
		if( !currentrate || currentrate > 100.0 ) throw new Exception('Current Rate must not exceed 100 percent.')
		if( !previousrate || previousrate < 0.0 ) throw new Exception('Previous Rate must not be negative.')
		if( !previousrate || previousrate > 100.0 ) throw new Exception('Previous Rate must not exceed 100 percent.')
		
		def onlinepayments = em.sqlContext.createNamedQuery('landtaxreport:getBasicSummaryByMonth')
								.setParameters( [iyear:year, imonth:month ] )
								.resultList 
		def manualpayments = em.sqlContext.createNamedQuery('landtaxreport:getManualBasicSummaryByMonth')
								.setParameters( [iyear:year, imonth:month ] )
								.resultList 
								
		def brgyshares = em.sqlContext.createNamedQuery('landtaxreport:getBarangayList').setParameter('parentid', var.lgu_index).resultList 
		
		def initbrgybasicamt = { brgy ->
			brgy.basiccurrent 	= 0.0
			brgy.basicprevious 	= 0.0
			brgy.basictotal		= 0.0
			brgy.basiccurrentshare 	= 0.0
			brgy.basicpreviousshare = 0.0
			brgy.totalshare			= 0.0
		}
		
		def addupPayments = { brgy, payments ->
			def pmt = payments.find{ it.barangay == brgy.barangay }
			if( pmt ) {
				brgy.basiccurrent += pmt.basiccurrent
				brgy.basicprevious += pmt.basicprevious
				brgy.basictotal += pmt.basictotal
			}
		}
		
		brgyshares.each{ brgy ->
			initbrgybasicamt( brgy )
			addupPayments( brgy, onlinepayments )
			addupPayments( brgy, manualpayments )
			
			//calculate shares
			brgy.basiccurrentshare  = numSvc.round( brgy.basiccurrent * currentrate / 100.0 )
			brgy.basicpreviousshare = numSvc.round( brgy.basicprevious * previousrate / 100.0 )
			brgy.totalshare			= brgy.basiccurrentshare + brgy.basicpreviousshare 
		}
		
		return [
			period 	: 'For the month of ' + getMonthName( month ) + ', ' + year ,
			items 	: brgyshares, 
		]
	}
	
		
	
	def initCollectionHandler = { item, taxability ->
		item.taxability 		= taxability 
		item.basiccurrent 		= 0.0
		item.basicdisc			= 0.0
		item.basicprev 			= 0.0
		item.basiccurrentint	= 0.0
		item.basicprevint		= 0.0
		item.basicgross			= 0.0
		item.basicnet			= 0.0
		item.sefcurrent 		= 0.0
		item.sefdisc			= 0.0
		item.sefprev 			= 0.0
		item.sefcurrentint		= 0.0
		item.sefprevint			= 0.0
		item.sefgross			= 0.0
		item.sefnet				= 0.0
		item.grandtotal			= 0.0
		item.netgrandtotal		= 0.0
		return item 
	}
	
	def summarizeRPTCollection = { item, collectionlist ->
		def collection = collectionlist.find{ it.classid == item.classid }
		if( collection ) {
			item.keySet().each{ key ->
				if( ! (item[key] instanceof String) ) {
					item[key] = collection[key]
				}
			}
		}
	}
		
	@ProxyMethod
	public Map generateRPTCReport( lgutype, year, month, provrate, munirate, brgyrate, cityrate, citybrgyrate ) 
	{
		provrate = provrate / 100 
		munirate = munirate / 100
		brgyrate = brgyrate / 100
		cityrate = cityrate / 100 
		citybrgyrate = citybrgyrate / 100 
		
		def txntimestamp = resolveTimeStamp( year, month.qtr, month.month, null )
		def onlinerptcs = em.sqlContext.createNamedQuery('landtaxreport:getOnlineRPTC').setParameter('txntimestamp', txntimestamp).resultList 
		def manualrptcs = em.sqlContext.createNamedQuery('landtaxreport:getManualRPTC').setParameter('txntimestamp', txntimestamp).resultList 
		
		//add manualrptcs to onlinerptcs 
		manualrptcs.each{ manual ->
			def online = onlinerptcs.find{ it.classid == manual.classid }
			if( online ) {
				online.keySet().each{ key -> 
					if( online[key] instanceof String )
						online[key] = manual[key]
					else 
						online[key] += manual[key]
				}
			}
			else {
				onlinerptcs.add( manual )
			}
		}
		
		def taxablelist = getTaxableList( initCollectionHandler )
		taxablelist.each{ 
			summarizeRPTCollection( it, onlinerptcs )
		}
		
		return [
			title 		 : 'MONTHLY REAL PROPERTY TAX COLLECTION',
			period 		 : 'FOR THE MONTH OF ' + getMonthName( month.month ) + ', ' + year,
			periodtype 	 : 'MONTH',
			provcity     : (var.lgu_type == 'city' ? var.lgu_name : var.parent_lgu_name ),
			municipality : (var.lgu_type == 'city' ? null : var.lgu_name ),
			brgycount	 : getBrgyCount(),
			items 		 : taxablelist,
			dispositions : buildRPTCDispositions( taxablelist, lgutype, provrate, munirate, brgyrate, cityrate, citybrgyrate  ),
		]
	}
	
	@ProxyMethod
	public Map generateRPTCReport2( lgutype, year, month, provrate, munirate, brgyrate, cityrate, citybrgyrate ) 
	{
		provrate = provrate / 100 
		munirate = munirate / 100
		brgyrate = brgyrate / 100
		cityrate = cityrate / 100 
		citybrgyrate = citybrgyrate / 100 
		
		def txntimestamp = resolveTimeStamp( year, month.qtr, month.month, null )
		def onlinerptcs = em.sqlContext.createNamedQuery('landtaxreport:getOnlineRPTC').setParameter('txntimestamp', txntimestamp).resultList 
		def manualrptcs = em.sqlContext.createNamedQuery('landtaxreport:getManualRPTC').setParameter('txntimestamp', txntimestamp).resultList 
		
		//add manualrptcs to onlinerptcs 
		manualrptcs.each{ manual ->
			def online = onlinerptcs.find{ it.classid == manual.classid }
			if( online ) {
				online.keySet().each{ key -> 
					if( online[key] instanceof String )
						online[key] = manual[key]
					else 
						online[key] += manual[key]
				}
			}
			else {
				onlinerptcs.add( manual )
			}
		}
		
		def taxablelist = getTaxableList( initCollectionHandler )
		taxablelist.each{ 
			summarizeRPTCollection( it, onlinerptcs )
		}
		
		def reportdata = [
			title 		 : 'MONTHLY REAL PROPERTY TAX COLLECTION',
			period 		 : 'FOR THE MONTH OF ' + getMonthName( month.month ) + ', ' + year,
			periodtype 	 : 'MONTH',
			provcity     : (var.lgu_type == 'city' ? var.lgu_name : var.parent_lgu_name ),
			municipality : (var.lgu_type == 'city' ? null : var.lgu_name ),
			brgycount	 : getBrgyCount(),
			items 		 : taxablelist,
		]
		
		buildDisposition2( reportdata, lgutype, taxablelist, provrate, munirate, brgyrate, cityrate, citybrgyrate )
		return reportdata 
	}
	
	void buildDisposition2( reportdata, lgutype, taxablelist, provrate, munirate, brgyrate, cityrate, citybrgyrate ) {
		def totalbasic = taxablelist.basicnet.sum()
		def totalsef  = taxablelist.sefnet.sum()
		
		reportdata.provcitybasicshare 	= 0.0
		reportdata.munibasicshare		= 0.0
		reportdata.brgybasicshare		= 0.0
		reportdata.provcitysefshare		= 0.0
		reportdata.munisefshare			= 0.0
		reportdata.brgysefshare			= 0.0
		reportdata.provcityshare		= 0.0
		reportdata.munishare			= 0.0
		reportdata.brgyshares			= 0.0
		
		if( lgutype == 'city' ) {
			reportdata.provcitybasicshare	= numSvc.round( totalbasic * cityrate )
			reportdata.brgybasicshare		= totalbasic - reportdata.provcitybasicshare
			reportdata.provcitysefshare	= numSvc.round( totalsef * cityrate )
			
			reportdata.brgysefshare		= totalsef - reportdata.provcitysefshare
			reportdata.provcityshare	= reportdata.provcitybasicshare + reportdata.provcitysefshare
			reportdata.brgyshare		= reportdata.brgybasicshare + reportdata.brgysefshare 
		}
		else {
			reportdata.provcitybasicshare	= numSvc.round( totalbasic * provrate)
			reportdata.munibasicshare		= numSvc.round( totalbasic * munirate)
			reportdata.brgybasicshare		= totalbasic - reportdata.provcitybasicshare - reportdata.munibasicshare 
			
			reportdata.provcitysefshare	= numSvc.round( totalsef * provrate )
			reportdata.munisefshare		= numSvc.round( totalsef * munirate)
			reportdata.brgysefshare		= totalsef  - reportdata.provcitysefshare - reportdata.munisefshare 
			
			reportdata.provcityshare	= reportdata.provcitybasicshare + reportdata.provcitysefshare
			reportdata.munishare		= reportdata.munibasicshare + reportdata.munisefshare
			reportdata.brgyshare		= reportdata.brgybasicshare + reportdata.brgysefshare 
		}
	}
	
	def buildDisposition( classname, items, rate ) {
		return [
			classname 		: classname,
			basiccurrent	: numSvc.round( items.basiccurrent.sum() * rate ),
			basicdisc		: numSvc.round( items.basicdisc.sum() * rate ),
			basicprev		: numSvc.round( items.basicprev.sum() * rate ),
			basiccurrentint	: numSvc.round( items.basiccurrentint.sum() * rate ),
			basicprevint	: numSvc.round( items.basicprevint.sum() * rate ),
			basicgross		: numSvc.round( items.basicgross.sum() * rate ),
			basicnet		: numSvc.round( items.basicnet.sum() * rate ),
			sefcurrent		: numSvc.round( items.sefcurrent.sum() * rate ),
			sefdisc			: numSvc.round( items.sefdisc.sum() * rate ),
			sefprev			: numSvc.round( items.sefprev.sum() * rate ),
			sefcurrentint	: numSvc.round( items.sefcurrentint.sum() * rate ),
			sefprevint		: numSvc.round( items.sefprevint.sum() * rate ),
			sefgross		: numSvc.round( items.sefgross.sum() * rate ),
			sefnet			: numSvc.round( items.sefnet.sum() * rate ),
			grandtotal		: numSvc.round( items.grandtotal.sum() * rate ),
			netgrandtotal	: numSvc.round( items.netgrandtotal.sum() * rate ),
		]
	}
	
	def buildDispositionAdjust( classname, items, dispositions ) {
		return [
			classname 		: classname,
			basiccurrent	: numSvc.round( items.basiccurrent.sum() - dispositions.basiccurrent.sum()),
			basicdisc		: numSvc.round( items.basicdisc.sum() - dispositions.basicdisc.sum() ),
			basicprev		: numSvc.round( items.basicprev.sum() - dispositions.basicprev.sum() ),
			basiccurrentint	: numSvc.round( items.basiccurrentint.sum() - dispositions.basiccurrentint.sum()),
			basicprevint	: numSvc.round( items.basicprevint.sum() - dispositions.basicprevint.sum()),
			basicgross		: numSvc.round( items.basicgross.sum() - dispositions.basicgross.sum()),
			basicnet		: numSvc.round( items.basicnet.sum() - dispositions.basicnet.sum()),
			
			sefcurrent		: numSvc.round( items.sefcurrent.sum() - dispositions.sefcurrent.sum()),
			sefdisc			: numSvc.round( items.sefdisc.sum() - dispositions.sefdisc.sum() ),
			sefprev			: numSvc.round( items.sefprev.sum() - dispositions.sefprev.sum() ),
			sefcurrentint	: numSvc.round( items.sefcurrentint.sum() - dispositions.sefcurrentint.sum()),
			sefprevint		: numSvc.round( items.sefprevint.sum() - dispositions.sefprevint.sum()),
			sefgross		: numSvc.round( items.sefgross.sum() - dispositions.sefgross.sum()),
			sefnet			: numSvc.round( items.sefnet.sum() - dispositions.sefnet.sum()),
			
			grandtotal		: numSvc.round( items.grandtotal.sum() - dispositions.grandtotal.sum() ),
			netgrandtotal	: numSvc.round( items.netgrandtotal.sum() - dispositions.netgrandtotal.sum() ),
		]
	}
	
	def buildRPTCDispositions( items, lgutype, provrate, munirate, brgyrate, cityrate, citybrgyrate  ) {
		def dispositionlist = []
		if( lgutype == 'city') {
			dispositionlist.add( buildDisposition( 'CITY', items, cityrate ) )
			dispositionlist.add( buildDispositionAdjust( 'BARANGAY', items, dispositionlist ) )
		}
		else {
			dispositionlist.add( buildDisposition( 'PROVINCE', items, provrate ) )
			dispositionlist.add( buildDisposition( 'MUNICIPALITY', items, munirate ) )
			dispositionlist.add( buildDispositionAdjust( 'BARANGAY', items, dispositionlist ) )
		}
		return dispositionlist
	}
	
	
	@ProxyMethod
	public List getNumDays( year, month ) {
		if ( !month && month < 0 ) return []
		
		Calendar cal = Calendar.getInstance()
        cal.set( year, month, 1)
        int maxday = cal.getActualMaximum(cal.DAY_OF_MONTH)
		def numdays = []
		1.upto( maxday ) { numdays.add( it ) }
		return numdays 
	}
	
	@ProxyMethod
	public List getMonthList( qtr ) {
		def months = [
			[name:'JANUARY', 	month:1, qtr:1 ],
			[name:'FEBRUARY', 	month:2, qtr:1 ],
			[name:'MARCH', 		month:3, qtr:1 ],
			
			[name:'APRIL', 	month:4, qtr:2 ],
			[name:'MAY', 	month:5, qtr:2 ],
			[name:'JUNE', 	month:6, qtr:2 ],
			
			[name:'JULY', 		month:7, qtr:3 ],
			[name:'AUG', 		month:8, qtr:3 ],
			[name:'SEPTEMBER', 	month:9, qtr:3 ],
			
			[name:'OCTOBER', 	month:10, qtr:4 ],
			[name:'NOVEMBER', 	month:11, qtr:4 ],
			[name:'DECEMBER', 	month:12, qtr:4 ],
		]
		
		if( ! qtr ) return months 
		return months.findAll{ it.qtr == qtr }
	}
	
	@ProxyMethod
	public def getMonth( imonth ) {
		def monthlist = getMonthList( null )
		return monthlist.find{ it.month == imonth }
	}
	
	@ProxyMethod
	public List getCollectorList() {
		return em.sqlContext.createNamedQuery('landtaxreport:getCollectorList').resultList 
	}
	
	
	
	
	def getMonthName( month ) {
		def months = getMonthList( null )
		def mon = months.find{ it.month == month }
		if( mon ) return mon.name 
		throw new Exception("Month $month is not defined." )
	}
	
	
	def getQuarterName( qtr ) {
		if( qtr == 1 ) return '1ST QUARTER'
		else if( qtr == 2 ) return '2ND QUARTER'
		else if( qtr == 3 ) return '3RD QUARTER'
		return '4TH QUARTER'
	}
	
	
	def buildTitle( year, qtr, month, day, type, collector  ) {
		def stype = ( type ? type + ' ' : '' )
		def collectorname = ( collector ? ' of ' + collector.collectorname : '' )
		if( day ) return 'Daily ' + stype + 'Abstract of Realty Tax Collection ' + collectorname
		if( month ) return 'Monthly ' + stype + 'Abstract of Realty Tax Collection ' + collectorname
		if( qtr ) return 'Quarterly ' + stype + 'Abstract of Realty Tax Collection ' + collectorname
		return 'Annual ' + stype + 'Abstract of Realty Tax Collection ' + collectorname
	}
	
	def buildPeriod( year, qtr, month, day ) {
		if( day ) return 'For the day ' + getMonthName( month ) + ' ' + day + ', ' + year 
		if( month ) return 'For the month of ' + getMonthName( month ) + ', ' + year 
		if( qtr ) return 'For the ' + getQuarterName( qtr ) + ' of ' + year 
		return 'For the Year ' + year 
	}
	
	def resolveTimeStamp( year, qtr, month, day ) {
		//build timestamp progressively based on the passed values, e.g.,
		//if month is null then timestamp is resolve upto the qtr info, such as "20111%" for 1st qtr
		//if month is notnull thne it is resolve upto the month, such as "2011102%" for 2nd qtr 
		def timestamp = year + '' + qtr 
		if( month != null ) timestamp += padLeft( month, 2 )
		if( day != null ) timestamp += padLeft( day, 2 )
		if( month == null  || day == null ) timestamp += '%'
		return timestamp
		
	}
	
	String padLeft( val, len ) {
		return "$val".padLeft( len, '0' )
	}
	
	
	List getTaxableList( initHandler ) {
		int lineno = 1
		int charindex = 'a' 
		def classifications = em.sqlContext.createNamedQuery('landtaxreport:getClassificationList').resultList
		def firstspecial = classifications.find{ it.special == 1 }
		classifications.add( classifications.indexOf( firstspecial), [classid:'SPECIAL', classname:'SPECIAL', special:0] )
		def taxables = classifications.collect{ initHandler(it, 'TAXABLE') }
		taxables.each { data ->
			if( data.special == 0 ) {
				data.classname = lineno + '. ' + data.classname 
				lineno += 1
			}
			else {
				data.classname = '   ' + ((char)charindex) + '. ' + data.classname 
				charindex += 1
			}
		}
		return taxables 
	}
	
	List getExemptionList( initHandler ) {
		int lineno = 1 
		def exempts  = em.sqlContext.createNamedQuery('landtaxreport:getExemptionList').resultList
		exempts.collect{ initHandler(it, 'EXEMPT') }
		exempts.each { data -> 
			data.classname = lineno + '. ' + data.classname 
			lineno += 1
		}
		return exempts 
	}

	def getBrgyCount() {
		def brgy = em.sqlContext.createNamedQuery('landtaxreport:getBrgyCount').singleResult
		return TO_INT( brgy.brgycount )
	}
	
	int TO_INT( val ) {
		if ( val instanceof Integer ) return val 
		return (int) val 
	}
	
	void required( caption, value ) {
		if( ! value )  throw new Exception( caption + ' is required.')
	}
	
	def formalizeNumber( num ) {
		def snum = numSvc.format('#0', num )
		if( snum == '11' ) return snum + 'TH'
		else if( snum == '12' ) return snum + 'TH'
		else if( snum.endsWith('1') ) return snum + 'ST'
		else if( snum.endsWith('2') ) return snum + 'ND'
		else if( snum.endsWith('3') ) return snum + 'RD'
		else return snum + 'TH' 
	}
	
}	