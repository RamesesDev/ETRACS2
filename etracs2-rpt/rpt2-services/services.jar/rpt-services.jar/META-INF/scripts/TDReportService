import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class TDReportService
{
    @PersistenceContext('main')
    def em
    
	@Service('RPTSettingService')
	def rptSettingSvc;
	
    @Service('NumberService')
    def numberSvc
	
	@Service('Var')
	def var 
	
	@Service('DateService')
	def dateSvc
    
    @ProxyMethod
    public def getReportData( faasid ) {
		def td =[:]
		def faas = em.read('faas', [objid:faasid]);
		if( ! faas ) throw new Exception('Cannot open FAAS with ID no. ' + faasid + '.')
    	
		buildAnnotationInfo( td, faas )

    	td.putAll( faas.info )
    	td.putAll( faas.rp )
    	td.putAll( faas.rpu )
    	td.docstate = faas.docstate
    	td.munidistprovince = faas.rp.munidistrict + ', ' + faas.rp.provcity
    	td.propertytype = faas.rpu.rputype 
		td.avinwords = numberSvc.convertDouble( faas.rpu.totalav )
		
		if( faas.rpu.rputype != 'land' ) {
			clearRealPropertyInfo( td )
		}
    	
    	if( faas.rpu.rputype == 'land' ) {
			td.lands = getLandDetails( faas.rpu )
			td.plants = getPlantTreeDetails( faas.rpu )
		}
    	else if( faas.rpu.rputype == 'bldg' ) {
			td.bldgdesc  	= faas.rpu.info.bldgtype.bldgtypename + ' - ' + faas.rpu.info.bldgkindbucc.bldgkindname
			td.floorcount 	= faas.rpu.info.floorcount 
			td.buildings 	= getBldgDetails( faas.rpu )
		}
    	else if( faas.rpu.rputype == 'mach' ) {
			td.machinedesc = getMachineDescriptions( faas.rpu )
			td.machines = getMachDetails( faas.rpu )
		}
    	else if( faas.rpu.rputype == 'planttree' ) {
			td.plants = getPlantTreeDetails( faas.rpu )
		}
    	else if( faas.rpu.rputype == 'misc' ) {
			td.miscdesc  = getMiscDescriptions( faas.rpu )
			td.miscitems = getMiscDetails( faas.rpu )
		}
    	else throw new Exception( 'Invalid RPU Type.' )
    	
		def setting = rptSettingSvc.open();
		if( setting ){
			td.ordinanceno = setting.ordinanceno;
			td.ordinancedate = new java.text.SimpleDateFormat("yyyy-MM-dd").parse( setting.ordinancedate );
		}
    	return td;
    }
	
	void buildAnnotationInfo( td, faas ) {
		td.annotated  = false 
		if( faas.info.annotated == true ) {
			def data = em.sqlContext.createNamedQuery('faas:getActiveAnnotationId').setParameter('faasid', faas.objid).singleResult
			def annotation = em.read('annotation', data )
			td.annotated 		= true 
			td.annotationtype 	= annotation.doctype 
			def mortgagedate 	= null
			if(annotation.mortgagedate){
				mortgagedate = dateSvc.parse('yyyy-MM-dd', annotation.mortgagedate )
			}
			
			td.annotation = [
				annotationfileno		 : annotation.fileno,
				annotationbank			 : annotation.bank,	
				annotationloanamount 	 : annotation.loanamount,
				annotationmortgagedate	 : mortgagedate,
				annotationorno			 : annotation.orno,
				annotationordate		 : dateSvc.parse('yyyy-MM-dd', annotation.ordate ),
				annotationamount 		 : annotation.oramount ,
				annotationbranchno 	   	 : annotation.branchno,
				annotationcaseno		 : annotation.caseno,
				annotationsignedby 		 : annotation.signedby,
				annotationsignedbytitle  : annotation.signedbytitle
			]
		}
	}
	
	void clearRealPropertyInfo( td ) {
		println 'var.td_show_landinfo_on_improvements -> ' + var.td_show_landinfo_on_improvements 
		int showlandinfo =  toInt(var.td_show_landinfo_on_improvements, 1 ) 
		if( showlandinfo == 1 ) return 
		
		td.titleno 		= ''
		td.cct			= ''
		td.cctdate		= null
		td.surveyno		= ''
		td.cadastrallotno = ''
		td.blockno		= ''
		td.north		= ''
		td.south		= ''
		td.east			= ''
		td.west			= ''
	}
	
	def getMachineDescriptions( machrpu ) {
		return machrpu.info.machuses.machdetails.machinename.flatten().join(',')
	}
	
	def getMiscDescriptions( miscrpu ) {
		return miscrpu.info.miscrpuitems.miscitemname.join(',')
	}
    
    private def getLandDetails( rpu ) {
    	def data = [];
    	
    	def landdetails = rpu.info.landdetails;

		landdetails.each {
			def item = [
				classification	: rpu.classname,
				actualuse 		: it.actualusename,
				specificclass 	: it.specificclassname,
				area			: it.area,
				assesslevel		: it.assesslevel,
				marketvalue		: it.marketvalue,
				assessedvalue	: it.assessedvalue
			];
			
			data.add( item );
		}
		
		return data;
    }
    
    private def getBldgDetails( rpu ) {
    	def data = [];
    	
    	def bldguses = rpu.info.bldguses;
			
		if( rpu.info.predominant as boolean ) {
			def item = [
				classification	: rpu.classname,
				actualuse 		: rpu.classname,
				assesslevel		: rpu.info.assesslevel,
				marketvalue		: rpu.totalmv,
				assessedvalue	: rpu.totalav
			];
			
			data.add( item );
		} else {
			bldguses.each {
				def item = [
					classification	: rpu.classname,
					actualuse		: it.actualuse.actualusename,
					assesslevel		: it.assesslevel,
					marketvalue		: it.marketvalue,
					assessedvalue	: it.assessedvalue
				];
				
				data.add( item );
			}
		}
		
		return data;
    }
    
    private def getMachDetails( rpu ) {
    	def data = [];
    	
    	def machuses = rpu.info.machuses;
			
		machuses.each { mu ->
			mu.machdetails.each {
				def item = [
					classification		: rpu.classname,
					machine				: it.machinename,
					actualuse			: mu.actualuse.actualusename,
					depreciation		: it.depreciation,
					marketvalue			: it.marketvalue,
					assesslevel			: it.assesslevel,
					assessedvalue		: it.assessedvalue
				];
				
				data.add( item );
			}
		}
    	
    	return data;
    }
    
    private def getPlantTreeDetails( rpu ) {
    	def data = [];
		def planttreedetails= []
    	if( rpu.info.planttrees ) 
			planttreedetails = rpu.info.planttrees
		else 
			planttreedetails = rpu.info.planttreedetails;
			
		planttreedetails.each {
			def item = [
				classification 		: rpu.classname,
				actualuse			: it.assesslevelname,
				planttreename		: it.planttreename,
				marketvalue			: it.marketvalue,
				assesslevel			: it.assesslevel,
				assessedvalue		: it.assessedvalue
			];
			
			data.add( item );
		}
		
		return data;
    }
    
    private def getMiscDetails( rpu ) {
    	def data = [];
    	
    	def miscrpuitems = rpu.info.miscrpuitems;
			
		miscrpuitems.each {
			def item = [
				classification		: rpu.classname,
				miscitem			: it.miscitemname,
				actualuse			: rpu.info.actualusename,
				marketvalue			: it.marketvalue,
				assesslevel			: it.assesslevel,
				assessedvalue		: it.assessedvalue
			];
			
			data.add( item );
		}
    	
    	return data;
    }
    
	int toInt( val, defval  ) {
		try {
			return Integer.parseInt( val ) 
		}
		catch( e ) {
			return defval
		}
	}
}
