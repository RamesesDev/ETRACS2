import com.rameses.annotations.*
import groovy.text.SimpleTemplateEngine

class LandHtmlService
{
   @ProxyMethod
	def buildLandHTML(def faas) {
      def actualusename = faas.rpu.info.landdetails.actualusename
      def adjustments = faas.rpu.info.landdetails.landadjustments
      
      adjustments = uniqueAddAmountOnly(adjustments)
     
      def flag = 0
      for(a in faas.rpu.info.landdetails.adjustments) {
         a.each {
            it.uniqueClass = actualusename.get(flag)
            adjustments.add(it)
         }
         flag++
      }
      adjustments = validateListOfMaps(adjustments)
      
      def result = []
      def groups = []
      
      //
      for(a in 0..actualusename.size() -1 ) {
         if(adjustments) {
            //for(b in 0..adjustments.adjtypecode.size() - 1) {
            adjustments.each {
               if(it.uniqueClass.equals(actualusename[a]) || it.uniqueClass.equals('')) {
                  result.add(
                     [
                        'au':actualusename[a], 
                        'atc':it.adjtypecode,
                        'atn':it.adjtypename,
                        'expr':it.expr,
                        'adj':it.adjustment
                     ]
                  )
               }
            }
         }
         /* 
         else {
            result.add(
               [
                  'au':actualusename.get(a), 
                  'atc':'',
                  'atn':'',
                  'expr':'',
                  'adj':''
               ]
            )
         }
         */
      }
       
      def data = result.groupBy{ it.au }
      
      for(a in 0..result.au.size() - 1) {
         if(! groups.contains(result.au[a]))
            groups.add(result.au[a])
      }
      
      def land = [
         [
            title:'Assessment Detail',
            cols:1,
            tables:[
               [
                  title:'Land Assessment',
                  cols:1,
                  headers:[
                     [name:'subclassname', caption:'Subclass'],
                     [name:'specificclassname', caption:'Specific Class Name'],
                     [name:'actualusename', caption:'Actual Use'],
                     [name:'taxable', caption:'Taxable'],
                     [name:'assesslevelname', caption:'Assess Level'],
                     [name:'area', caption:'Area'],
                     [name:'unitvalue', caption:'Unit Value'],
                     [name:'basemarketvalue', caption:'Base Market Value'],
                     [name:'adjustment', caption:'Adjustment'],
                     [name:'marketvalue', caption:'Market Value'],
                     [name:'assessedvalue', caption:'Assessed Value']
                  ],
                  items:[
                     [subclassname:faas.rpu.info.landdetails.subclassname],
                     [specificclassname:faas.rpu.info.landdetails.specificclassname],
                     [actualusename:faas.rpu.info.landdetails.actualusename],
                     [taxable:faas.rpu.info.landdetails.taxable],
                     [assesslevelname:faas.rpu.info.landdetails.assesslevelname],
                     [area:faas.rpu.info.landdetails.area],
                     [unitvalue:faas.rpu.info.landdetails.unitvalue],
                     [basemarketvalue:faas.rpu.info.landdetails.basemarketvalue],
                     [adjustment:faas.rpu.info.landdetails.adjustment],
                     [marketvalue:faas.rpu.info.landdetails.marketvalue],
                     [assessedvalue:faas.rpu.info.landdetails.assessedvalue]
                  ],
                  leftItems:'',
                  data:'',
                  rightItems:''
               ],
               [
                  title:'Land Adjustments',
                  cols:1,
                  headers: [
                     'Actual Use', 'Adjustments'
                  ],
                  items:'',
                  leftItems:groups,
                  data:data,
                  rightItems:[
                     'atc',
                     'atn',
                     'expr',
                     'adj'
                  ]
               ],
               [
                  title:'Plants and Trees Assessment',
                  cols:1,
                  headers:[
                     [name:'planttreecode', caption:'Code'],
                     [name:'planttreename', caption:'Plant / Tree'],
                     [name:'unitvaluename', caption:'Unit Value'],
                     [name:'assesslevelname', caption:'Assess Level'],
                     [name:'bearing', caption:'Bearing'],
                     [name:'nonbearing', caption:'NonBearing'],
                     [name:'basemarketvalue', caption:'Base Market Value'],
                     [name:'adjustment', caption:'Adjustment'],
                     [name:'marketvalue', caption:'Market Value'],
                     [name:'assessedvalue', caption:'Assessed Value'],
                  ],
                  items:[
                     [planttreecode:faas.rpu.info.planttrees.planttreecode],
                     [planttreename:faas.rpu.info.planttrees.planttreename],
                     [unitvaluename:faas.rpu.info.planttrees.unitvaluename],
                     [assesslevelname:faas.rpu.info.planttrees.assesslevelname],
                     [bearing:faas.rpu.info.planttrees.bearing],
                     [nonbearing:faas.rpu.info.planttrees.nonbearing],
                     [basemarketvalue:faas.rpu.info.planttrees.basemarketvalue],
                     [adjustment:faas.rpu.info.planttrees.adjustment],
                     [marketvalue:faas.rpu.info.planttrees.marketvalue],
                     [assessedvalue:faas.rpu.info.planttrees.assessedvalue]
                  ],
                  leftItems:'',
                  data:'',
                  rightItems:''
               ]
            ],
            items:[
               [caption:'Total Land Area (sq.m)', value:faas.rpu.totalareasqm],
               [caption:'Total Land Area (ha.)', value:faas.rpu.totalareaha],
               [caption:'Land Base Market Value', value:faas.rpu.totalbmv],
               [caption:'Land Market Value', value:faas.rpu.totalmv],
               [caption:'Land Assessed Value', value:faas.rpu.totalav],
            ]
         ]
      ]
      
      return land
   }
   
	def validateListOfMaps = { list ->
      def l = []
      list.each { a ->
         if(a instanceof List) {
            a.each{
               l << it
            }
         } else if( a ){
            l << a
         }
      }
      
      if( l )
         return l
      
      return ''
   }
   
   def uniqueAddAmountOnly(def env) {
      def uniqueNames = []
      def mock = []
      def result = []
      env.each { list ->
        list.each {
            it.uniqueClass = ''
            result.add( it )
            mock.add(it)
         }
      }

      result = result.groupBy { it.adjtypename} 
      for(a in 0..mock.size() - 1) {
        if(! uniqueNames.contains(mock.get(a).adjtypename)) {
            uniqueNames.add(mock.get(a).adjtypename)
        }
      }

      def x = [:]
      def adjustment = 0
      uniqueNames.each { list ->
        result.get(list).each {
            adjustment += it.adjustment
        }
        x.put(list, adjustment)
        adjustment = 0
      }

      def res = mock.unique { it.adjtypenamed }
      res.each{ list ->
        list.adjustment= x.get(list.adjtypename)
      }

      return res
   }
}
