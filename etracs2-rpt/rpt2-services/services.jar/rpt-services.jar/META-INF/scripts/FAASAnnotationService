import com.rameses.common.*
import com.rameses.annotations.*
import java.rmi.server.UID

class FAASAnnotationService 
{
	@PersistenceContext('main')
	def em 
	
	@Service('TxnReference')
	def txnrefSvc
	
	@Service('LogService')
	def logSvc
	
	@Service('SequenceService')
	def seqSvc
	
	@Service('NumberService')
	def numSvc
	
	@Service('DateService')
	def dateSvc
	
	@Env
	def env
	
	def SCHEMA_NAME = 'annotation'
	def SCHEMA_VERSION = '1.0'
	
	def DRAFT_STATE 		= 'DRAFT' 
	def FORAPPROVAL_STATE 	= 'FORAPPROVAL' 
	def APPROVED_STATE 		= 'APPROVED' 
	def CANCELLED_STATE 	= 'CANCELLED' 
	
	@ProxyMethod
	public def getList( search, params ) {
		def result = null
        def criteria = [
			docno 		: search,
            tdno 		: search,
            ownername 	: search+'%',
            fullpin 	: search,
            cadastrallotno : search,
            surveyno 	: search,
            blockno  	: search,
        ]
		if( ! search ) return getListByQuery('annotation:getList', [:], params)
		if( (result = getListByQuery('annotation:getListByDocno', criteria, params)) ) return result
		if( (result = getListByQuery('annotation:getListByFileno', criteria, params)) ) return result
		if( (result = getListByQuery('annotation:getListByTdno', criteria, params)) ) return result
		if( (result = getListByQuery('annotation:getListByOwnername', criteria, params)) ) return result
		if( (result = getListByQuery('annotation:getListByPin', criteria, params)) ) return result
		if( (result = getListByQuery('annotation:getListByCadastralLotNo', criteria, params)) ) return result
		if( (result = getListByQuery('annotation:getListBySurveno', criteria, params)) ) return result
		if( (result = getListByQuery('annotation:getListByBlockno', criteria, params)) ) return result
		return result
	}
	
	
	@ProxyMethod 
	public Map initMortgage( faasid ) {
		def faas = validateInit( faasid )
		def mortgage = [
			schemaname		: SCHEMA_NAME,
			schemaversion 	: SCHEMA_VERSION,
			docstate 		: DRAFT_STATE,
			doctype	  		: 'mortgage',
			opener			: 'mortgage',
			faasid			: faasid ,
			bank 			: null,
			loanamount		: 0.0,
			mortgagedate	: null,
		]
		
		mortgage.putAll( faas )
		mortgage.objid	  = null 
		mortgage.docstate = DRAFT_STATE
		return mortgage 
	}
	
	@ProxyMethod 
	public Map initBailBond( faasid ) {
		def faas = validateInit( faasid )
		def bailbond = [
			schemaname		: SCHEMA_NAME,
			schemaversion 	: SCHEMA_VERSION,
			docstate 		: DRAFT_STATE,
			doctype	  		: 'bailbond',
			opener			: 'bailbond',
			faasid			: faasid ,
			branchno		: null, 
			caseno			: null,
		]
		
		bailbond.putAll( faas )
		bailbond.objid	  = null
		bailbond.docstate = DRAFT_STATE
		return bailbond 
	}
	
	@ProxyMethod
	public Map create( annotation ) {
		checkFaasCurrentState( annotation.faasid )
		validateInfo( annotation )
		annotation.objid = 'A'+ new UID()
		annotation.docno = seqSvc.getNextFormattedSeries('FAASAnnotation')
		createAnnotationDetail( annotation )
		em.validate( annotation.schemaname, annotation )
		em.create( annotation.schemaname, annotation )
		logSvc.log('CREATE', 'Annotation', annotation.objid )
		//allow multiple annotations 
		//txnrefSvc.insert(annotation.faasid,  annotation.objid, 'Annotation', 'FAAS is referenced by Annotation No. ' + annotation.docno + '.' )
		return annotation 
	}
	
	void validateInfo( annotation ) {
		def currdate 		= dateSvc.serverDate 
		def dtsigned		= dateSvc.parse('yyyy-MM-dd', annotation.dtsigned )
		def ordate			= dateSvc.parse('yyyy-MM-dd', annotation.ordate )
		
		def mortgagedate 	= null
		if( annotation.mortgagedate ) {
			mortgagedate 	= dateSvc.parse('yyyy-MM-dd', annotation.mortgagedate )
		}
		
		if( mortgagedate && mortgagedate > currdate ) throw new Exception('Mortgage Date must not exceed current date.')
		if( dtsigned > currdate ) throw new Exception('Date Signed must not exceed current date.')
		if( mortgagedate && dtsigned < mortgagedate ) throw new Exception('Date Signed must be later or equal to Mortgage Date.')
		if( ordate > currdate ) throw new Exception('O.R. Date must not exceed current date.')
		if( ordate < dtsigned ) throw new Exception('O.R. Date must be later or equal to Date Signed.')
		if( mortgagedate && ordate < mortgagedate ) throw new Exception('O.R. Date must be later or equal to Mortgage Date.')
	} 
	
	@ProxyMethod
	public Map update( annotation ) {
		validateInfo( annotation )
		createAnnotationDetail( annotation )
		em.validate( annotation.schemaname, annotation )
		em.update( annotation.schemaname, annotation, { diff ->
			logSvc.logB('UPDATE', 'Annotation', annotation.objid, '', diff )
		} as UpdateChangeHandler)
		return annotation 
	}
	
	@ProxyMethod
	public def open( annotationid ) {
		def data = em.read( 'annotation', [objid:annotationid] )
		if( !data ) throw new Exception('Cannot open annotation with ID ' + annotationid + '.')
		return data 
	}
	
	@ProxyMethod
	public Map submit( annotation ) {
		validateInfo( annotation )
		def old = em.read( annotation.schemaname, annotation)
		if( old.docstate == APPROVED_STATE ) throw new Exception('Annotation has already been approved.')
		if( old.docstate == CANCELLED_STATE ) throw new Exception('Annotation has already been cancelled.')
		if( old.docstate == FORAPPROVAL_STATE ) throw new Exception('Annotation has already been submitted for approval.')
		checkFaasCurrentState( annotation.faasid )
		annotation.docstate 		= FORAPPROVAL_STATE
		annotation.submittedby  	= env.USERNAME
		annotation.submittedbytitle = env.USERJOBTITLE 
		annotation.dtsubmitted		= new Date()
		em.update( annotation.schemaname, annotation )
		logSvc.log('SUBMIT', 'Annotation', annotation.objid )
		return annotation 
	}
	
	@ProxyMethod
	public Map approve( annotation ) {
		def old = em.read( annotation.schemaname, annotation)
		if( old.docstate == DRAFT_STATE ) throw new Exception('Annotation has not yet been submitted for approval.')
		if( old.docstate == APPROVED_STATE ) throw new Exception('Annotation has already been approved.')
		if( old.docstate == CANCELLED_STATE ) throw new Exception('Annotation has already been cancelled.')
		checkFaasCurrentState( annotation.faasid )
		annotation.docstate 		= APPROVED_STATE
		annotation.approvedby  		= env.USERNAME
		annotation.approvedbytitle 	= env.USERJOBTITLE 
		annotation.dtapproved		= new Date()
		em.update( annotation.schemaname, annotation )
		annotateFAAS( annotation )
		logSvc.log('APPROVE', 'Annotation', annotation.objid )
		return annotation 
	}
	
	@ProxyMethod
	public void remove( annotation ) {
		def old = em.read( annotation.schemaname, annotation)
		if( old.docstate == APPROVED_STATE ) throw new Exception('Annotation has already been approved.')
		if( old.docstate == CANCELLED_STATE ) throw new Exception('Annotation has already been cancelled.')
		txnrefSvc.delete( annotation.faasid )
		em.delete( 'annotation', annotation)
		logSvc.log('DELETE', 'Annotation', annotation.objid )
	}

	
	void createAnnotationDetail( annotation ) {
		def text = ''
		if( annotation.doctype == 'mortgage' ) {
			text += 'Mortgage for P ' + annotation.loanamount + ' to the ' + annotation.bank + '.'
			text += ' This instrument executed on ' + annotation.mortgagedate 
			text += ' by ' + annotation.mortgageby + '. Ratified by ' + annotation.signedby + '.'
			text += annotation.signedbytitle + ' on ' + annotation.dtsigned + '.'  
		}
		else if( annotation.doctype == 'bailbond' ) {
			text += 'Bail Bond: Filed under Case No. ' + annotation.caseno + ' on ' + annotation.branchno + '. ' 
			text += ( annotation.plaintiff ? annotation.plaintiff : '_____________________' ) + ' vs. '  
			text += ( annotation.defendant ? annotation.defendant : '_____________________' ) + '.' 
		}
		if( ! text ) text = annotation.memoranda 
		annotation.details = text 
		
		/*
		if( annotation.doctype == 'mortgage' ) {
			annotation.details =  'Mortgage to : ' + annotation.bank + '  \n'
			annotation.details += 'Amount      : P ' +  numSvc.format('#,##0.00', annotation.loanamount) 
		}
		else if( annotation.doctype == 'bailbond' )  {
			annotation.details = 'Bail Bond in favor of ' + annotation.branchno + ' under Case No. ' + annotation.caseno + '.'
		}
		*/
	}
	
	void annotateFAAS( annotation ) {
		//set info.annotated field  to true 
		def faas = em.read( 'faas', [objid:annotation.faasid] )
		if( ! faas ) throw new Exception('Cannot open FAAS for annotation.\nPlease verify that it was not deleted.')
		faas.info.annotated = true 
		em.update( 'faas:faas', faas )
		em.update( 'faas:faaslist', faas )
	}
	
	def validateInit( faasid ) {
		def faas = checkFaasCurrentState( faasid )
		//
		//allow multiple annotations, @jzamora 
		//txnrefSvc.checkReference( faasid )
		return faas 
	}
	
	Map checkFaasCurrentState( faasid ) {
		def faas = em.sqlContext.createNamedQuery('annotation:getFaasInfo').setParameter('objid', faasid).singleResult
		if( ! faas ) throw new Exception('FAAS record does not exists.\nPlease verify that it was not deleted.')
		if( faas.docstate != 'CURRENT' ) throw new Exception('FAAS to annotate is not current.\nOnly current record is allowed.')
		return faas 
	}
	
	def getListByQuery( namedQuery, criteria, params ) {
        if( ! params ) params = [ _start:0, _limit:25]
		return em.sqlContext.createNamedQuery( namedQuery )
						.setParameters( criteria )
						.setFirstResult( params._start )
						.setMaxResults( params._limit )
						.resultList
	}
}