import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class StructuresService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
	def logService
	
	def schemaname = 'structures:structures';
	def schemaversion = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		if( !searchText ) return getListByQuery( 'structures:getList', [:], params );
		
		def result = [];
		
		if((result = getListByQuery( 'structures:getListByCode', [structurecode:searchText+"%"], params ))) return result;
		if((result = getListByQuery( 'structures:getListByStructure', [structuredesc:searchText+"%"], params ))) return result;
		
		return result;
	}
    
    @ProxyMethod
    public List lookupStructureMaterials( structureid, searchText, params) {
		if( ! searchText ) return getListByQuery( 'structures:getMaterial', [:], params )
		def result = [] 
        
		def criteria = [
			code  : searchText+'%',
			name  : searchText+'%',
		]
		
		if((result = getListByQuery('structures:getMaterialByCode', criteria, params))) return result ;
		if((result = getListByQuery('structures:getMaterialByName', criteria, params))) return result ;
		return result 
    }
	
	@ProxyMethod
	public def open( objid ){
		def structure = em.sqlContext.createNamedQuery( 'structures:getById' ).setParameter( 'objid', objid ).singleResult;
		if( structure ) return em.read( schemaname, structure );
		
		return null;
	}
	
	@ProxyMethod
	public def create( structure ){
		structure.objid = "ST" + new UID();
		structure.schemaname = schemaname;
		structure.schemaversion = schemaversion;
		
		validate( structure );
		em.create( structure.schemaname, structure );
		
		return structure;
	}
	
	@ProxyMethod
	public def update( structure ){
		validateUpdate( structure );
		
		em.update( structure.schemaname, structure, { diff ->
			logService.logB( 'UPDATE', 'Structure', structure.objid, null, diff );
		} as UpdateChangeHandler )
		
		return structure;
	}
	
	@ProxyMethod
	public void delete( structure ){
		em.delete( structure.schemaname, structure );
	}
	
	
	private void validate( structure ){
		def oldstructure = em.read(structure.schemaname, structure);
		util.validateLastUpdate( structure, oldstructure );
		
		checkDuplicates( structure );
		em.validate(structure.schemaname, structure);
	}
	
	private void validateUpdate( structure ){
		def oldstructure = em.read(structure.schemaname, structure);
		util.validateLastUpdate( structure, oldstructure );
		
		em.validate(structure.schemaname, structure);
	}
	
	private void checkDuplicates( structure ){
		def data = em.sqlContext.createNamedQuery( 'structures:checkDuplicateCode' ).setParameter( 'structurecode', structure.structurecode ).singleResult;
		if( data.count > 0 ) throw new Exception( "Structure $structure.structurecode already exists." );
		data = em.sqlContext.createNamedQuery( 'structures:checkDuplicateStructure' ).setParameter( 'structuredesc', structure.structuredesc ).singleResult;
		if( data.count > 0 ) throw new Exception( "Structure $structure.structuredesc already exists." );
	}
	
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}

}
