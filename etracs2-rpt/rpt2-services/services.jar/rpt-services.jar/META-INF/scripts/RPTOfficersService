import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class RPTOfficersService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
	def logService
	
	def schemaname = 'rptofficers:rptofficers';
	def schemaversion = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		if( !searchText ) return getListByQuery( 'rptofficers:getList', [:], params );
		
		def result = [];
		
		if((result = getListByQuery( 'rptofficers:getListByLastName', [lastname:searchText+"%"], params ))) return result;
		if((result = getListByQuery( 'rptofficers:getListByFirstName', [firstname:searchText+"%"], params ))) return result;
		if((result = getListByQuery( 'rptofficers:getListByPosition', [position:searchText+"%"], params ))) return result;
		
		return result;
	}
    
    @ProxyMethod
    public List lookup( searchText, officerType, params ) {
        if( !searchText ) return getListByQuery( 'rptofficers:lookupList', [officertype:officerType], params );
		def result = [];
        def criteria = [
            officertype : officerType,
            lastname   : searchText+ '%',
            firstname  : searchText+ '%',
        ]
        if((result = getListByQuery( 'rptofficers:lookupListByLastName', criteria, params ))) return result;
		if((result = getListByQuery( 'rptofficers:lookupListByFirstName', criteria, params ))) return result;
		return result;
    }
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'rptofficers:getById' ).setParameter( 'objid', objid ).singleResult;
	}
	
	@ProxyMethod
	public def create( rptofficer ){
		rptofficer.objid = "RPTO" + new UID();
		rptofficer.schemaname = schemaname;
		rptofficer.schemaversion = schemaversion;
		rptofficer.fullname = rptofficer.firstname + ' ' + (rptofficer.middlename ? rptofficer.middlename : '').toString() + ' ' + rptofficer.lastname;
		
		validate( rptofficer );
		em.create( rptofficer.schemaname, rptofficer );
		
		return rptofficer;
	}
	
	@ProxyMethod
	public def update( rptofficer ){
		rptofficer.fullname = rptofficer.firstname + ' ' + (rptofficer.middlename ? rptofficer.middlename : '').toString() + ' ' + rptofficer.lastname;
		validateUpdate( rptofficer );
		
		em.update( rptofficer.schemaname, rptofficer, { diff ->
			logService.logB( 'UPDATE', 'RPTOfficer', rptofficer.objid, null, diff );
		} as UpdateChangeHandler )
		
		return rptofficer;
	}
	
	@ProxyMethod
	public void delete( rptofficer ){
		em.delete( rptofficer.schemaname, rptofficer );
	}
	
	
	private void validate( rptofficer ){
		def oldrptofficer = em.read(rptofficer.schemaname, rptofficer);
		util.validateLastUpdate( rptofficer, oldrptofficer );
		
		checkDuplicates( rptofficer );
		em.validate(rptofficer.schemaname, rptofficer);
	}
	
	private void validateUpdate( rptofficer ){
		def oldrptofficer = em.read(rptofficer.schemaname, rptofficer);
		util.validateLastUpdate( rptofficer, oldrptofficer );
		
		em.validate(rptofficer.schemaname, rptofficer);
	}
	
	private void checkDuplicates( rptofficer ){
		def data = em.sqlContext.createNamedQuery( 'rptofficers:checkDuplicateName' ).setParameter( 'fullname', rptofficer.fullname ).singleResult;
		if( data.count > 0 ) throw new Exception( "$rptofficer.fullname already exists." );
	}
	
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}

}
