import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class RPTCertificationsService
{
    @PersistenceContext('main')
    def em;
    
    @Service('DateService')
    def dtSvc;
	
	@Service('SequenceService')
	def seqSvc;
	
	def SEQUENCE_KEY = 'RPTCERTIFICATION';
	def SCHEMA_VERSION = '1.0';
	def SCHEMA_NAME = 'rptcertification';
	
	private def doValiDate( def param ){
		
		if( !param.official ){
			java.sql.Date date = new java.sql.Date( dtSvc.serverDate.getTime() );
	    	param.ordate = java.sql.Date.valueOf( param.ordate.toString() );
	        if( param.ordate.time > date.time )
    			throw new Exception("O.R. Date must be less than or equal to Current Date of ${date}. ");
		}
	}
	
	/** fetch item headers **/
	private def fetchItemHeaders( def param ){
		def result = [:];	
		
		result.byAuthorityOf = param.byauthority;
		result.issuedby = param.certifiedby;
		result.issuedbyposition = param.certifiedbytitle; 
		
		return result;
	}
	
	/** fetch headers **/
	private def fetchDataHeaders( def param ){
		
		param.td = [:];
		if( !param.extended ){
			param.td.rpu = [:];
			param.td.rpu.realProperty = [:];
			
			param.td.taxpayerName = param.taxpayername;
			param.td.rpu.realProperty.location = param.barangay;
			param.td.tdno = param.tdno;
			param.td.rpu.totalAMV = param.totalmv; //total market value.
			param.td.rpu.pin = param.fullpin;
			param.putAll( fetchItemHeaders(param) );
		}
		else
			param.td = em.serializer.read(param.extended).td;

		return param;
	}
	
	/** do serialize items.	**/
	private def doSerializeData( def list ){
		list.each(){
			
			it.classification = it.classcode;
			it.location 	  = it.barangay;
			it.area 		  = it.totalareasqm;
			it.marketvalue    = it.totalmv;
			it.assessedvalue  = it.totalav;
		}
		
		return list;
	}
	
    @ProxyMethod /** No Property **/
    public def fetchDataNoProperty( def param ){
    	
       	doValiDate( param );
       
        def taxpayer = em.sqlContext.createNamedQuery( 'rptcertification:searchByTaxpayerid' ).setParameters( param ).singleResult;        
        if( taxpayer )
            throw new Exception( "There's a Property defined for taxpayer: ${param.taxpayername}. " );
		
		/** header **/
		param.opener = 'noproperty';
		param.title = 'NO_PROPERTY'
		param.putAll( fetchItemHeaders(param) );
		param.taxpayerName = param.taxpayername
		param.docno = seqSvc.getNextFormattedSeries( SEQUENCE_KEY );
		
        return param;
    }
    
    @ProxyMethod /** Land Holding **/
	public def fetchDataLandHolding( param ) {
		doValiDate( param ); 
		def taxpayer = em.sqlContext.createNamedQuery( 'rptcertification:searchByTaxpayerid' ).setParameters( param ).singleResult;        
		if( !taxpayer ) 
			throw new Exception( "There are no Property defined for taxpayer: ${param.taxpayername}. " );
		
		def getData = em.sqlContext.createNamedQuery('rptcertification:getLandHolding').setParameters( param ).resultList
		if( !getData )
			throw new Exception( "There are no registered lands for taxpayer: ${param.taxpayername}. " );
				
		/** header **/
		param.opener = 'landholding';
		param.title = 'LAND_HOLDING';
		param.docno = seqSvc.getNextFormattedSeries( SEQUENCE_KEY );
		param.taxpayerName = param.taxpayername;
		param.putAll( fetchItemHeaders(param) );
		
    	/** items **/
		def i = 0;
		param.items = doSerializeData( getData );
		param.footnote = param.items.findAll{ it.owner != param.taxpayerName }.groupBy{ it.ownername}
		param.footnote = param.footnote.collect{ [footnote: ++i, ownername: it.key] }
		println param.footnote
		param.items = param.items.each(){ o ->
			param.footnote.each(){
				if( o.ownername == it.ownername && o.ownername != param.taxpayerName )
					o.footnote = it.footnote + ''
			}  
		}
		i = 0
		
		param.footnotes = param.items.findAll{ !it.ownername.equals(param.taxpayerName) }
		param.footnotes = param.footnotes.groupBy{ it.ownername }.collect{ [footnote: it.key] }
		param.footnotes.each(){
			it.footno = ++i + '';
		}
		
		return param 
	}
	
	@ProxyMethod /** Multiple Property **/
	public def fetchDataMultipleProperty( def param ){
		
		doValiDate( param );
        
        def taxpayer = em.sqlContext.createNamedQuery( 'rptcertification:searchByTaxpayerid' ).setParameters( param ).singleResult;        
		if( !taxpayer ) 
			throw new Exception( "There are no Property defined for taxpayer: ${param.taxpayername}. " );
        
        def getData = em.sqlContext.createNamedQuery( 'rptcertification:getMultipleProperty' ).setParameters( param ).resultList;
		
		/** header **/
		param.opener = 'multipleproperty';
		param.title = 'MULTIPLE_PROPERTY';
		param.docno = seqSvc.getNextFormattedSeries( SEQUENCE_KEY );
		param.taxpayerName = param.taxpayername;
		param.putAll( fetchItemHeaders(param) );
				
		/** items **/
		def i = 0;
		param.items = doSerializeData( getData );
		param.footnote = param.items.findAll{ it.owner != param.taxpayerName }.groupBy{ it.ownername}
		param.footnote = param.footnote.collect{ [footnote: ++i, ownername: it.key] }
		println param.footnote
		param.items = param.items.each(){ o ->
			param.footnote.each(){
				if( o.ownername == it.ownername)
					o.footnote = it.footnote + ''
			}  
		}
		i = 0
		
		param.footnotes = param.items.findAll{ !it.ownername.equals(param.taxpayerName) }
		param.footnotes = param.footnotes.groupBy{ it.ownername }.collect{ [footnote: it.key] }
		param.footnotes.each(){
			it.footno = ++i + '';
		}
		
        return param;
	}
	
	@ProxyMethod /** No Improvement **/
	public def fetchDataNoImprovement( def param ){
		
		doValiDate( param );
        
    	def taxpayer = em.sqlContext.createNamedQuery( 'rptcertification:searchByTaxpayerid' ).setParameters( param ).singleResult;        
		if( !taxpayer ) 
			throw new Exception( "There are no Property defined for taxpayer: ${param.taxpayername}. " );	
    	
    	def getData = em.sqlContext.createNamedQuery( 'rptcertification:getNoImprovements' ).setParameters( param ).resultList;
    	if( !getData )
		    throw new Exception( "There are no Land Properties with no improvements for taxpayer: ${param.taxpayername}. " ); 
		
		/** header **/
		param.opener = 'noimprovement';
		param.title = 'NO_IMPROVEMENT';
		param.docno = seqSvc.getNextFormattedSeries( SEQUENCE_KEY );
		param.taxpayerName = param.taxpayername;
		param.putAll( fetchItemHeaders(param) );
		
		/** items **/
		def i = 0;
		param.items = doSerializeData( getData );
		param.footnote = param.items.findAll{ it.owner != param.taxpayerName }.groupBy{ it.ownername}
		param.footnote = param.footnote.collect{ [footnote: ++i, ownername: it.key] }
		println param.footnote
		param.items = param.items.each(){ o ->
			param.footnote.each(){
				if( o.ownername == it.ownername)
					o.footnote = it.footnote + ''
			}  
		}
		i = 0
		
		param.footnotes = param.items.findAll{ !it.ownername.equals(param.taxpayerName) }
		param.footnotes = param.footnotes.groupBy{ it.ownername }.collect{ [footnote: it.key] }
		param.footnotes.each(){
			it.footno = ++i + '';
		}
		
		return param;
	}
	
	@ProxyMethod /** No Improvement by TD No. **/
	public def fetchDataNoImprovementTDNo( def param ){
		if( param.docstate ){
			doValiDate( param );
			def taxpayer = em.sqlContext.createNamedQuery( 'rptcertification:searchByTaxpayerid' ).setParameters( param ).singleResult;        
			if( !taxpayer ) 
				throw new Exception( "There are no Property defined for taxpayer: ${param.taxpayername}. " );

			if( !'CURRENT'.equals(param.docstate) )
				throw new Exception( "TD No. ${param.tdno} docstate: is ${param.docstate}. Only CURRENT is allowed." );    
			
			def getData = em.sqlContext.createNamedQuery( 'rptcertification:getNoImprovementsTDNo' ).setParameters( param ).singleResult;	
			if( !getData )
				throw new Exception( "There's an Improvement of Property for taxpayer: ${param.taxpayername}. with TD No.: ${param.tdno} " );
			
		}
		
		/** header **/
		param.opener = 'noimprovementbytdno';
		param.title = 'NO_IMPROVEMENT_TDNO';
		param.faasid = param.objid;
		param.docno = seqSvc.getNextFormattedSeries( SEQUENCE_KEY );
		param.putAll( fetchDataHeaders(param) );

		return param;
	}
	
	@ProxyMethod /** No Encumbrance by TD No. **/
	public def fetchDataNoEncumbranceTDNo( def param ){
		if( param.docstate ){
			doValiDate( param );
			def taxpayer = em.sqlContext.createNamedQuery( 'rptcertification:searchByTaxpayerid' ).setParameters( param ).singleResult;        
			if( !taxpayer ) 
				throw new Exception( "There are no Property defined for taxpayer: ${param.taxpayername}. " );
			
			if( !'CURRENT'.equals(param.docstate) )
				throw new Exception( "TD No. ${param.tdno} docstate: is ${param.docstate}. Only CURRENT is allowed. " );    
			
			if( !'land'.equals(param.rputype) )
				throw new Exception( "There's no land registered for taxpayer: ${param.taxpayername}. " );
		
			//unknown arguements. . .	
		}
		
		/** header **/
		param.opener = 'noencumbrancebytdno';
		param.title = 'NO_ENCUMBRANCE_TDNO';
		param.faasid = param.objid;
		param.docno = seqSvc.getNextFormattedSeries( SEQUENCE_KEY );
		param.putAll( fetchDataHeaders(param) );			

		return param;
	}
	
	@ProxyMethod /** Latest and Existing Property **/
	public def fetchDataLatestExistTDNoProperty( def param ){
		if( param.docstate ){
			doValiDate( param );
			
			def taxpayer = em.sqlContext.createNamedQuery( 'rptcertification:searchByTaxpayerid' ).setParameters( param ).singleResult;        
			if( !taxpayer ) 
				throw new Exception( "There are no Property defined for taxpayer: ${param.taxpayername}. " );
			
			if( !'CURRENT'.equals(param.docstate) )
				throw new Exception( "TD No. ${param.tdno} docstate: is ${param.docstate}. Only CURRENT is allowed." );    
			
		}
		
		/** header **/
		param.opener = 'latestexistproperty';	
		param.title = 'LATEST_EXIST_PROPERTY';
		param.faasid = param.objid;
		param.taxpayerName = param.taxpayername;
		param.docno = seqSvc.getNextFormattedSeries( SEQUENCE_KEY );
		param.putAll( fetchDataHeaders(param) );
		
		return param;
	}
	
	@ProxyMethod /** With Improvement ( Land ) **/
	public def fetchDataWImproveLand( def param ){
		doValiDate( param );        
		def taxpayer = em.sqlContext.createNamedQuery( 'rptcertification:searchByTaxpayerid' ).setParameters( param ).singleResult;        
		if( !taxpayer ) 
			throw new Exception( "There are no Properties defined for taxpayer: ${param.taxpayername}. " );
		
		def getData = em.sqlContext.createNamedQuery( 'rptcertification:getWImproveLand' ).setParameters( param ).resultList;
		
		if( !getData )  
			throw new Exception( "There's no Land Property with improvements for taxpayer: ${param.taxpayername}. " );
			
	    /** header**/
		param.opener = 'withimproveland';
		param.title = 'WITH_IMPROVEMENT_LAND';
		param.docno = seqSvc.getNextFormattedSeries( SEQUENCE_KEY );
		param.taxpayerName = param.taxpayername;
		param.putAll( fetchItemHeaders(param) );
		
        /** items **/
		def i = 0;
		param.items = doSerializeData( getData );
		param.footnote = param.items.findAll{ it.owner != param.taxpayerName }.groupBy{ it.ownername}
		param.footnote = param.footnote.collect{ [footnote: ++i, ownername: it.key] }
		println param.footnote
		param.items = param.items.each(){ o ->
			param.footnote.each(){
				if( o.ownername == it.ownername)
					o.footnote = it.footnote + ''
			}  
		}
		i = 0
		
		param.footnotes = param.items.findAll{ !it.ownername.equals(param.taxpayerName) }
		param.footnotes = param.footnotes.groupBy{ it.ownername }.collect{ [footnote: it.key] }
		param.footnotes.each(){
			it.footno = ++i + '';
		}
			
		return param;
	}
	
	@ProxyMethod /** With Improvement by TD No. **/
	public def fetchDataWImproveByTDNo( def param ){
		if( param.docstate ){
			doValiDate( param );
			def taxpayer = em.sqlContext.createNamedQuery( 'rptcertification:searchByTaxpayerid' ).setParameters( param ).singleResult;        
			if( !taxpayer ) 
				throw new Exception( "There are no Property defined for taxpayer: ${param.taxpayername}. " );
			
			if( !'CURRENT'.equals(param.docstate) )
				throw new Exception( "TD No. ${param.tdno} docstate: is ${param.docstate}. Only CURRENT is allowed." );    
			
			def getData = em.sqlContext.createNamedQuery( 'rptcertification:getImprovementsTDNo' ).setParameters( param ).singleResult;	
			if( !getData )
				throw new Exception( "There's no Improvement of Property for taxpayer: ${param.taxpayername}. with TD No.: ${param.tdno} " );
			
		}
		
		/** header **/
		param.opener = 'wimprovebytdno';
		param.title = 'WITH_IMPROVEMENT_TDNO';
		param.faasid = param.objid;
		param.taxpayerName = param.taxpayername;
		param.docno = seqSvc.getNextFormattedSeries( SEQUENCE_KEY );
		param.putAll( fetchDataHeaders(param) );
		
		return param;
	}
	
    @ProxyMethod
    public def doSave( def certification ){
        certification.objid = 'C' + new java.rmi.server.UID();
        certification.schemaname = SCHEMA_NAME;
        certification.schemaversion = SCHEMA_VERSION;
		
		em.validate( 'rptcertification', certification );
        em.create( 'rptcertification', certification );
    }
	
	@ProxyMethod
	public List getList( searchText, params){
		searchText = ( searchText ? searchText : '' )
		def result = null;
		def criteria = [
			taxpayername : searchText + '%',
			requestedby  : searchText + '%'
		]
		if( (result = getListByQuery('rptcertification:searchByTaxpayerName', criteria, params)) ) return result;
		if( (result = getListByQuery('rptcertification:searchByReqBy', criteria, params)) ) return result;
		
		return result;
	}
		
	@ProxyMethod
	public def getDataById( param ){
		return em.sqlContext.createNamedQuery('rptcertification:getDataById').setParameters( param ).singleResult;
	}
	
	@ProxyMethod
    public def open( param ) {
		def certification = em.read(SCHEMA_NAME, [objid:param.objid])
				
        return certification; 
    }
	
	private def getListByQuery( namedQuery, criteria, params ) {
        if( ! params ) params = [ _start:0, _limit:25]
		return em.sqlContext.createNamedQuery( namedQuery )
						.setParameters( criteria )
						.setFirstResult( params._start )
						.setMaxResults( params._limit )
						.resultList
	}
	
	@ProxyMethod
	public def getHtml(){
		def html = """
			<html>
				<body>
					<h1> Select an Item. </h1>
				<body>
			</html>
		"""
		return html;
	}

}
