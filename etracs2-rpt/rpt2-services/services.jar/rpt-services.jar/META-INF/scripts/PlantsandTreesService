import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class PlantsandTreesService{
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
	def logService
	
	def schemaname = 'plantsandtrees:plantsandtrees';
	def schemaversion = '1.0';
	
	@ProxyMethod
	public def getList( searchText, params ){
		if( !searchText ) return getListByQuery( 'plantsandtrees:getList', [:], params );
		
		def result = [];
		
		if((result = getListByQuery( 'plantsandtrees:getListByCode', [planttreecode:searchText+"%"], params ))) return result;
		if((result = getListByQuery( 'plantsandtrees:getListByDescription', [planttreedesc:searchText+"%"], params ))) return result;
		
		return result;
	}
	
	@ProxyMethod
	public def open( objid ){
		return em.sqlContext.createNamedQuery( 'plantsandtrees:getById' ).setParameter( 'objid', objid ).singleResult;
	}
	
	@ProxyMethod
	public def create( planttree ){
		planttree.objid = "PT" + new UID();
		planttree.schemaname = schemaname;
		planttree.schemaversion = schemaversion;
		
		validate( planttree );
		em.create( planttree.schemaname, planttree );
		
		return planttree;
	}
	
	@ProxyMethod
	public def update( planttree ){
		validateUpdate( planttree );
		
		em.update( planttree.schemaname, planttree, { diff ->
			logService.logB( 'UPDATE', 'PLANTS AND TREES', planttree.objid, null, diff );
		} as UpdateChangeHandler )
		
		return planttree;
	}
	
	@ProxyMethod
	public void delete( planttree ){
		em.delete( planttree.schemaname, planttree );
	}
	
	
	private void validate( planttree ){
		def oldplanttree = em.read(planttree.schemaname, planttree);
		util.validateLastUpdate( planttree, oldplanttree );
		
		checkDuplicates( planttree );
		em.validate(planttree.schemaname, planttree);
	}
	
	private void validateUpdate( planttree ){
		def oldplanttree = em.read(planttree.schemaname, planttree);
		util.validateLastUpdate( planttree, oldplanttree );
		
		em.validate(planttree.schemaname, planttree);
	}
	
	private void checkDuplicates( planttree ){
		def data = em.sqlContext.createNamedQuery( 'plantsandtrees:checkDuplicateCode' ).setParameter( 'planttreecode', planttree.planttreecode ).singleResult;
		if( data.count > 0 ) throw new Exception( "Plant/Tree $planttree.planttreecode already exists." );
		data = em.sqlContext.createNamedQuery( 'plantsandtrees:checkDuplicateDescription' ).setParameter( 'planttreedesc', planttree.planttreedesc ).singleResult;
		if( data.count > 0 ) throw new Exception( "Plant/Tree $planttree.planttreedesc already exists." );
	}
	
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}

}
