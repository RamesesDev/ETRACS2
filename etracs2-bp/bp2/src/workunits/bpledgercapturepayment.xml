<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    
    <invokers>
        <invoker type="bp2:bpledgercapturepayment" caption="Capture Payment" action="init" />
        <invoker type="formActions" action="close" immediate="true" caption="Cancel" icon="images/cancel.png" index="0" />
        <invoker type="formActions" action="next" shortcut="ctrl N" visibleWhen="#{mode == 'init'}" caption="Next" mnemonic="n" icon="images/next.png" index="1" />
        <invoker type="formActions" action="post" shortcut="ctrl P" visibleWhen="#{mode == 'main'}" caption="Post" mnemonic="p" icon="images/approve.png" index="2" />
        <invoker type="formActions" action="init" caption="Back" mnemonic="b"  immediate="true" visibleWhen="#{mode == 'main'}" icon="images/back.png" index="1" />
    </invokers>
    
    <code lang="groovy">
        <![CDATA[
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.reports.*;
        import java.text.DecimalFormat;
        
        public class BPLedgerCapturePaymentController {

            @Service('BPLedgerService')
            def svc;
            
            @Caller
            def caller;
            
            @Binding
            def binding;
            
            def mode = 'init';
            def qtrList = [1, 2, 3, 4];

            def entity = [:];
            def selectedItem;
            def errorMsg 
            
            def dcf = new DecimalFormat("#,##0.00");
            
            def close() {
                return '_close';
            }
            
            def init() {
                mode = 'init';
                return 'init';
            }
            
            def next() {
                entity = svc.buildCapturePayment( entity );
                paymentItemHandler.load()
                calcTotal()
                mode = 'main';
                return 'main';
            }
            
            def paymentItemHandler = [
                getRows    : { return 50; },
                getColumns : {
                    return [
                        new Column( name:"iqtr", caption:"Qtr"), 
                        new Column( name:"lobname", caption:"Line of Business" ),
                        new Column( name:"accttitle", caption:"Account" ),
                        new Column( name:"amount", caption:"Amount" ),
                        new Column( name:"amtpaid", caption:"Amount Paid*", editable:true, type:"decimal"),
                        new Column( name:"surcharge", caption:"Surcharge", editable:true, type:"decimal"), 
                        new Column( name:"interest", caption:"Interest", editable:true, type:"decimal"),
                        new Column( name:"discount", caption:"Discount", editable:true, type:"decimal")
                    ];
                },
                
                onColumnUpdate : { value, colname ->
                    entity.total = 0.0;
                    calcTotal()
                },
                
                validate  : { li -> validateItem( li.item ) },
                
                fetchList : { 
                    return entity.items;
                }

            ] as SubListModel
            
            void validateItem( item ) {
                try {
                    if( item.amtpaid == null) throw new Exception('Amount Paid is required.')
                    if( item.amtpaid < 0.0 ) throw new Exception('Amount paid must be greater than or equal to zero.')
                    if( item.amtpaid > item.amount ) throw new Exception('Amount Paid must be less than or equal to Amount.')
                    errorMsg = null
                    binding.refresh( 'errorMsg')
                }
                catch ( e) {
                    e.printStackTrace()
                    errorMsg = e.message
                    binding.refresh( 'errorMsg' ) 
                    throw e
                }
            }
            
            void calcTotal() {
                def eval = { amt -> return (amt) ? amt : 0.0; }
                for (item in entity.items) {
                    entity.total += eval( item.amtpaid ) + eval( item.surcharge ) + eval( item.interest ) - eval( item.discount );
                }
                entity.formattedtotal = dcf.format( entity.total );
            }
            
            def post() {
                if ( !MsgBox.confirm("Are you sure you want to post this document?\nDocument cannot be editted once posted.") )
                    return null;
                
                svc.postCapturePayment( entity );
                caller.binding.refresh();
                return '_close';
            }

        }
        
        ]]>
    </code>
    
    <pages>
        <page name="init" template="etracs2.bp.ledger.CaptureBPPaymentInitPage" />
        <page name="main" template="etracs2.bp.ledger.CaptureBPPaymentPage" />
    </pages>
</workunit>
