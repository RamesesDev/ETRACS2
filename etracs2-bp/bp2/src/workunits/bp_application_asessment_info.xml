<workunit>
    <invokers>
    <invoker type="bp:assessmentinfo" action="init" caption="Assessment Information"/>
        
        <invoker type="formActions" action="back" caption="Back"/>
        <invoker type="formActions" action="next" caption="Next"/>
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;

class BusinessApplicationAssessment
{

    @Caller
    def caller;
    
    def application;
    def applist;
    def index = 0;
    def app;
    def svc;

    def inputtedApps;
    
    void init(){
        app = applist[index];
        inputtedApps = [];
        evaluateInfo();
    }
    
    def appinfoListHandler = [
        getRows    : { return 10 },
        getColumns : { return [
            new Column(name:'lobname', caption:'Line of Business'),
            new Column(name:'varcaption', caption:'Variable'),
            new Column(name:'value', caption:'Value', editable:true)
        ]},
        
        fetchList : { 
            return getInfos();
        }
    ] as SubListModel

    def requiredbeforeprintinfo = [];
    def requiredforprintinfo = [];
    
    void evaluateInfo(){
        app.infos = [];
        app.infos = svc.evaluateApplicationInfo( app ).infos;
        requiredbeforeprintinfo = app.infos.findAll{ it.requiredbeforeprint == true };
        requiredforprintinfo = app.infos.findAll{ it.requiredbeforeprint != true };
        
        app.infos = requiredbeforeprintinfo;
        appinfoListHandler.load();
    }
    
    public def getInfos(){
        if( app.infos ) return app.infos;
        return requiredforprintinfo;
    }
    
    public def next(){
        if( app.infos ){
            app = svc.evaluateApplicationInfo( app );
            requiredforprintinfo += app.infos.findAll{ it.requiredbeforeprint != true };
            app.infos = [];
            
            appinfoListHandler.load();
            return '_default';
        }
        
        if( requiredforprintinfo ){
            app.infos = requiredforprintinfo;
            requiredforprintinfo = [];
            inputtedApps.add( app );
            index += 1;
        }
        
        if( index < applist.size() ) {
            app = applist[index];
            evaluateInfo();
            return '_default';
        }
        
        app = [ infos:[] ];
        
        caller.application = svc.evaluateTaxesAndFees( application.objid, inputtedApps );
        caller.applist = [];
        caller.applistHandler.load();
        return '_close';
    }
    
    def back(){
        return '_close';
    }
}

]]>        
        
    </code>
    <pages>
        <page template="etracs2.bp.application.AssessmentInfoPage"/>
    </pages>
</workunit>