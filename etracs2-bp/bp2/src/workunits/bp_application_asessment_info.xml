<workunit>
    <invokers>
    <invoker type="bp:assessmentinfo" action="init" caption="Assessment Information"/>
        <invoker type="formActions" action="back" caption="Back" immediate="true"/>
        <invoker type="formActions" action="next" caption="Next"/>
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;

class BusinessApplicationAssessment
{

    @Caller
    def caller;
    
    def application;
    def applist;
    def index = 0;
    def app;
    def svc;

    def inputtedApps;
    
    void init(){
        app = applist[index];
        inputtedApps = [];
        evaluateInfo();
    }
    
    def requiredbeforeprintinfo = [];
    def requiredforprintinfo = [];
    
    void evaluateInfo(){
        app.infos = [];
        app.infos = svc.evaluateApplicationInfo( app ).infos;
        requiredbeforeprintinfo = app.infos.findAll{ it.requiredbeforeprint == true };
        requiredforprintinfo = app.infos.findAll{ it.requiredbeforeprint != true };
        if( !requiredbeforeprintinfo ) {
            app.infos = requiredforprintinfo;
            requiredforprintinfo = [];
        }else{
            app.infos = requiredbeforeprintinfo;
        }
    }
    
    def getFields(){
        if( app.infos ){
            app.infos.each{
                it.datatype = it.vartype;
                it.category = it.lobname;
                it.caption = it.varname;
                it.items = it.arrayvalues;
            }
            
            app.infos.sort{ a, b -> 
                def atext = (a.lobname ? a.lobname : '-') + a.name 
                def btext = (b.lobname ? b.lobname : '-') + b.name 
                return atext <=> btext 
            }
            return app.infos;
        }
        return [];
    }
    
    public def getInfoHandler(){
        return InvokerUtil.lookupOpener('input_fields', [fields: getFields()]);
    }
    
    public def next(){
        if( requiredbeforeprintinfo ){
            app = svc.evaluateApplicationInfo( app );
            app.infos.each{ a->
                def o = requiredforprintinfo.find{ it.varname == a.varname };
                if( o ) requiredforprintinfo.remove( o );
                requiredforprintinfo << a;
            }
            app.infos = app.infos.findAll{ it.requiredbeforeprint != true };
            requiredbeforeprintinfo = [];
            return '_default';
        }
        
        app.infos = requiredforprintinfo;
        inputtedApps.add( app );
        
        if( applist ){
            if( (index+1) < applist.size() ) {
                app = applist[index];
                evaluateInfo();
                index += 1;
                return '_default';
            }
        }
        
        app = [ infos:[] ];
        caller.application = svc.evaluateTaxesAndFees( application.objid, inputtedApps );
        caller.applist = [];
        caller.applistHandler.load();
        return '_close';
    }
    
    def back(){
        return '_close';
    }
}

]]>        
        
    </code>
    <pages>
        <page template="etracs2.bp.application.AssessmentInfoPage"/>
    </pages>
</workunit>