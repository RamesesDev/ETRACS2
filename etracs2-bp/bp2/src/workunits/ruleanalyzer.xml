<workunit>
    <invokers>
        <invoker folderid="menu/bp/master" action="init" caption="Rule Analyzer" permission="bpadmin.bpruleanalyzer"/>
        <invoker type="home.action" action="init" caption="Rule Analyzer" permission="bpadmin.bpruleanalyzer" target="window" index="30" icon="images/debug.png"/>
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.annotations.*
import com.rameses.rcp.common.*
import com.rameses.osiris2.client.*

class RuleAnalyzerController
{
    @Binding
    def binding
    
    @Service('BPRuleService')
    def svc 
    
    @Service('BPApplicationService')
    def appSvc
    
    @Service('LGUService')
    def lguSvc
    
    @Service('LobClassificationService')
    def lobclassSvc
    
    def selectedLob
    def selectedInfo
    def selectedTaxFee
    def barangay
    def totalAssessment = 0.0
    def inputtedValues = []
    
    def entity
    
    void init() {
        createEntity()
    }
    
    void resetComputation() {
        entity.infos = []
        entity.taxfees = []
        calculateTotalAssessment()
        binding.refresh('selectedInfo|selectedTaxFee')
    }
    
    void getInfos() {
        inputtedValues.clear() 
        entity = svc.buildInfos( entity )
        calculateTotalAssessment()
        binding.refresh('selectedInfo')
    }
    
    
    /* ------------------------------------------------------------------------
    // Input Values Support
    //------------------------------------------------------------------------ */
    
    /* ------------------------------------------------------------------------
    * Checks if there are still infos required before printing. If present,
    * execute rule again for re-evaluation. However infos that are not required
    * before printing are preserved and not included in the re-evaluation to avoid 
    * infinite loop in the rule. The preserved infos are added when all infos are gathered. 
    *
    * return true if there are still infos required before printing 
    ------------------------------------------------------------------------*/
    def additionalInfos = []
    def inputHandler = { app ->
        additionalInfos.clear()
        additionalInfos = determineAdditionalInfos(app)
        if( additionalInfos ) {
            //preserve currently inputted values
            inputtedValues.addAll( app.infos )
            
            //remove additional infos to avoid infinite loop
            app.infos.clear()
            app.infos.addAll( additionalInfos )
            app = svc.buildInfos( app )
            
            //exclude previous infos from result 
            removeAllInfos( app, additionalInfos )
            removeAllInfos( app, inputtedValues ) 
            return false
        }
        return true
    }
    
    def removeAllInfos( app, list ) {
        list.each { item ->
            app.infos.removeAll( app.infos.findAll{ it.lobid == item.lobid && it.varid == item.varid } )
        }
    }
    
    List determineAdditionalInfos( app ) {
        return app.infos.findAll { it.requiredbeforeprint == true }
    }
    
    def acceptInputHandler = { app ->
        app.infos.addAll( inputtedValues)
        //convertDataTypes( app ) //TODO: Temporary while ui is not yet available
        entity = svc.buildTaxFees( app )
        sortInfos( entity )
        taxfeeListHandler.load()
        calculateTotalAssessment()
        binding.refresh('selectedTaxFee')
        binding.refresh('selectedInfo')
    }
    
    def inputValues() {
        resetComputation()
        getInfos()
        return InvokerUtil.lookupOpener('ruleanalyzer.inputvalues', [entity:entity, inputHandler:inputHandler, acceptInputHandler:acceptInputHandler] ) 
    }
    
    void sortInfos( app ) {
        app.infos.sort{ a, b -> 
            def atext = (a.lobname ? a.lobname : '-') + a.name 
            def btext = (b.lobname ? b.lobname : '-') + b.name 
            return atext <=> btext 
        }		
    }
    
    void convertDataTypes( app ) {
        app.infos.each { info ->
            if( info.vartype == 'decimal' ) info.value = Double.parseDouble( info.value +'' )
            else if( info.vartype == 'integer' ) info.value = Integer.parseInt( info.value +'' )
        }
    }
    
    def onselect = { lob ->
        if( entity.lobs.find{ it.lob.objid == lob.objid } )
            throw new Exception("Line of business $lob.name already exist.");
    }
    
    def lobLookup = InvokerUtil.lookupOpener( 'lob.lookup', [onselect:onselect] );
    def assessmenttypes = ['NEW', 'RENEW', 'RETIRE']
    
    def lobListHandler = [
        getColumns : { return [
            new Column(name:'lob', caption:'Name', editable:true, type:'lookup', handler:lobLookup, expression:'#{name}' ),
            new Column(name:'assessmenttype', caption:'Type', editable:true, maxWidth:150, type:'combo', items:assessmenttypes ),
        ]},
        createItem : { return [:] },
        fetchList  : { return entity.lobs },
        onAddItem  : { item -> doAddItem( item ) },
        onRemoveItem : { item -> 
            if( MsgBox.confirm('Delete selected line of business?') ) {
                entity.lobs.remove( item )
                resetComputation()
            }
        }
    ] as SubListModel
    
    def appinfoListHandler = [
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'lobname', caption:'Line of Business'),
            new Column(name:'varcaption', caption:'Variable'),
            new Column(name:'value', caption:'Value', editable:true ),
        ]},
        fetchList : { return entity.infos },
        onOpenItem :{ item, colName-> displayRuleInfo( item ) },
    ] as SubListModel
    
    def taxfeeListHandler = [
        getRows    : { return 50 },
        getColumns : { return [
            new Column(name:'lobname', caption:'Line of Business'),
            new Column(name:'accttitle', caption:'Account'),
            new Column(name:'assessedvalue', caption:'Assessed Value', type:'decimal'),
            new Column(name:'amountdue', caption:'Amount Due', type:'decimal'),
        ]},
        fetchList : { return entity.taxfees },
        onOpenItem :{ item, colName-> displayRuleInfo( item ) },
    ] as SubListModel
    
    
    def displayRuleInfo( item ) {
        return InvokerUtil.lookupOpener('rule.htmlinfo', [rulename:item.rulename])
    }
    
    void doAddItem( item ) {
        entity.lobs.add( item )
    }
    
    void calculateTotalAssessment() {
        def total = entity.taxfees.amountdue?.sum()
        totalAssessment = (total ? total : 0.0)
        binding.refresh('totalAssessment') 
    }
    
    void createEntity() {
        entity = [
            objid  : 'B0001', 
            lobs   : [],
            infos  : [],
            taxfees : [],
        ]
    }
    
    void setLobclassification( lobclassification )  {
        this.lobclassification = lobclassification
        entity.classificationid = lobclassification?.objid
        entity.classification   = lobclassification?.name 
    }   
    
    void setBarangay( barangay ) {
        this.barangay = barangay
        entity.barangayid = barangay?.objid
        entity.barangay   = barangay?.name
    }
    
    List getApplicationTypes() { return appSvc.getApplicationTypes() }
    List getOfficeTypes() { return appSvc.getOfficeTypes() }
    List getOrganizationTypes() { return appSvc.getOrganizationTypes() }
    List getClassifications() { return lobclassSvc.getList(null, null) }
    List getBarangays() { return lguSvc.getBarangays() }
    
}

]]>
    </code>
    <pages>
        <page template="etracs2.bp.rule.analyzer.RuleAnalyzerPage"/>
    </pages>
</workunit>