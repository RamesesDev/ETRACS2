<workunit>
    <invokers>
        <invoker type="bp:assessment" caption="Business Application"/>
        <invoker type="bp:FOR_ASSESSMENT" caption="Business Application" target="window"/>
        <invoker type="bp:FOR_APPROVAL" caption="Business Application" target="window"/>
        <invoker type="bp:FOR_REVIEW" caption="Business Application" target="window"/>
        <invoker type="bp:APPROVED" caption="Business Application" target="window"/>
        
        <invoker type="formActions" action="cancelAssessment" caption="Cancel Assessment" visibleWhen="#{application.docstate != 'APPROVED'}" mnemonic="c" icon="images/cancel24.png"/>
        <invoker type="formActions" action="assess" caption="Assess" visibleWhen="#{application.docstate == 'FOR_ASSESSMENT'}" mnemonic="a" icon="images/assess24.png"/>
        <invoker type="formActions" action="reassess" caption="Re-Assess" visibleWhen="#{application.docstate == 'FOR_REVIEW' or application.docstate == 'FOR_APPROVAL'}" mnemonic="r" icon="images/reassess24.png"/>
        <invoker type="formActions" action="submit" caption="Submit For Approval" visibleWhen="#{application.docstate == 'FOR_REVIEW'}" mnemonic="s" icon="images/submit24.png"/>
        <invoker type="formActions" action="disapprove" caption="Disapprove" visibleWhen="#{application.docstate == 'FOR_APPROVAL'}" mnemonic="d" icon="images/disapprove24.png"/>
        <invoker type="formActions" action="approve" caption="Approve" visibleWhen="#{application.docstate == 'FOR_APPROVAL'}" mnemonic="a" icon="images/approve24.png"/>
        
        <invoker type="formActions" action="viewAssessment" caption="View Assessment" visibleWhen="#{application.docstate != 'FOR_ASSESSMENT'}" icon="images/view24.png"/>
        <!-- invoker type="formActions" action="printAssessment" caption="Print Assessment" visibleWhen="#{application.docstate != 'FOR_ASSESSMENT'}" icon="images/view24.png"/-->
        
        <invoker type="formActions" action="previewApplication" caption="View Application" icon="images/view24.png"/>
    </invokers>
    
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;

class BusinessApplicationForAssessment
{
    @Service('BPApplicationService')
    def svc;
    
    @Binding
    def binding;
    
    def application;
    
    def applist = [];
    def appdata = [:];
    
    def applistHandler = [
        getRows : { return 2 },
        getColumns : { return [
            new Column( name:'txnno', caption:'App No.' ),
            new Column( name:'txntype', caption:'Application Type' ),
            new Column( name:'assessedvalue', caption:'Assessed Value' ),
            new Column( name:'amountdue', caption:'Amount Due' ),
            new Column( name:'iyear', caption:'Applicable Year', format:'####' )
        ]},

        fetchList : { 
            if( !applist ) applist = svc.getApplicationList( application.objid ); 
            return applist;
        }
    ] as SubListModel;
    
    def appinfoListHandler = [
        getRows    : { return 3 },
        getColumns : { return [
            new Column(name:'lobname', caption:'Line of Business'),
            new Column(name:'varcaption', caption:'Variable'),
            new Column(name:'value', caption:'Value'),
        ]},

        fetchList : { 
            return appdata?.infos;
        }
    ] as SubListModel
    
    def taxfeeListHandler = [
        getRows    : { return 3 },
        getColumns : { return [
            new Column(name:'lobname', caption:'Line of Business'),
            new Column(name:'accttitle', caption:'Account'),
            new Column(name:'assessedvalue', caption:'Assessed Value', type:'decimal'),
            new Column(name:'amountdue', caption:'Amount Due', type:'decimal', editable:(application.txnmode == 'CAPTURE' && application.docstate != 'APPROVED')),
        ]},
        
        onColumnUpdate : { obj, name ->
            if( name == 'amountdue' ) binding.refresh();
        },
        
        fetchList : { 
            return appdata?.taxfees;
        }
    ] as SubListModel
    
    def assess() { 
        return InvokerUtil.lookupOpener('bp:assessmentinfo', [application:application, applist:applist, svc:svc]);
    }
    
    def reassess(){
        def list = (appdata) ? [appdata] : applist;
        return InvokerUtil.lookupOpener('bp:assessmentinfo', [application:application, applist:list, svc:svc]);
    }
    
    def cancelAssessment(){ 
        def app = svc.cancelApplicationForAssessement( application.objid );
        return InvokerUtil.lookupOpener('bp:view', [application:app] );
    }
    
    void submit(){
        if( MsgBox.confirm("Submit for approval?") ){
            application = svc.submitForReview( application.objid, applist );
        }
    }
    
    def approve(){
        if( MsgBox.confirm("Approve?") ){
            application = svc.approveApplication( application.objid, applist );
            return InvokerUtil.lookupOpener('bp:assessment', [application:application]);
        }
        return null;
    }
    
    void disapprove(){
        application = svc.disapproveApplication( application.objid );
    }

    def getTotalAssessment(){
        def total = 0.0;
        if( appdata ){ 
            appdata.taxfees.each{ total += it.amountdue; } 
            appdata.amountdue = total;
        }
        return total;
    }
    
    def previewApplication(){
        return InvokerUtil.lookupOpener('bp.applicationreport', [applicationid:application.objid]);
    }
    
    def viewAssessment(){
        return InvokerUtil.lookupOpener('bp.assessmentreport', [applicationid:application.objid]);
    }
}

]]>        
        
    </code>
    <pages>
        <page template="etracs2.bp.application.AssessmentMainPage"/>
    </pages>
</workunit>