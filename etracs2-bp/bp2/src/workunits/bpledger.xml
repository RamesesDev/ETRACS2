<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    
    <invokers>
        <invoker folderid="/menu/bp" action="init" caption="Business Ledger" permission="bpadmin.ledger"/>
        <invoker type="home.action"  action="init" caption="Business Ledger" permission="bpadmin.ledger" index="60" target="window" icon="images/folder.png"/>/>
        
        <invoker type="formActions" action="back" immediate="true" caption="Back" icon="images/back.png"/>
        <invoker type="formActions" action="next" shortcut="ctrl N" visibleWhen="#{mode == 'init'}" caption="Next" mnemonic="n" icon="images/next.png"/>
    </invokers>
    
    <code lang="groovy">
        <![CDATA[
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.reports.*;
        
        public class BPLedgerController {

            @Service('BPLedgerService')
            def svc;
            
            @Caller
            def caller;
            
            @Binding
            def binding;
            
            def mode = 'init';
            
            def filter;
            
            def entity = [:];
            def application;
            def receivable;
            def payment;
            
            def init() {
                return 'init';
            }
            
            def back(){
                mode = 'init';
                return mode
            }
            
            def next() {
                entity = svc.openLedger( entity );
                mode = 'main';
                return 'main';
            }
            
            def onselectBusiness = { sb ->
                filter = "";
                entity.businessid = sb.objid;
                entity.business = [ 
                    tradename       : sb.tradename,
                    businessaddress : sb.businessaddress,
                    taxpayerid      : sb.taxpayerid,
                    taxpayername    : sb.taxpayername,
                    taxpayeraddress : sb.taxpayeraddress,
                    adminid         : sb.adminid,
                    adminname       : sb.adminname,
                    adminaddress    : sb.adminaddress,
                    lastyrpaid      : sb.lastyrpaid,
                    lastqtrpaid     : sb.lastqtrpaid
                ];
                binding.refresh();
            }
            
            def lookupBusiness() {
                return InvokerUtil.lookupOpener( 'business:lookup', [onselect:onselectBusiness, searchText:filter] );
            }
            
            def appHandler = [
                getRows    : { return 50; },
                getColumns : {
                    return [
                        new Column( name:"iyear", caption:"Year", format:"#0", maxWidth:60, resizable:false),
                        new Column( name:"txnno", caption:"App. No."),
                        new Column( name:"txntype", caption:"Type"),
                        new Column( name:"txnmode", caption:"Type"),
                        new Column( name:"amount", caption:"Amount"), 
                        new Column( name:"amtpaid", caption:"Amount Paid" ),
                        new Column( name:"docstate", caption:"Status")
                    ];
                },
                fetchList : {  return svc.getApplicationByBusiness( entity.businessid ); }
            ] as SubListModel;
            
            def receivableHandler = [
                getRows    : { return 50; },
                getColumns : {
                    return [
                        new Column( name:"iyear", caption:"Year", format:"#0", maxWidth:60, resizable:false),
                        new Column( name:"iqtr", caption:"Qtr", maxWidth:35, resizable:false),
                        new Column( name:"lobname", caption:"Line of Business"),
                        new Column( name:"accttitle", caption:"Account"),
                        new Column( name:"amount", caption:"Amount"), 
                        new Column( name:"amtpaid", caption:"Amount Paid" )
                    ];
                },
                fetchList : {  return application?.receivables; }
            ] as SubListModel;
            
            def paymentHandler = [
                getRows : { return 25 },
                getColumns: { 
                    return [
                        new Column( name:"year", caption:"Year", format:"#0", maxWidth:60, resizable:false),
                        new Column( name:"qtr", caption:"Qtr", maxWidth:35, resizable:false),
                        new Column( name:"refdate", caption:"Date Posted"),
                        new Column( name:"reftype", caption:"Type"),
                        new Column( name:"refno", caption:"Ref. No."),
                        new Column( name:"amount", caption:"Amount"),
                    ];
                },
                fetchList : { return application?.payments; }
            ] as SubListModel;
            
            def creditHandler = [
                getRows    : { return 50; },
                getColumns : {
                    return [
                        new Column( name:"reftype", caption:"Type"),
                        new Column( name:"refno", caption:"Ref. No."),
                        new Column( name:"amount", caption:"Amount"), 
                        new Column( name:"surcharge", caption:"Surcharge"), 
                        new Column( name:"interest", caption:"Interest"), 
                        new Column( name:"discount", caption:"Discount")
                    ];
                },
                fetchList : {
                    def credits = [];
                    if( receivable ){
                        credits = application?.credits?.findAll{ it.bpreceivableid == receivable.objid }
                                      .sort{ a, b ->
                                            def sA = a.year+'-'+a.qtr+'-'+a.lobname;
                                            def bA = b.year+'-'+b.qtr+'-'+b.lobname;
                                            return sA <=> bA;
                                      };
                   }
                   return credits;
                }

            ] as SubListModel;
            
            def capturePayment() {
                if( application ){
                    def paymentInfo = [
                        businessid  : entity.businessid,
                        business    : entity.business,
                        applicationid: application.objid,
                        amtpaid     : 0.0,
                        total       : 0.0
                    ];
                    return new PopupOpener( name:"bp2:bpledgercapturepayment", action:"init", params:[entity:paymentInfo] );
                }
            }
            
            void deletePayment(){
                if( application ){
                    payment.applicationid = application.objid;
                    svc.deleteCapturePayment( payment );
                }
            }
        }
        
        ]]>
    </code>
    
    <pages>
        <page name="init" template="etracs2.bp.transaction.SelectBusinessPage" />
        <page name="main" template="etracs2.bp.ledger.BPLedgerPage" />
        <page name="item" template="etracs2.bp.ledger.BPLedgerItemPage" />
    </pages>
</workunit>
