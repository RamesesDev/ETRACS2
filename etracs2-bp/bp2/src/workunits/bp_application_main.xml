<workunit>
    <invokers>
        <invoker type="bp:DRAFT" action="initView" caption="BP Application" target="window"/>
        <invoker type="bp:open" action="init" caption="BP Application"/>

        <invoker type="formActions" action="cancel" caption="Cancel" mnemonic="c" icon="images/cancel24.png" immediate="true"/>
        <invoker type="formActions" action="edit"   caption="Edit"   mnemonic="s" icon="images/edit24.png"   immediate="true"  shortcut="ctrl S" visibleWhen="#{mode == 'view'}"/>
        <invoker type="formActions" action="save"   caption="Save"   mnemonic="s" icon="images/save24.png"   shortcut="ctrl S"  visibleWhen="#{mode != 'view'}"/>
        <invoker type="formActions" action="delete" caption="Delete" mnemonic="d" icon="images/delete24.png"   immediate="true" shortcut="ctrl X" visibleWhen="#{application.txnno != null and application.docstate != 'APPROVED' }"/>
        
        <invoker type="formActions" action="submit"   caption="Submit" 
                 visibleWhen="#{application.docstate == 'DRAFT' and mode == 'view'}"/>
        <invoker type="formActions" action="assess"   caption="Assess"
                 visibleWhen="#{application.docstate == 'FOR_ASSESSMENT' and mode == 'view'}"/>
        <invoker type="formActions" action="reassess" caption="Re-Assess"
                 visibleWhen="#{application.docstate == 'FOR_APPROVAL' and mode == 'view'}"/>
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;

class BPApplication
{
    @Binding
    def binding;

    @Service('BPEnum')
    def enumSvc;
    
    @Service('BPApplicationService')
    def svc;

    def mode = 'view';
    def application;
    def organizations;
    def barangays;
    def officetypes;
    
    void init(){
        def res = enumSvc.getTypes(['organizations', 'officeTypes']);
        organizations = res.organizations;
        officetypes = res.officeTypes;
        barangays = enumSvc.barangays;
        mode = 'new';
    }
    
    void initView(){
        def res = enumSvc.getTypes(['organizations', 'officeTypes']);
        organizations = res.organizations;
        officetypes = res.officeTypes;
        barangays = enumSvc.barangays;
        mode = 'view';
    }
    
    def lob;
    
    def allowedDelete( def lob ){
        if( mode != 'VIEW' ){
            if( lob.assessmenttype == 'NEW' ) return true;
            if( lob.assessmenttype == 'RENEW' && application.txntype == 'CAPTURE' ) return true;
            if( application.txntype == 'RETIRE_LINE' ) return true;
        }
        return false;
    }
    
    def onselecttype = { lob.assessmenttype = it.name; }
    def typeList = {
        def list = [];
        if( lob?.assessmenttype == 'NEW' ) list.add( 'NEW' );
        if( lob?.assessmenttype == 'RENEW' ) list.add( 'RETIRE' );
        if( lob?.assessmenttype == 'RETIRE' ) list.add( 'RENEW' );
        return list;
    }
    
    def isTypeEditable = {
        if( application.txntype == 'RETIRE' ) return false;
        if( mode == 'view' ) return false;
        return true;
    }
    def lookupType = InvokerUtil.lookupOpener('bp:assessmenttype', [items:typeList, onselect:onselecttype] );
    def lobHandler = [
        getRows    : { return 5; },
        getColumns : {
            return [
                new Column(name:"name", caption:"Classification"),
                new Column(name:"assessmenttype", caption:"Assessment Type", type:'lookup', handler:lookupType, editable:isTypeEditable()),
                new Column(name:"iyear", caption:"Year")
            ];
        },
        
        onRemoveItem : {
            if( allowedDelete( it ) ) {
                application.info.lobs.remove( it );
            }
        },
        
        fetchList : { return application.info.lobs; },
    ] as SubListModel;
    
    def onselect = { selected ->
        if(selected){
            def o = application.info.lobs.find{ it.lobid == selected.objid };
            if( o ) throw new Exception("LOB '$selected.name' is already in application list.");
            def l = [lobid:selected.objid, name:selected.name, assessmenttype:'NEW'];
            if( application.txnmode == 'CAPTURE' && application.txntype == 'RENEW' ) l.assessmenttype = 'RENEW';
            application.info.lobs.add( l );
            lobSearch = '';
            
            binding.refresh();
        }
    }
    
    def lobSearch;
    def lookupLob = InvokerUtil.lookupOpener('lob.lookup', [onselect:onselect]);
    
    def cancel() {
        if( mode != 'edit' ) return '_close';
        application.putAll( old );
        binding.refresh();
        mode = 'view';
        return null;
    }

    def old = [:];
    
    void edit(){
        old.putAll( application );
        mode = 'edit';
    }
    
    void save(){
        application = svc.save( application );
        mode = 'view';
        binding.refresh();
    }
    
    def submit(){
       application = svc.submitForAssessment( application.objid );
       return InvokerUtil.lookupOpener('bp:assessment',[application:application]);
    }
}

]]>
    </code>
    <pages>
        <page template="etracs2.bp.application.ApplicationMainPage"/>
    </pages>
</workunit>