import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class BPbpscripts {
	
	@PersistenceContext('main')
	def em;
	
	// Method/Script to update fullypaid column into 1 
	//if the taxpayer is fullypaid for the said business
	@ProxyMethod
	public def updateFullyPaid(){
		def sql = """
			SELECT businessid, receivables FROM bpapplication
		"""
		
		def bpapplication = em.sqlContext.createQuery( sql ).resultList
	
		bpapplication.each(){ bpapps ->
			bpapps.receivables = em.serializer.read( bpapps.receivables )
			def unpaidRcvbls = bpapps.receivables.findAll{ it.amount > it.amtpaid }
			if( !unpaidRcvbls ) {
				
				//em.update( 'bplisting:bplisting', bpapps )
				em.sqlContext.createNamedExecutor( "bpscripts:updateAppFullypaid" ).
					setParameter( 'businessid', bpapps.businessid ).execute()
			} 
		}
	}
	
	
	// Method/Script to update docstate column into 'PERMIT_PENDING'
	//if the taxpayer is quarterly/yearly paid for the said business
	@ProxyMethod
	public def updateDocState(){
		def sql = """
			SELECT 
				objid, docstate, receivables  
			FROM bpapplication 
			WHERE docstate = 'APPROVED'		
		"""
		
		def bpapplication = em.sqlContext.createQuery( sql ).resultList
		if( bpapplication ){
			bpapplication.each(){ apps ->
				apps.receivables = em.serializer.read( apps.receivables )
				def receivables = apps.receivables.findAll{ it.iqtr == 1 && it.amount > it.amtpaid }
				if( !receivables ){
				
					em.sqlContext.createNamedExecutor( "bpscripts:updateStateApps" )
						.setParameter( 'objid', apps.objid ).execute()
						
					em.sqlContext.createNamedExecutor( "bpscripts:updateStateAppListing" )
						.setParameter( 'objid', apps.objid ).execute()
				}			
			}
		}
	}
	
	
	// Method/Script to copy ctcno from bpapplication to bpapplicationlisting table
	@ProxyMethod
	public def copyCTCNoToBPAppListing(){
		def sql = """
			SELECT 
				list.objid, list.ctcno, list.businessid, 
				apps.businessid, apps.info 
			FROM bpapplicationlisting LIST  
			INNER JOIN bpapplication apps ON apps.businessid = list.businessid 
			WHERE ctcno IS NULL 		
		"""
		def applications = em.sqlContext.createQuery( sql ).resultList
				
		applications.each(){ apps ->
			apps.info =  em.serializer.read( apps.info )
			def application = [
				objid: apps.objid,
				ctcno: apps.info.ctcno
			]
		
			em.update( 'bplisting:bpapplicationlisting', application )
		}
	}
	
	
	//Method to paid all receivables 
	//for a particular application by tradename
	@ProxyMethod
	public def doPaidApplication( def tradename ){
		def application = em.sqlContext.createNamedQuery('bpscripts:getreceivables').setParameter( 'tradename', tradename ).singleResult
		if( !application ) {
			return "Tradename: doesn't exist. "
		}
		
		application.receivables = em.serializer.read( application.receivables ).each(){
			it.amtpaid = it.amount
		}
		application.receivables = em.serializer.write( application.receivables )
		
		em.sqlContext.createNamedExecutor("bpscripts:updatereceivables")
			.setParameters( application ).execute()
		
		return "Trade Name: $tradename successfully paid"
	}
	
	
	
}
