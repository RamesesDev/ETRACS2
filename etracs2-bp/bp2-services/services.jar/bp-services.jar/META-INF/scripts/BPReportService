import com.rameses.common.*
import com.rameses.annotations.*

public class BPReportService
{
	@PersistenceContext('main')
	def em 
	
	@Service('NumberService')
	def numSvc
	
	@ProxyMethod
	public List getTaxpayerMasterList( year ) {
		def list = em.sqlContext.createNamedQuery('bpreport:getTaxpayerMasterList').setParameter('iyear', year ).resultList 
		list.each { 
			it.capital = (it.capital ? numSvc.round( it.capital ) : 0.0 )
			it.gross = (it.gross?  numSvc.round( it.gross ) : 0.0 )
		}
		return list 
	}
	
	@ProxyMethod
	public List getApplicationListing( barangay, year, docstate ) {
		docstate 	= ( docstate ? docstate : '%' )
		barangay    = ( barangay ? barangay : '%' )
		def params 	= [ barangay:barangay, iyear:year, docstate:docstate ]
		return em.sqlContext.createNamedQuery('bpreport:getApplicationListing').setParameters( params ).resultList 
	}
	
	@ProxyMethod
	public List getApplicationLOBListing( barangay, classification, year, docstate ) {
		docstate 	= ( docstate ? docstate : '%' )
		barangay    = ( barangay ? barangay : '%' )
		classification = ( classification ? classification : '%' )
		def params 	= [ barangay:barangay, iyear:year, docstate:docstate, classification:classification ]
		return em.sqlContext.createNamedQuery('bpreport:getApplicationLOBListing').setParameters( params ).resultList 
	}
	
	@ProxyMethod
	public List getLOBCountListing( barangay, year, docstate ) {
		docstate 	= ( docstate ? docstate : '%' )
		barangay    = ( barangay ? barangay : '%' )
		def params 	= [ barangay:barangay, iyear:year, docstate:docstate ]
		return em.sqlContext.createNamedQuery('bpreport:getApplicationLOBListing').setParameters( params ).resultList 
	}
	
}