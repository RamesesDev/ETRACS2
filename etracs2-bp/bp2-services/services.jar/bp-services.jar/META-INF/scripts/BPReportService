import com.rameses.common.*
import com.rameses.annotations.*

public class BPReportService
{
	@PersistenceContext('main')
	def em 
	
	@Service('NumberService')
	def numSvc
	
	@Service('DateService')
	def dateSvc
	
	@Service('BPBillingService') 
	def billingSvc 
	
	@Service('Var')
	def var 
	
	
	
	@ProxyMethod
	public List getTaxpayerMasterList( year ) {
		required( 'Year', year )
		validateYear( year )
		def list = em.sqlContext.createNamedQuery('bpreport:getTaxpayerMasterList')
					.setParameter('iyear', year )
					.resultList
					.each { 
						it.capital = (it.capital ? numSvc.round( it.capital ) : 0.0 )
						it.gross = (it.gross?  numSvc.round( it.gross ) : 0.0 )
					}
		if( ! list ) throw new Exception('No records found.')
		return list 
	}
	
	@ProxyMethod
	public List getApplicationListing( year, docstate, barangayid, classificationid, lobid  ) {
		def params 	= [ 
			iyear				: year, 
			docstate			: ( docstate ? docstate : '%' ),
			barangayid			: ( barangayid ? barangayid : '%' ),
			classificationid	: ( classificationid ? classificationid : '%' ),
			lobid 				: ( lobid  ? lobid : '%' ),
		] 
		def list = em.sqlContext.createNamedQuery('bpreport:getApplicationListing')
					.setParameters( params )
					.resultList 
					.each {
						it.capital = (it.capital ? numSvc.round( it.capital ) : 0.0 )
						it.gross = (it.gross?  numSvc.round( it.gross ) : 0.0 )					
					}
		if( ! list ) throw new Exception('No records found.')
		return list 		
	}
	
	@ProxyMethod
	public List getLOBCountListing( barangayid, year, docstate, classification ) {
		def params 	= [ 
			iyear			: year,
			docstate		: ( docstate ? docstate : '%' ),
			barangayid		: ( barangayid ? barangayid : '%' ),
			classification	: ( classification ? classification : '%' )			
		]
		
		def list = em.sqlContext.createNamedQuery('bpreport:getLOBCountListing').setParameters( params ).resultList 
		if( ! list ) throw new Exception('No records found.')
		return list 		
	}
	
	@ProxyMethod
	public List getBusinessTaxpayerList( barangayid ) {
		barangayid = (barangayid ? barangayid : '%' )
		return em.sqlContext.createNamedQuery('bpreport:getBusinessTaxpayerList')
						.setParameter('barangayid', barangayid )
						.resultList
	}
	
	@ProxyMethod
	public def buildDelinquency( billing ) {
		try {
			billing = billingSvc.getBilling( billing )
			def delinquencylist = []
			billing.items.each{ item -> 
				delinquencylist.add([
					appno			: item.appno,
					txntype			: item.txntype,
					txndate			: item.txndate, 
					taxpayername 	: billing.info.taxpayername,
					taxpayeraddress : billing.info.taxpayeraddress,
					tradename		: item.tradename,
					businessaddress	: item.address,
					amount			: item.totalamount,
					surcharge		: item.totalsurcharge ,
					interest		: item.totalinterest,
					total			: item.grandtotal
				])
			}
			return delinquencylist
		}
		catch( e) {
			return []
		}
	}
	
	@ProxyMethod
	public def generateTopBusinessList( entity ){
		def VAR_CAPITAL = 'CAPITAL' 
		def VAR_GROSS = 'GROSS' 
		
		if( var.varname_capital ) VAR_CAPITAL = var.varname_capital
		if( var.varname_gross ) VAR_GROSS = var.varname_gross 
		
		entity.classification = entity.classification?.classification
		def param = [ classification:entity.classification, txntype:entity.txntype, topsize:entity.topsize]
		def reportdata = [:]
		reportdata.title = buildTitle( param )
		reportdata.items = []

		em.sqlContext.createNamedQuery('bpreport:getBusinessTopList')
			.setParameters([
				  txntype:entity.txntype, topsize:entity.topsize, year:entity.year,
				  classification:( entity.classification ? entity.classification : '%' ),
				  varname:( entity.txntype == 'NEW' ? VAR_CAPITAL : VAR_GROSS)
			]).resultList.each{ 
			
			reportdata.items += em.sqlContext.createNamedQuery('bpreport:getBusinessTopListGroupByAmount')
				.setParameters([
					txntype:entity.txntype, amount:it.amount, year:entity.year,
					classification:( entity.classification ? entity.classification : '%' ),
					varname:( entity.txntype == 'NEW' ? VAR_CAPITAL : VAR_GROSS)
				]).resultList	
		} 
		
		reportdata.total = reportdata.items.amount.sum()
		def ctr = 0
		def prvamt = -1
		reportdata.items.each{
			if( it.amount != prvamt ){
				prvamt = it.amount
				it.rankno = ++ctr
			}
			else{
				it.rankno = null
			}
		}
		
		if( !reportdata.items ) throw new Exception('No records found.')
		
		return reportdata
	}
	
	@ProxyMethod
	public def getComparativeList( param ){
		def reportdata = [:]
		checkComparativeYearRange( param )
		reportdata.type = param.type
		reportdata.title = "Comparative Report on $param.varname Investment by Classification".toString()
		param.sql_stmt = param.type.equals('ANNUALLY') ? 'getAnnually' : 'getQuarterly'
		reportdata.items = getComparativeResult( param )
		if( !reportdata.items ) throw new Exception( 'No Records found' )
		
		return reportdata
	} 
	
	@ProxyMethod
	public def getComparativeAssessmentList( def param ){
		def reportdata = [:]
		checkComparativeYearRange( param )
		reportdata.type = param.type
		reportdata.title = "Comparative Report on Assessment by Classification".toString()
		param.sql_stmt = param.type.equals('ANNUALLY') ? 'getAssessmentAnnually' : 'getAssessmentQuarterly'
		reportdata.items = getComparativeResult( param )
		if( !reportdata.items ) throw new Exception( 'No Records found' )
		
		return reportdata
	} 
	
	private void checkComparativeYearRange( def param ){
		if( param.yearfrom >= param.yearto ) 
			throw new Exception( 'Year From field should be earlier than the Year To field.' )
		else if( (param.yearto - param.yearfrom) > 1 ) 
			throw new Exception( 'Year comparative range should not be greater than one.' )
	}
	
	private def getComparativeResult( def param ){
		def result = em.sqlContext.createNamedQuery( 'bpreport:' + param.sql_stmt ).setParameters( param ).resultList
		
		return getAmtPercentage( result )  
	}
	
	private def getAmtPercentage( def data ){
		return data.each{
			if( it.amountto == 0.0 && it.amountfrom == 0.0 ){
				it.increaserate = 0 as double
				it.percenttage = it.increaserate + '%'
			}
			else if( it.amountto == 0.0 ){
				it.increaserate = -100 as double
				it.percenttage = it.increaserate + '%'
			}				
			else{
				it.increaserate = (( it.amountto - it.amountfrom ) / it.amountto * 100) as double
				it.percenttage =  numSvc.format('0.00', it.increaserate) + '%'
			}
			
		}
	
	}
	
	@ProxyMethod
	public def buildQtr( def qtr ){
		if( !qtr ) return
		else if( qtr.value == 1 )
            return '1st QTR'
        else if( qtr.value == 2 ) 
            return '2nd QTR'
        else if( qtr.value == 3 ) 
            return '3nd QTR'
        else return '4th QTR'
	}
	
	private def buildTitle( def param ){
		def	titleprefix = ( param.txntype.equals('NEW') ? "NEW $param.classification" : "RENEWED $param.classification" )
		if( !param.classification )
			titleprefix = ( param.txntype.equals('NEW')  ? 'NEW BUSINESSES' : 'BUSINESS RENEWALS' )
		
		return "TOP $param.topsize " + titleprefix
	}
	
	@ProxyMethod
	public List getBarangayList() {
		return em.sqlContext.createNamedQuery('bpreport:getBarangayList').resultList 
	}
	
	@ProxyMethod
	public List getClassificationList() {
		return em.sqlContext.createNamedQuery('bpreport:getClassificationList').resultList 
	}
	
	void required( caption, value ) {
		if( ! value ) throw new Exception(caption + ' is required.')
	}
	
	void validateYear( year ) {
		def curryear = dateSvc.serverYear
		if( year > curryear ) throw new Exception('Year must not exceed ' + curryear + '.')
		
	}
	
}