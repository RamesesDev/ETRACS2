import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class BPApplicationService{
	
	@Service('DateService')
	def dateService;
	
	@Service('BPRuleService')
	def ruleSvc;
	
	def SCHEMANAME = 'bpapplication:bpapplication';
	def SCHEMAVERSION = '1.0';
	
	@Service('SequenceService')
	def sequenceSvc;
	
	@PersistenceContext('main')
	def em;

	private def format( def date, def format ){
		def sdf = new java.text.SimpleDateFormat( format );
		if( date instanceof Date ) return sdf.format( date );
		return sdf.parse( date );
	}
	
	@ProxyMethod
	public def save( def application ){
		if( application.txndate ){
			def txndate = format( application.txndate, 'yyyy-MM-dd');
			application.iyear = format( txndate, 'yyyy' );
			if( application.info.lobs ){
				application.info.lobs.each{ it.iyear = application.iyear; }
			}
		}
		
		if( !application.objid ) return createBPApp( application );
		else return update( application );
	}
	
	@ProxyMethod
	public def createBPApp( def application ){
		application.objid = 'BP'+new UID();
		application.schemaname = SCHEMANAME;
		application.schemaversion = SCHEMAVERSION;
		application.tradename = application.info.tradename;
		application.businessaddress = application.info.businessaddress;
		application.txnno = getNextSeries();
		
		em.validate( SCHEMANAME, application );
		em.create( SCHEMANAME, application );
		return application;
	}
	
	private void insertForlateRenewal( def application ){
		if( application.businessid ){
			def currentyear = Integer.parse( format( dateService.serverDate, 'yyyy' ) );
			def prevyear = currentyear - 1;
			
			def oldapp = em.createNamedQuery( 'bpapplication.getApplicationByBusinessId' )
						   .setParameters([objid:application.businessid])
						   .singleResult;

			if( oldapp.iyear < prevyear ){
				for( int i=oldapp.iyear; i <= prevyear; i++){
					def app = createMapCopy( oldapp );
					app.txxno = application.txnno + '-' + i;
					app.iyear = i;
					app.taxfees = [];
				}
			}
		}
	}
	
	private def createMapCopy( def obj ){
		if( obj instanceof Map ){
			def copy = [:];
			obj.each{ k, v -> copy.put( k, createMapCopy( v ) ); }
			return copy;
		}
		
		if( obj instanceof List ){
			def copy = [];
			obj.each{ copy.add( createMapCopy( it ) ); }
		}
		
		return obj;
	}
	
	@ProxyMethod
	public def update( def application ){
		em.validate( SCHEMANAME, application );
		em.update( SCHEMANAME, application );
		return application;
	}
	
	private def getNextSeries(){
		def year = new java.text.SimpleDateFormat('yyyy').format( new Date() );
		def prefix = 'BP-'+year;
		return prefix + sequenceSvc.getNextFormattedSeriesA( 'BP'+year, 5 );
	}
	
	@ProxyMethod
	public def open( def objid ){
		def application = em.read( SCHEMANAME, [objid: objid] );
		if( !application ) throw new Exception("Application document no longer exist.");
		return application;
	}
	
	@ProxyMethod
	public def getList(def searchText, def param){
		return em.sqlContext.createNamedQuery('bpapplication:getList')
				 .resultList;
	}
	
	@ProxyMethod
	public def evaluateTxnType(def application){
		if( application.txntype == 'NEW' || application.txnmode == 'CAPTURE' ) return [application];
		def res = em.sqlContext.createNamedQuery("bpapplication:getBusinessFor"+application.txntype)
				    .setParameters([taxpayerid: application.taxpayerid])
				    .resultList.eac{  
						it.lobs = em.serializer.read( it.info ).lobs; 
					};
		if( !res ) throw new Exception("There is no business to process this transaction.");
		return res;
	}
	
	@ProxyMethod
	public def submitForAssessment( def applicationid ) {
		def app = open( applicationid );
		if( app.docstate != 'DRAFT' ) throw new Exception("Only DRAFT application can be submit for assessment.");
		
		evaluateApplicationInfo( app );
		
		app.docstate = 'FOR_ASSESSMENT';
		em.update( SCHEMANAME, app );
		return app;
	}
	
	public void evaluateApplicationInfo( def application ){
		def app =  createAppEntity( application );
		app = ruleSvc.buildInfos( app );
		application.info.appinfos = app.infos;
	}
	
	@ProxyMethod
	public def assess( def application ){
		def app = open( application.objid );
		evaluateAssessment( app );
		em.update( SCHEMANAME, app );
		return app;
	}
	
	private void evaluateAssessment( def application ){
		def app = createAppEntity( application );
		app.infos = application.infos.appinfos;
		app = ruleSvc.buildTaxFees( app );
		application.info.taxfees = app.taxfees;
	}
	
	private def createAppEntity( def application ){
		def app = [
			organization: application.info.organization,
			applicationtype: application.txntype,
			officetype: application.officetype,
			barangayid: application.info.barangay.barangayid,
			lobs : [],
			taxfees: [],
			infos: []
		];
		
		application.info.lobs.each{
			app.lobs.add( [ lob: [classificationid: it.classificationid, objid: it.lobid, name: it.name],
				assessmenttype: it.assessmenttype
			]);
		}
		
		return app;
	}
	
	@ProxyMethod
	public def approve( def applicationid ) {
		def app = open( applicationid );
		if( app.docstate != 'FOR_ASSESSMENT' ) throw new Exception('ONLY FOR_ASSESSMENT document can be approved.');
		app.docstate = 'APPROVED';
		/** add code here for approving application */
		
		em.update( SCHEMANAME, app );
		return app;
	}
	
	@ProxyMethod
	public List getApplicationTypes() {
		return ['NEW', 'RENEW', 'RETIRE', 'ADDLOB', 'RETIRELOB', 'UPDATENEW']
	}
	
	@ProxyMethod
	public List getOrganizationTypes() {
		return ['SINGLEPROPRIETORSHIP','PARTNERSHIP','CORPORATION','COOPERATIVE','ASSOCIATION','ESTATE','INCORPORATED']
	}
	
	@ProxyMethod
	public List getOfficeTypes() {
		return ['MAIN','BRANCH']
	}
	
	@ProxyMethod
	public def getApplicationList( def applicationid ){
		def app = open( applicationid );
		def applist = [];
		applist.add( evaluateApplication( app ) );
		
		em.sqlContext.createNamedQuery( 'bpapplication:getApplicationByParentId' )
		  .setParameters( [parentid: app.objid] )
		  .resultList.each{ 
			it.info = em.serializer.read( it.info );
			applist.add( evaluateApplication( it ) ) ;
		};
		
		return applist;
	}
	
	private def evaluateApplication( def application ){
		def app = [:];
		app.objid = application.objid;
		app.txnno = application.txnno;
		app.iyear = application.iyear;
		app.txntype = application.txntype;
		app.infos = application.info.appinfos;
		app.taxfees = application.info.taxfees;
		app.assessedvalue = 0.0;
		app.amountdue = 0.0;
		
		app.taxfees.each{
			app.assessedvalue += it.assessedvalue;
			app.amountdue += it.amountdue;
		}
		
		return app;
	}
	
	@ProxyMethod
	public void evaluateTaxesAndFees( def parentid, def list ){
		list.each{ it ->
			def application = open( it.objid );
			def app = createAppEntity( application );
			
			app.infos.clear();
			app.infos.taxfees.clear();
			
			app.infos = it.infos;
			app.taxfees = [];
			
			checkValueType( app.infos );
			
			def res = ruleSvc.buildTaxFees( app );
			
			application.info.appinfos = app.infos;
			application.info.taxfees = app.taxfees;
			
			if( parentid == it.objid ){
				if( application.docstate == 'FOR_ASSESSMENT' ) 
					application.docstate = 'FOR_REVIEW';
			}
			
			update( application );
		}
	}
	
	def checkValueType( def infos ){
		infos.each{
			if( it.vartype == 'integer' ) { 
				try{ it.value = Integer.parseInt( it.value ); }catch(e){ throw new Exception( it.varname + ' value must be integer.' ) }
			}
			
			if( it.vartype == 'decimal' ) { 
				try{ it.value = Double.parseDouble( it.value ); }catch(e){ throw new Exception( it.varname + ' value must be decimal.' ) }
			}
		}
	}
	
	@ProxyMethod
	public List getAccountSummaryTypes() {
		return [
			[ objid:'BUSINESS_TAX', name:'TOTAL_BUSINESS_TAX' ],
			[ objid:'REG_FEE', name:'TOTAL_REGULATORY_FEE' ],
			[ objid:'OTHER_FEE', name:'TOTAL_OTHER_FEE' ],
		]
	}
	
	@ProxyMethod
	public def disapproveApplication( def applicationid ){
		def app = open( applicationid );
		app.docstate = 'FOR_REVIEW';
		em.update( SCHEMANAME, app ) ;
		return app;
	}
	
	@ProxyMethod
	public def submitForReview( def appid, def applist ){
		applist.each{
			def app = open( it.objid );
			app.info.taxfees = it.taxfees;
			if( app.objid == appid ) app.docstate = 'FOR_APPROVAL';
			em.update(  SCHEMANAME, app );
		}
		return open( appid );
	}
	
	@ProxyMethod
	public def cancelApplicationForAssessement( def appid ){
		def app = open( appid );
		em.sqlContext.createNamedExecutor('bpapplication:deleteReferenceApplication')
		  .setParameters([parentid: appid])
		  .execute();
		
		app.docstate = 'DRAFT';
		app.info.appinfos = [];
		app.info.taxfees = [];
		
		em.update( SCHEMANAME, app );
		return app;
	}
	
	@ProxyMethod
	public def approveApplication( def appid, def applist ){
		throw new Exception("Approve not yer implemented.");
	}
	
}
