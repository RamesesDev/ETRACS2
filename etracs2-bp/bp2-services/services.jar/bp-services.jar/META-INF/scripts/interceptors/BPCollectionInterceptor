import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class BPCollectionInterceptor {

	@Service("LogService")
	def logService;
	
	@Service("DateService")
	def dateService;
	
	@Service('BPLedgerService')
	def ledgerSvc;
	
	@Service("BPBillingService")
	def billingSvc;
	
	@PersistenceContext('main')
	def em;
		
	@Before(pattern="ReceiptService.create")
	public void beforeCreate( evt ){
		//println evt.args[0];
	}
	
	@After(pattern="ReceiptService.create") 
	public void afterCreate( evt ) {
		def receipt = evt.result;
		if( receipt?.doctype != 'BUSINESS_TAX' ) return;
		
		def app = em.read('bpapplication:bpapplication', [objid: receipt.applicationid]);
		
		if( app.lastmodified != receipt.applicationlastmodified ) 
			throw new Exception("Unabled to continue.\nThe document has been modified by the other user.");
		
		def payment = [
			 applicationid: app.objid,
			 refid: receipt.objid,
			 reftype: 'ONLINE',
			 refno: receipt.info.serialno,
			 refdate: receipt.info.txndate,
			 year: receipt.year,
			 qtr: receipt.qtr,
			 items: []
		];
		
		receipt.items.each{ r ->
			payment.items << [ bpreceivableid	: r.taxfeeid,
							 amount			: r.amount,
							 surcharge		: r.surcharge,
							 interest		: r.interest,
							 discount		: r.discount ];
		}
		
		ledgerSvc.postPayment( payment );
		updateAppFullypaid( receipt )
		
	}
	
	@After(pattern="ReceiptService.delete") 
	public void interceptDeleteBPReceipt( evt ) {
		def receipt = evt.result;
		if( receipt?.doctype != 'BUSINESS_TAX' ) return;
		
		def app = em.read('bpapplication:bpapplication', [objid: receipt.applicationid]);
		
		if( app.lastmodified != receipt.applicationlastmodified ) 
			throw new Exception("Unabled to continue.\nThe document has been modified by the other user.");
		
		def payment = [
			 applicationid: app.objid,
			 refid: receipt.objid,
			 reftype: 'ONLINE',
			 refno: receipt.info.serialno,
			 refdate: receipt.info.txndate,
			 items: []
		];
		
		receipt.items.each{ r ->
			payment.items << [ bpreceivableid	: r.taxfeeid,
							 amount			: r.amount,
							 surcharge		: r.surcharge,
							 interest		: r.interest,
							 discount		: r.discount ];
		}
		
		ledgerSvc.deletePayment( payment );
	}
	
	@After(pattern="ReceiptService.update") 
	public void interceptUpdateBPReceipt( evt ) {
		def receipt = evt.result;
		if( receipt?.doctype != 'BUSINESS_TAX' ) return;
		
		def app = em.read('bpapplication:bpapplication', [objid: receipt.applicationid]);
		
		if( app.lastmodified != receipt.applicationlastmodified ) 
			throw new Exception("Unabled to continue.\nThe document has been modified by the other user.");
		
		def payment = [
			 applicationid: app.objid,
			 refid: receipt.objid,
			 reftype: 'ONLINE',
			 refno: receipt.info.serialno,
			 refdate: receipt.info.txndate,
			 items: []
		];
		
		receipt.items.each{ r ->
			payment.items << [ bpreceivableid	: r.taxfeeid,
							 amount			: r.amount,
							 surcharge		: r.surcharge,
							 interest		: r.interest,
							 discount		: r.discount ];
		}
		
		ledgerSvc.updatePayment( payment );
	}
	
	@After(pattern="ReceiptService.voidReceipt") 
	public void interceptVoidBPReceipt( evt ) {
		def receipt = evt.result;
		if( receipt?.doctype != 'BUSINESS_TAX' ) return;
		
		def app = em.read('bpapplication:bpapplication', [objid: receipt.applicationid]);
		
		if( app.lastmodified != receipt.applicationlastmodified ) 
			throw new Exception("Unabled to continue.\nThe document has been modified by the other user.");
		
		def payment = [
			 applicationid: app.objid,
			 refid: receipt.objid,
			 reftype: 'ONLINE',
			 refno: receipt.info.serialno,
			 refdate: receipt.info.txndate,
			 items: []
		];
		
		receipt.items.each{ r ->
			payment.items << [ bpreceivableid	: r.taxfeeid,
							 amount			: r.amount,
							 surcharge		: r.surcharge,
							 interest		: r.interest,
							 discount		: r.discount ];
		}
		
		ledgerSvc.deletePayment( payment );
		
	}
	
	public def updateAppFullypaid( receipt ){	
		def app = em.read('bpapplication:bpapplication', [objid: receipt.applicationid]);
		if( !app ) throw new Exception("Application with objid $receipt.applicationid no longer exists.");
		
		def getUnpaidReceivables = app.receivables.findAll{ it.amount > it.amtpaid };
				
		if( !getUnpaidReceivables )
			em.sqlContext.createNamedExecutor( "business:updateAppFullypaid" ).setParameter( 'businessid', receipt.businessid ).execute()
	}
	
}
