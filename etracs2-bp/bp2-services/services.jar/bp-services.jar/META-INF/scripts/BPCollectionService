import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class BPCollectionService{
	
	@Service("BPApplicationReportService")
	def appSvc;
	
	@Service("BPBillingService")
	def billingSvc;
	
	@PersistenceContext('main')
	def em;
	
	@Service('DateService')
	def dateService;

	@ProxyMethod
	public def getBill( def entity, year, qtr ){
		entity.year = (year == 0) ? Integer.parseInt(new java.text.SimpleDateFormat("yyyy").format( dateService.serverDate )) : year;
		entity.qtr = (qtr == 0) ? 4 : qtr;
		
		def app = em.read('bpapplication:bpapplication', [objid: entity.applicationid]);
		if( !app ) throw new Exception("Application with objid $entity.applicationid no longer exists.");
		
		def bp = em.read('business:business', [objid: app.businessid]);
		if( !bp ) throw new Exception("Business with objid $app.businessid no longer exists.");

		def bill = [
			ledgerid      : bp.objid,
			yearstarted   : bp.yearstarted,
			lastyearpaid  : bp.lastyearpaid,
			lastqtrpaid   : bp.lastqtrpaid,
			taxfees       : []
		];
		
		def getUnpaidReceivables = { 
			def list = app.receivables.findAll{ it.amount > it.amtpaid };
			if( app.txntype.matches('NEW|ADDLOB') ) return list;
			return list.findAll{ it.qtr <= entity.qtr || ( it.assessmentype.matches('NEW|ADDLOB')) }
		}
		
		def receivables = getUnpaidReceivables();
		
		receivables.each{  
			it.year = it.iyear;
			it.qtr = it.iqtr;
			bill.taxfees << it;
		}
		println "build bill";
		bill = billingSvc.buildBill( bill ); 
		println "done build bill";
		
		if( !bill.taxfees ) throw new Exception("Business is already paid for quarter " + entity.qtr + '.');
		
		entity.businessid = bp.objid;
		entity.tradename = bp.tradename;
		entity.businessaddress = bp.businessaddress;
		
		entity.info.payorname = bp.taxpayername;
		entity.info.payoraddress = bp.taxpayeraddress;
		
		entity.info.paidby = bp.taxpayername;
		entity.info.paidbyaddress = bp.taxpayeraddress;
		entity.info.txndate = dateService.serverDate;
		entity.info.amount = 0.0;
		entity.items = [];
		
		bill.taxfees.each{
			def acct = em.read("incomeacct:incomeacct", [objid: it.acctid]);
			def item = [taxfeeid: it.objid,
 					    iyear: it.year, 
					    iqtr: it.qtr, 
					    lobname: it.lobname,
					    acctid: acct.objid, 
					    acctno: acct.acctno,
					    accttitle: acct.accttitle,
					    fundid: acct.fundid,
					    fundname: acct.fundname,
					    surcharge: (it.surcharge) ? it.surcharge : 0.0,
					    discount: (it.discount) ? it.discount : 0.0,
					    interest: (it.iterest)  ? it.iterest : 0.0,
					    taxamount: it.amount];
			item.amount = item.taxamount + item.surcharge + item.interest - item.discount;
			entity.items << item;
			entity.info.amount += item.amount;
			
		}
		
		entity.items.sort { a, b ->
			def sA = a.iyear+''+a.iqtr;
			def sB = b.iyear+''+b.iqtr;
			return sA<=>sB;
		}
		
		entity.applicationlastmodified = app.lastmodified;
		println app.lastmodified;
    	return entity;
	}

}