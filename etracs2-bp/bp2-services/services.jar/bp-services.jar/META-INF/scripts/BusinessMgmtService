import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class BusinessMgmtService{
	
	@Service('DateService')
	def dateService;
	
	@PersistenceContext('main')
	def em;
	
	private def format( def date, def format ){
		def sdf = new java.text.SimpleDateFormat( format );
		if( date instanceof Date ) return sdf.format( date );
		return sdf.parse( date );
	}

	def getResultList( def list, def qryname, def docstate, def searchText, def param ){
		list.clear();
		def qry = em.sqlContext.createNamedQuery( qryname );
		if( searchText ) 
			qry.setParameter('search', searchText);
		
		qry.setParameter('docstate', docstate);
		qry.setFirstResult( param._start );
		qry.setMaxResults( param._limit );
		list.addAll( qry.resultList );
		return list;
	}
	
	@ProxyMethod
	public def getList( def searchText, def docstate, def param ){
		def list = [];
		if( !searchText )  return getResultList(list, 'bpmgmt:getList', docstate, searchText, param);
		if( getResultList( list, 'bpmgmt:getListByPermitNo', docstate, searchText, param ) ) return list;
		if( getResultList( list, 'bpmgmt:getListByBusinessName', docstate, searchText+'%', param ) ) return list;
		if( getResultList( list, 'bpmgmt:getListByTaxpayerName', docstate, searchText+'%', param ) ) return list;
		if( getResultList( list, 'bpmgmt:getListByBusinessAddress', docstate, searchText+'%', param ) ) return list;
		if( getResultList( list, 'bpmgmt:getListByTaxpayerAddress', docstate, searchText+'%', param ) ) return list;
		return list;
	}
	
	@ProxyMethod
	public def releasePermit( def permit ){
		def bp = em.read( 'bppermit:bppermit', [objid: permit.objid] );
		if( !bp ) throw new Exception('Permit with objid '+ permit.objid +' is no longer exist.');
		
		def app = em.read('bpapplication:bpapplication', [objid: bp.applicationid]);
		if( !bp ) throw new Exception('Application with objid '+ bp.applicationid +' is no longer exist.');
		if( app.docstate != 'PERMIT_PENDING' ) throw new Exception("Only permit pending transaction can be released.");

		bp.plateno = permit.plateno;
		bp.txndate = dateService.serverDate;
		bp.docstate = 'ACTIVE';
		
		println bp.lobs.size();
		
		em.update('bppermit:bppermit', bp);
		
		app.docstate = 'ACTIVE';
		em.update('bpapplication:bpapplication', app);
		
		em.sqlContext.createNamedExecutor('bpapplication:updateApplicationListingForActive')
		  .setParameter('objid', bp.applicationid) 
		  .execute();
		
		return bp;
	}
	
	@ProxyMethod
	public def openPermit( def applicationid ){
		def permit = em.sqlContext.createNamedQuery('bpmgmt:findPermitByApplicationId')
					   .setParameter('applicationid', applicationid)
					   .singleResult;
		if( !permit ) throw new Exception('Permit with an applicationid '+ applicationid +' is no longer exist.');
		permit.lobs = em.serializer.read( permit.lobs );
		permit.txndate = (permit.docstate == 'ACTIVE') ? permit.txndate : null ;
		return permit;
	}
}