import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class RuleService
{
	@PersistenceContext('main')
	def em
	
	@PersistenceContext('sys')
	def sysem 
	
	@Service('LogService')
	def logService
	
	@Service('RuleConditionService')
	def condSvc
	
	@Service('RuleActionService')
	def actionSvc
	
	@Resource('RuleMgmt')
	def ruleMgmt 
	
	def SCHEMA_NAME = 'rule'
	def SCHEMA_VERSION = '1.0'
	def DRAFT_STATE = 'DRAFT'
	def DEPLOYED_STATE = 'DEPLOYED'
	def APPROVED_STATE = 'APPROVED' 
	def RULESET = 'bpassessment' 
	
	@ProxyMethod
	public def getList( searchText, params ) {
		if( ! searchText ) return em.sqlContext.createNamedQuery('rule:getList').resultList
		return em.sqlContext.createNamedQuery('rule:getListByName').setParameter('name', searchText+'%').resultList
	}
	
	@ProxyMethod
	public def open( objid ) {
		return em.read( SCHEMA_NAME, [objid:objid] )
	}
	
	@ProxyMethod
	public def create( rule ) {
		rule.objid = 'R' + new UID()
		rule.schemaname = SCHEMA_NAME
		rule.schemaversion = SCHEMA_VERSION
		rule.rulename = fixRuleName( rule )
		rule.docstate = DRAFT_STATE
		rule.packagename = 'bp.assessment.rules.' + rule.rulename 
		buildRuleText( rule )
		validate( rule )
		em.create( rule.schemaname, rule )
		logService.log( 'CREATE', 'Rule', rule.objid )
		return rule 
	}
	
	@ProxyMethod
	public def update( rule ) {
		buildRuleText( rule )
		validate( rule )
		em.update( rule.schemaname, rule, { diff -> 
			logService.logB('UPDATE', 'Rule', rule.objid, null, diff) 
		} as UpdateChangeHandler)
		return rule
	}
	
	@ProxyMethod
	public void remove( objid ) {
		def rule = open( objid )
		if( ! rule ) return // probably deleted already 
		if( rule.docstate != DRAFT_STATE ) throw new Exception('Only Draft rule can be deleted.')
		em.delete(rule.schemaname, rule)
	}
	
	@ProxyMethod
	public def deploy( objid ) {
		def rule = em.read(SCHEMA_NAME, [objid:objid])
		rule.docstate = DEPLOYED_STATE
		em.update( rule.schemaname, rule )
		deployRulePackage( rule )
		logService.log('DEPLOY', 'Rule', rule.objid)
		return rule 
	}
	
	@ProxyMethod
	public def undeploy( objid ) {
		def rule = em.read(SCHEMA_NAME, [objid:objid])
		rule.docstate = DRAFT_STATE
		em.update( rule.schemaname, rule )
		undeployRulePackage( rule )
		logService.log('UNDEPLOY', 'Rule', rule.objid)
		return rule 
	}
	
	@ProxyMethod
	public List getAgendaGroups() {
		return em.sqlContext.createNamedQuery('rule:getRuleGroups').resultList 
	}
	
	@ProxyMethod
	public def getHtml( objid ){
		def rule = open( objid )
		if( ! rule ) return ''
		
		def conditions = buildHtmlConditions( rule )
		def actions = buildHtmlActions( rule )
		return """
			<html>
				<head></head>
				<body>
					<h1>$rule.rulename</h1>
					$rule.description
					<hr>
					<br>
					<br>
					<h2>Conditions</h2>
					$conditions 
					<br>
					<h2>Actions</h2>
					$actions
				</body>
			</html>
		"""
	}
	
	def buildHtmlConditions( rule ) {
		def conds = ''
		rule.conditions.each {
			conds += it.displaytext + '<br>'
		}
		return conds 
	}
	
	def buildHtmlActions( rule ) {
		def actions = ''
		rule.actions.each {
			actions += it.displaytext + '<br>'
		}
		return actions
	}
	
	void validate( rule ) {
		em.validate(rule.schemaname, rule )
		checkDuplicateRuleName( rule )
	}
	
	def fixRuleName( rule ) {
		return rule.rulename.replaceAll('\\W', '_')
	}
	
	
	void checkDuplicateRuleName( rule ) {
		def data = em.sqlContext.createNamedQuery('rule:checkDuplicateRuleName').setParameters( rule ).singleResult 
		if( data ) throw new Exception('Rule ' + rule.rulename + ' already exists.' )
	}
	
	void buildRuleText( rule ) {
		def conditions = buildConditions( rule )
		def actions = buildActions( rule )
		
		def ruletext = ''
		ruletext += 'package ' + rule.packagename + ';\n'
		ruletext += 'import bp.assessment.facts.*;\n'
		ruletext += 'import java.util.*;\n\n'
		
		ruletext += 'global com.rameses.rules.common.RuleAction actionList\n\n'

		ruletext += 'rule "' + rule.rulename + '"\n'
		ruletext += 'agenda-group "' + rule.agendagroupid + '"\n'
		ruletext += 'salience ' + rule.salience + '\n\n'

		ruletext += 'when\n' 
		ruletext += '$app : ApplicationFact( $appid: appid )\n'
		ruletext += '$lob : LOBFact( $lobid:lobid, $lobname:name, appid == $appid)	\n'
		ruletext += conditions 
		ruletext += 'then\n'
		ruletext += actions 
		ruletext += 'end\n'
		rule.ruletext = ruletext 
	}
	
	def buildConditions( rule ) {
		rule.conditions.each { 
			it.ruletext = condSvc.buildConditionRuleText( it ) 
		}
		def s = rule.conditions.ruletext.join('\n')
		s += '\n'
		s += rule.actions.conditions.ruletext.flatten().join('\n')
		return s
	}	
	
	def buildActions( rule ) {
		rule.actions.each { it.ruletext = actionSvc.buildActionRuleText( rule, it ) }
		return rule.actions.ruletext.join('\n')
	}	
	
	void deployRulePackage( rule ) {
		ruleMgmt.removeRulePackage( RULESET, '', rule.packagename, false )
		ruleMgmt.addRulePackage( RULESET, '', rule.packagename, rule.ruletext, true )
	}
	
	void undeployRulePackage( rule ) {
		ruleMgmt.removeRulePackage( RULESET, '', rule.packagename, false )
	}
}
