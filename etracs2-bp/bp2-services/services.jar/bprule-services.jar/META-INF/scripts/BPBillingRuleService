/*
* @author    : jzamora
* @copyright : Rameses Systems Inc
* @date      : june 20, 2011
*/

import com.rameses.annotations.*;
import com.rameses.common.*
import java.rmi.server.UID

public class BPBillingRuleService
{
	@PersistenceContext('main')
	def em 
	
	@Service('AbstractRuleService')
    def ruleSvc 
	
    @ProxyMethod
    public String getRuleSet() {
       return 'bpbilling' 
    }
    
    @ProxyMethod
	public List getAgendaGroups() {
		return [
			[ objid : 'SURCHARGE', name: 'SURCHARGE' ],
			[ objid : 'INTEREST', name: 'INTEREST' ],
			[ objid : 'DISCOUNT', name: 'DISCOUNT' ],
			[ objid : 'SUMMARY', name: 'SUMMARY' ],
		]
	}
    
    @ProxyMethod
	public List getFacts() {
		return [
			[name:'BPLedgerFact', ruleset:'bpbilling', packagename:'bp.billing.facts'],
			[name:'TaxFeeFact', ruleset:'bpbilling', packagename:'bp.billing.facts'],
			[name:'CurrentYearFact', ruleset:'bpbilling', packagename:'bp.billing.facts'],
		]
	}
    
    @ProxyMethod
	public List getFields( factname) {
		if( factname == 'BPLedgerFact' ) return getBPLedgerFactFields()
		if( factname == 'TaxFeeFact' ) return getTaxFeeFactFields()
		if( factname == 'CurrentYearFact' ) return getCurrentYearFactFields()
		return []
	}
    
    @ProxyMethod
    public String buildRuleText( rule ) {
		def ruleHeader = buildRuleHeader( rule )
		def conditions = buildRuleConditions( rule )
		def actions = buildRuleActions( rule )
		return ruleHeader + conditions + actions + 'end'
	}
    
    
    /*------------------------------------------------------------------
    * Support Methods
    ------------------------------------------------------------------*/
    
    List getBPLedgerFactFields() {
		return [
			[name:'yearstarted', caption:'Year Started', type:'integer' ],
			[name:'lastyearpaid', caption:'Last Year Paid', type:'integer' ],
			[name:'lastqtrpaid', caption:'Last Qtr Paid', type:'integer' ],
		]
	}
	
	List getTaxFeeFactFields() {
		return [
			[name:'lobid', caption:'Line of Business', type:'string' ],
			[name:'year', caption:'Year', type:'integer' ],
			[name:'qtr', caption:'Qtr', type:'integer' ],
			[name:'monthsfromjan', caption:'Months from Jan', type:'integer' ],
			[name:'monthsfromqtr', caption:'Months From Qtr', type:'integer' ],
			[name:'acctid', caption:'Account', type:'string', lookuphandler:'bpbilling_lookup.taxfee' ],
			[name:'amount', caption:'Amount', type:'decimal' ],
			[name:'surcharge', caption:'Surcharge', type:'decimal' ],
			[name:'interest', caption:'Interest', type:'decimal' ],
		]
	}
	
	List getCurrentYearFactFields() {
		return [
			[name:'year', caption:'Year', type:'integer' ],
			[name:'qtr', caption:'Quarter', type:'integer' ],
			[name:'month', caption:'Month', type:'integer' ],
			[name:'day', caption:'Day', type:'integer' ],
		]
	}
    
    
    /*-------------------------------------------------------------
	* BuildRuleText Support
	-------------------------------------------------------------*/
	String buildRuleActions( rule ) {
		String s = 'then\n'
		rule.actions.each { action ->
			if( action.actiontype == 'calcTax' ) s += calculateSurcharge( action )
			if( action.actiontype == 'calcInterest' ) s += calculateInterest( action )
			if( action.actiontype == 'calcDiscount' ) s += calculateDiscount( action )
		}
		return s
	}
	
	String calculateSurcharge( action ) {
		String s = ''
		s += '$TAXFEE.setSurchargeacctid("' + action.acctid + '");\n'
		s += '$TAXFEE.setSurchargeaccttitle("' + action.accttitle + '");\n'
		s += '$TAXFEE.setSurcharge(' + action.expr + ');\n\n'
		s += 'actionList.setContext( drools );\n'
		s += 'actionList.execute("calcSurcharge", $TAXFEE );\n'
		return s 
	}
	
	String calculateInterest( action ) {
		String s = ''
		s += '$TAXFEE.setInterestacctid("' + action.acctid + '");\n'
		s += '$TAXFEE.setInterestaccttitle("' + action.accttitle + '");\n'
		s += '$TAXFEE.setInterest(' + action.expr + ');\n\n'
		s += 'actionList.setContext( drools );\n'
		s += 'actionList.execute("calcInterest", $TAXFEE );\n'
		return s 
	}
	
	String calculateDiscount( action ) {
		String s = ''
		s += '$TAXFEE.setDiscount(' + action.expr + ');\n'
		s += 'actionList.setContext( drools );\n'
		s += 'actionList.execute("calcDiscount", $TAXFEE );\n'
		return s 
	}
	
	String buildRuleConditions( rule ) {
		String s = ''
		rule.conditions.each { cond ->
			if( cond.fact.name == 'BPLedgerFact' ) s += ruleSvc.buildFactCondition( cond, 'ledgerid == $ledgerid' )
			if( cond.fact.name == 'TaxFeeFact' ) s += ruleSvc.buildFactCondition( cond, 'taxfeeid == $taxfeeid, ledgerid == $ledgerid' )
			if( cond.fact.name == 'CurrentYearFact' ) s += ruleSvc.buildFactCondition( cond, null )
		}
		return s 
	}
	
	
	String buildRuleHeader( rule ) {
		String s = ''
		s += 'package ' + rule.packagename + ';\n\n'
		s += 'import etracs2.bp.billing.facts.*\n';
		s += 'import java.util.*\n\n';
		s += 'global com.rameses.rules.common.RuleAction actionList\n\n'
		s += 'rule "' + rule.rulename + '"\n'
		s += 'agenda-group "' + rule.agendagroup + '"\n'
		s += 'no-loop\n'
		s += 'salience ' + rule.salience + '\n\n'
		s += 'when\n'
		s += '$LEDGER : BPLedgerFact( $ledgerid:ledgerid )\n'
		s += '$TAXFEE : TaxFeeFact( $taxfeeid:taxfeeid, ledgerid == $ledgerid )\n'
		return s
	}		
}
