import com.rameses.annotations.*
import com.rameses.common.*

/*
* Periodically reads sys_inbox for messages. When messages are available,
* it dispatches the message by calling MessageService.onreceive
* and move the message from inbox to processedinbox 
*
* Messages bound for other recepients are automatically routed
* and delivered
*/
class InboxTask
{
    @PersistenceContext('main')
    def em 
    
    @Service('MessageService')
    def msgSvc
	
	@Service('Var')
	def var

	def INBOX_SCHEMA = 'message:inbox'
	def OUTBOX_SCHEMA = 'message:outbox'
	def PROCESSEDINBOX_SCHEMA = 'message:processedinbox'
	
	
	@ProxyMethod
	public def processMessage( task ) {
		def msglist = getInboxMessages()
        if( msglist )  {
			msglist.each{ msg -> 
        		try {
					msg = em.read( INBOX_SCHEMA, msg)
					println 'Processing inbox message[' + msg.action + ']'
					msgSvc.onreceive( msg )
					moveMessageToProcessedInbox( msg )
				}
				catch( e ) {
					e.printStackTrace()
					logMessage( msg, e.message )
				}	
			}
        }
		else {
			println 'Inbox is empty...'
		}
		moveOtherDestinationMessagesToOutbox()
        return true
	}
	
	void moveOtherDestinationMessagesToOutbox() {
		def msglist = em.sqlContext.createNamedQuery('message:getOtherDestinationMessages')
							.setParameter('tolguindex', var.lgu_index )
							.resultList
		msglist.each{ id ->
			println 'id -> ' + id 
			def msg = em.read( INBOX_SCHEMA, id)
			em.delete( msg.schemaname, msg )
			msg.schemaname = OUTBOX_SCHEMA
			em.create( msg.schemaname, msg )
		}
	}
	
	void logMessage( msg, errorMsg ) {
        msg.status = [date:new Date(), msg:errorMsg]
        em.update( msg.schemaname, msg )
    }
    
    def getInboxMessages() {
        return em.sqlContext.createNamedQuery('message:getInboxMessageId')
					.setParameter('tolguindex', var.lgu_index )
					.resultList
    }
    		
	void moveMessageToProcessedInbox( msg ) {
		em.create(PROCESSEDINBOX_SCHEMA, msg )
		em.delete(INBOX_SCHEMA, msg )
	}
}