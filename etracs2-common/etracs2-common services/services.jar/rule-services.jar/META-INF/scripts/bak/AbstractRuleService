/*
* @author    : jzamora
* @copyright : Rameses Systems Inc
* @date      : june 20, 2011
*/

import com.rameses.annotations.*;
import com.rameses.common.*
import java.rmi.server.UID

public class AbstractRuleService
{
	@PersistenceContext('main')
	def em 
	
	@Service('LogService')
	def logService
	
	@Resource('RuleMgmt')
	def ruleMgmt 
	
	@Env
	def env
	
	
	def SCHEMA_NAME = 'rule'
	def SCHEMA_VERSION = '1.0'
	def DRAFT_STATE = 'DRAFT'
	def DEPLOYED_STATE = 'DEPLOYED'
	def APPROVED_STATE = 'APPROVED' 
	
    
	@ProxyMethod
	public def getList( ruleset, searchText, params ) {
		if( ! ruleset ) return []
		if( ! params ) params = [_start:0, _limit:50]
		if( ! searchText ) {
			return em.sqlContext.createNamedQuery('rule:list')
					.setParameter('ruleset', ruleset )
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
		}
		return em.sqlContext.createNamedQuery('rule:list-byname')
					.setParameters( [ name: searchText+'%', ruleset: ruleset])
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
    	
	@ProxyMethod
	public Map createRule( opener, packagename, ruleset ) {
		return [
			objid         : null,
			opener        : opener,
            rulename      : null,
			docstate      : 'DRAFT',
            description   : null,
			packagename   : packagename,
			agendagroupid : null,
			agendagroup   : null, 
			effectivefrom : null,
			effectiveto   : null,
			ruletext      : null,
			ruleset       : ruleset, 
            salience      : 50000,
            conditions    : [],
            actions       : [],
			varlist : [],
        ]
	}
    
	@ProxyMethod
	public def create( rule ) {
		rule.objid = 'R' + new UID()
		rule.schemaname = SCHEMA_NAME
		rule.schemaversion = SCHEMA_VERSION
		rule.rulename = fixRuleName( rule )
		rule.docstate = DRAFT_STATE
		rule.packagename = rule.packagename + '.' + rule.rulename 
		rule.author = (env.USERNAME ? env.USERNAME : 'system')
		validate( rule )
		em.create( rule.schemaname, rule )
		logService.log( 'CREATE', rule.ruleset, rule.objid )
		return rule 
	}
	
    @ProxyMethod
	public def open( objid ) {
		return em.read( SCHEMA_NAME, [objid:objid] )
	}
    
	@ProxyMethod
	public def update( rule ) {
		validate( rule )
		em.update( rule.schemaname, rule, { diff -> 
			logService.logB('UPDATE', rule.ruleset, rule.objid, null, diff) 
		} as UpdateChangeHandler)
		return rule
	}
    
    @ProxyMethod
	public void remove( objid ) {
		def rule = open( objid )
		if( ! rule ) return // probably deleted already 
		if( rule.docstate != DRAFT_STATE ) throw new Exception('Only Draft rule can be deleted.')
        undeploy( objid )
		em.delete(rule.schemaname, rule)
	}
	
	
	@ProxyMethod
	public def deploy( objid ) {
		def rule = em.read(SCHEMA_NAME, [objid:objid])
		rule.docstate = DEPLOYED_STATE
		em.update( rule.schemaname, rule )
		deployRulePackage( rule )
		logService.log('DEPLOY', rule.ruleset, rule.objid)
		return rule 
	}
	
	@ProxyMethod
	public def undeploy( objid ) {
		def rule = em.read(SCHEMA_NAME, [objid:objid])
		rule.docstate = DRAFT_STATE
		em.update( rule.schemaname, rule )
		undeployRulePackage( rule )
		logService.log('UNDEPLOY', rule.ruleset, rule.objid)
		return rule 
	}
	
	@ProxyMethod
	public Map createCondition() {
		return [
			fact    : null,
			varname : null, 
			opener : null,
			constraints : [],  //[fieldname:type:fieldvar:operator:usevar:value]
		]
	}
	
	
	@ProxyMethod
	public List getOperators( datatype ) {
		if( datatype == 'integer' || datatype == 'decimal' ) return getNumberOperators()
		if( datatype == 'boolean'  ) return getBooleanOperators()
		if( datatype == 'string' ) return getStringOperators()
		return []
	}
	
    
    @ProxyMethod	
	public String buildFactCondition( cond, additionalConstraint ) {
		String s = ''
		if( cond.factvar ) s += cond.factvar + ':'
		s += cond.fact.name + '('
		s += buildConstraints( cond ) 
		if( additionalConstraint ) s += ', ' + additionalConstraint
		s += ')\n'
		return s 
	}
	
    @ProxyMethod
	public String buildConstraints( cond ) {
		String s = ''
		cond.constraints.each { constraint ->
			if( s.length() > 0 ) s += ', '
			if( constraint.fieldvar ) s += constraint.fieldvar + ':' 
			s += constraint.field.name
			if( constraint.operator ) s += ' ' + constraint.operator.name 
			if( constraint.operator && constraint.operator.name != 'matches' && constraint.value ) s += ' ' + constraint.value 
			else if( constraint.operator && constraint.operator.name == 'matches' && constraint.arrayvalue ) s += ' "' + constraint.arrayvalue.objid.join('|') + '"'
		}
        return s 
	}
	
	
	
    
    /*------------------------------------------------------------------
    * Support Methods
    ------------------------------------------------------------------*/
    
	List getNumberOperators() {
		return [
			[name:'==', caption:'equal'],
			[name:'>', caption:'greater than'],
			[name:'>=', caption:'greater than or equal'],
			[name:'<', caption:'less than'],
			[name:'<=', caption:'less than or equal'],
		]
	
	}
	
	List getBooleanOperators() {
		return [
			[name:'==', caption:'equal'],
			[name:'!=', caption:'not equal'],
		]
	}
	
	List getStringOperators() {
		return [
			[name:'==', caption:'equal'],
			[name:'matches', caption:'matches'],
		]
	}
	
	def fixRuleName( rule ) {
		return rule.rulename.replaceAll('\\W', '_')
	}
	
	void validate( rule ) {
		em.validate(rule.schemaname, rule )
		checkDuplicateRuleName( rule )
	}
	
	void checkDuplicateRuleName( rule ) {
		def data = em.sqlContext.createNamedQuery('rule:checkDuplicateRuleName').setParameters( rule ).singleResult 
		if( data ) throw new Exception('Rule ' + rule.rulename + ' already exists.' )
	}
	
	void deployRulePackage( rule ) {
		try 
		{
			ruleMgmt.removeRulePackage( rule.ruleset, '', rule.packagename, false )
			ruleMgmt.addRulePackage( rule.ruleset, '', rule.packagename, rule.ruletext, true )
		}
		catch(e) {
			println '----- rule text debug --------'
			println "\n${rule.ruletext}"
			println '----- rule text --------'
			
			throw e;
		}
	}
	
	void undeployRulePackage( rule ) {
		ruleMgmt.removeRulePackage( rule.ruleset, '', rule.packagename, true )
	}
	
	
}
