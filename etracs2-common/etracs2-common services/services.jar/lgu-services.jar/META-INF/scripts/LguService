import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class LguService
{
	@PersistenceContext("main")
	def em;
	
	@Service('LogService')
    def logSvc
	
	def SCHEMA_NAME = "lgu"
	def SCHEMA_VERSION = "1.0"
	
    @ProxyMethod
    public List lookupMunicipality( searchText ) {
        searchText = ( searchText ? searchText+'%' : '%' )
        def criteria = [lguname:searchText]
        return getListByQuery('lgu:lookupMunicipality', criteria, null )
    }
    
    
	@ProxyMethod
	public def getParent(){
		def parent =  em.sqlContext.createNamedQuery( 'lgu:getParent' ).singleResult
		if( ! parent ) { 
			parent = [ :]
		}
		parent.munidistricts = getMunicipalityDistricts( parent )
		println parent
		return parent 
	}
	
	@ProxyMethod
	public List getMunicipalityDistricts( parentlgu ) {
		return em.sqlContext.createNamedQuery('lgu:getLgusByParent').setParameter('parentid', parentlgu.objid).resultList
	}
	
	@ProxyMethod 
	public List getLgusByType( lgutype) {
		return em.sqlContext.createNamedQuery('lgu:getLgusByType').setParameter('lgutype', lgutype).resultList
	}
	
	@ProxyMethod 
	public List getLgusByParent( parentid ) {
		return em.sqlContext.createNamedQuery('lgu:getLgusByParent').setParameter('parentid', parentid).resultList
	}
	
	@ProxyMethod
	public def createParentLgu( parentlgu ){
		parentlgu.schemaname = SCHEMA_NAME;
		parentlgu.schemaversion = SCHEMA_VERSION;
		parentlgu.docstate = 'DRAFT';
		
		em.validate( SCHEMA_NAME, parentlgu );
		em.create( SCHEMA_NAME, parentlgu );
		logSvc.log("CREATE", "LGU", parentlgu.objid);	
		return parentlgu;
	}
	
	@ProxyMethod
	public def save( lgu ){
		def old = em.read(SCHEMA_NAME, lgu )
        if( old ) em.update(SCHEMA_NAME, lgu );
        else{ 
        	lgu.schemaname = SCHEMA_NAME;
			lgu.schemaversion = SCHEMA_VERSION;
			lgu.docstate = 'DRAFT';
			
        	em.create( SCHEMA_NAME, lgu );
        }
		
		return lgu;
	}
	
	@ProxyMethod
	public def approve( lgu ){
		lgu.each{
			def item = em.read( SCHEMA_NAME, [objid:it.objid] );
			item.docstate = 'APPROVED';
			em.update( SCHEMA_NAME, item );
		}
		
		def parent = getParent();
		parent.docstate = 'APPROVED';
		em.update( SCHEMA_NAME, parent );
		
		return lgu;
	}
	
	@ProxyMethod
    public def update( lgu ) {
        em.update( SCHEMA_NAME, lgu, { diff ->
            logSvc.logB( 'UPDATE', 'LGU', lgu.objid, '', diff )
        } as UpdateChangeHandler )
        return lgu;
    }
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
	
	@ProxyMethod
	public void removeBarangay( brgy ) {
		em.delete( SCHEMA_NAME, brgy )
	}
	
	@ProxyMethod
	public void removeMuniDistrict( munidistrict ) {
		em.sqlContext.createNamedExecutor('lgu:deleteBarangayByParentId').setParameter('parentid', munidistrict.objid).execute()
		em.delete(SCHEMA_NAME, munidistrict )
	}
    
    @ProxyMethod
	public def openProvince() {
		def province = em.sqlContext.createNamedQuery("lgu:getProvinceId").singleResult;
		if ( !province ) return null;
		return em.read("lgu:province", [objid:province.objid]);
	}
    
    @ProxyMethod
	public def getBarangays() {
        return em.sqlContext.createNamedQuery('lgu:getBarangays').resultList 
	}
}
