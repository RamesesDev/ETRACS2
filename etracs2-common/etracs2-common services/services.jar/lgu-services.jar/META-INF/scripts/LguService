import com.rameses.annotations.*;
import com.rameses.eserver.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class LguService
{
	@PersistenceContext("main")
	def em;
	
	@Service('ETRACSUtilService')
	def util
	
	@Service('LogService')
    def logSvc
	
	def schemaname = "lgu:lgu"
	def schemaversion = "1.0"
	
    @ProxyMethod
    public List lookupMunicipality( searchText ) {
        searchText = ( searchText ? searchText+'%' : '%' )
        def criteria = [lguname:searchText]
        return getListByQuery('lgu:lookupMunicipality', criteria, null )
    }
    
    
	@ProxyMethod
	public def getParent(){
		return em.sqlContext.createNamedQuery( 'lgu:getList' ).singleResult;
	}
	
	@ProxyMethod
	public def getMuniDist( lgutype ){
		def data = [];
		
		if( lgutype != 'CITY' ){
			data = getListByQuery( 'lgu:getMuncipalities', [:], [:] );
			data.each{
				it.barangays = em.serializer.read( it.barangays );	
			}	
		}else{ 
			data = getListByQuery( 'lgu:getDistricts', [:], [:] );
			data.each{
				it.barangays = em.serializer.read( it.barangays );	
			}	
		}
		return data;
	}
	
	
	@ProxyMethod
	public def createParentLgu( parentlgu ){
		parentlgu.schemaname = schemaname;
		parentlgu.schemaversion = schemaversion;
		parentlgu.docstate = 'DRAFT';
		
		em.validate( schemaname, parentlgu );
		em.create( schemaname, parentlgu );
		
		if( parentlgu.selectedlgutype == 'MUNICIPALITY' ){
			def municipality = [
				schemaname		: schemaname,
				schemaversion	: schemaversion,
				docstate		: 'DRAFT',
				indexno			: parentlgu.muniindexno,
				pin 			: parentlgu.indexno + "-" + parentlgu.muniindexno,
				objid 			: parentlgu.indexno + "-" + parentlgu.muniindexno,
				lguname			: parentlgu.munilguname,
				lgutype 		: 'MUNICIPALITY',
				formalname 		: 'MUNICIPALITY OF ' + parentlgu.munilguname,
				parentid 		: parentlgu.objid,
				barangays		: []
			];
			
			em.validate( schemaname, municipality );
			em.create( schemaname, municipality );
		}
		
		return parentlgu;
	}
	
	@ProxyMethod
	public def save( lgu ){
		def old = em.read(schemaname, lgu )
        if( old ) em.update(schemaname, lgu );
        else{ 
        	lgu.schemaname = schemaname;
			lgu.schemaversion = schemaversion;
			lgu.docstate = 'DRAFT';
			
        	em.create( schemaname, lgu );
        }
		
		return lgu;
	}
	
	@ProxyMethod
	public def approve( lgu ){
		lgu.each{
			def item = em.read( schemaname, [objid:it.objid] );
			item.docstate = 'APPROVED';
			em.update( schemaname, item );
		}
		
		def parent = getParent();
		parent.docstate = 'APPROVED';
		em.update( schemaname, parent );
		
		return lgu;
	}
	
	@ProxyMethod
    public def update( lgu ) {
        em.update( schemaname, lgu, { diff ->
            logSvc.logB( 'UPDATE', 'LGU', lgu.objid, '', diff )
        } as UpdateChangeHandler )
        return lgu;
    }
	
	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
    
    @ProxyMethod
	public def openProvince() {
		def province = em.sqlContext.createNamedQuery("lgu:getProvinceId").singleResult;
		if ( !province ) return null;
		return em.read("lgu:province", [objid:province.objid]);
	}
    
    @ProxyMethod
	public def getBarangays() {
        def munis = em.sqlContext.createNamedQuery('lgu:getMuncipalities').resultList 
        
        def brgys = []
        munis.each {
            brgys.addAll( em.serializer.read(it.barangays ) )
        }
		return brgys.collect{ [objid:it.objid, name:it.lguname, toString:it.lguname]}.sort{ a,b -> a.name <=> b.name }
		//println lgu.municipalities.barangays.flatten().collect{[objid:it.objid, name:it.name] }.sort{ a,b -> a.name <=> b.name }
	}
}
