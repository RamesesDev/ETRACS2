import com.rameses.annotations.*;
import com.rameses.common.*
import java.rmi.server.UID;


class EntityMappingService 
{
	@PersistenceContext("main")
	def em;
	
	@Service('LogService')
	def logService
	
	@Service('MessageService')
	def msgSvc
	
	@Service('Var')
	def var 
	
	def SCHEMANAME = 'entityformapping'
	

	@ProxyMethod
	public def getList( textSearch, params ) {	
		if( ! textSearch ) {
			return getListByQueryName( "entitymapping:getList", [:], params );
		}
		def result = [];
		if( (result = getListByQueryName("entity:getListByName", [entityname:textSearch+'%'], params))) return result;
		return result;
	}
	
	@ProxyMethod
	public def open( objid  ) {
		def entity = em.read( SCHEMANAME, [objid:objid] )
		if( ! entity ) throw new Exception('Entity does not exists.')
		return entity 
	}
	
	@ProxyMethod
	public void update( entity ) {
		// get deleted items 
		def old = em.read( SCHEMANAME, entity )
		if( ! old.mappings ) old.mappings = [] 
		if( ! entity.mappings ) entity.mappings = [] 
		
		def deleteditems = old.mappings - entity.mappings 
		
		em.update( SCHEMANAME, entity )
		sendCreateMappingMessage( entity )
		sendDeleteMappingMessage( entity, deleteditems )
		logService.log( 'UPDATE', 'EnttiyForMapping', entity.objid )
	}
	
	void sendDeleteMappingMessage( entity, deleteditems ) {
		if( deleteditems ) {
			def data = [
				parentid:entity.objid, domainid:var.lgu_index, domainname:var.lgu_name, deleteditems:deleteditems 
			]
			msgSvc.send( entity.objid, 'entity.delete_mapping', data )
		}
	}
	
	void sendCreateMappingMessage( entity ) {
		if( entity.mappings ) {
			def data = [
				entity:entity, domainid:var.lgu_index, domainname:var.lgu_name 
			]
			msgSvc.send( entity.objid, 'entity.process_mapping', data )
		}
	}
	
	def getListByQueryName( query, criteria, params ) {
		if( ! params ) {
			params = [_start:0, _limit:50]
		}
		return em.sqlContext.createNamedQuery( query )
					.setParameters( criteria )
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
}
