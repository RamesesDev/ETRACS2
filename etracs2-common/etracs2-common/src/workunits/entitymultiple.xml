<workunit>
    <invokers>
        <invoker folderid="/menu/domain"    action="init"   caption="Multiple Ownership"    target="popup" />        
        <invoker type="entity.multiple"     action="open"   caption="Entity (Multiple)" />        
        <invoker type="entity.type"         action="init"   caption="Multiple"              target="popup" permission="multiple.create" />        
        
        <invoker type="formActions" action="create" shortcut="ctrl N" visibleWhen="#{mode == 'view'}" immediate="true" caption="New" mnemonic="n" icon="images/addnew24.png" target="popup" permission="multiple.create"/>
        <invoker type="formActions" action="edit" shortcut="ctrl E" visibleWhen="#{mode == 'view' and entity.objid != null}" immediate="true" caption="Edit" mnemonic="e" icon="images/edit24.png" permission="multiple.edit"/>
        <invoker type="formActions" action="save" shortcut="ctrl S" visibleWhen="#{mode != 'view'}" caption="Save" mnemonic="s" icon="images/save24.png"/>
        <invoker type="formActions" action="cancel" visibleWhen="#{mode != 'view'}"  immediate="true" caption="Cancel" mnemonic="c" icon="images/cancel24.png"/>
        <invoker type="formActions" action="delete" shortcut="ctrl D" visibleWhen="#{mode == 'view' and entity.objid != null}" immediate="true" caption="Delete" mnemonic="d" icon="images/delete24.png" permission="multiple.delete"/>

    </invokers>
    <code>
<![CDATA[        

import com.rameses.rcp.common.*
import com.rameses.rcp.annotations.*
import com.rameses.osiris2.client.*
import java.rmi.server.UID;

class EntityMultipleController extends etracs2.groovy.AbstractEntityController 
{
    @Service("EntityService")
    def svc
    
    def selectedMember
    def members
    def errorMsg 
    
    void init() {
        members  = []
        super.create()
    }
    
    void open() {
        members = svc.getMemberList( entity.objid )
        members.each {
            it.entity = [ 
                objid           : it.taxpayerid,
                entityname      : it.taxpayername ,
                entityaddress   : it.taxpayeraddress,
            ]
        }
    }
    
    def getService() { return svc }
    def getCreateFocusComponent() { return "entity.name"; }
    def getEditFocusComponent() { return "entity.name"; }
    
    def createEntity() { 
        return [
            entitytype : 'multiple',
            info       : [
                fullname : ''
            ],
        ]
    } 
    
    
    def lookupEntity = InvokerUtil.lookupOpener("entity.lookup",[:]);

    def membersListHandler = [
        getRows    : { return 15; },
        getColumns : {
            return [
                new Column(name:"itemno", caption:"Item No.", maxWidth:70),
                new Column(name:"prefix", caption:"Prefix", editable:true, maxWidth:100),
                new Column(name:"entity", caption:"Taxpayer Name", editable:true, type:"lookup", handler:lookupEntity, expression: '#{entityname}'),
                new Column(name:"suffix", caption:"Suffix", editable:true, maxWidth:100)
            ];
        },
        fetchList : { return members },
        createItem : { return [ objid:'EM'+ new UID() ] },
        onAddItem  : { item -> members.add( item ) },
        validate     : { li -> doValidateEntity( li.item ) },
        onRemoveItem : { item -> doRemoveEntity( item ) },
    ] as SubListModel;
    
    void doValidateEntity( item ) {
        try {
            required(item.entity, 'Taxpayer Name');
            checkDuplicate( item )

            item.entityid       = entity.objid
            item.itemno         = getItemNo();
            item.taxpayerid     = item.entity?.objid;
            item.taxpayername   = item.entity?.entityname;
            item.taxpayeraddress = item.entity?.entityaddress
            updateFullName( item, 'add' );
            svc.saveMember( item )
            clearError()
        }
        catch( e ) {
            e.printStackTrace()
            errorMsg = e.message
            binding.refresh( 'errorMsg' )
            throw e 
        }
        
    }
    
    void checkDuplicate( item ) {
        def data = members.find{ it.objid != item.objid && it.taxpayerid == item.entity.objid }
        if( data ) throw new Exception('Duplicate member is not allowed.')
    }
    
    void doRemoveEntity( item ) {
        if( MsgBox.confirm("Remove selected item?") ) {
            svc.deleteMember( item ) 
            members.remove( item );
            updateFullName( item, 'remove' );
        }
    }
    
    void updateFullName( item, state ) {
        if( state == 'add' ) {
            def prefix = ( item.prefix ? item.prefix : "" ).toString();
            def suffix = ( item.suffix ? item.suffix : "" ).toString();

            if( entity.info.fullname == null || entity.info.fullname == '' ) 
                entity.info.fullname = "$prefix $item.taxpayername $suffix";
            else entity.info.fullname += ", $prefix $item.taxpayername $suffix";
        } else {
            entity.info.fullname = '';
            members.each {
                def prefix = ( it.prefix ? it.prefix : "" ).toString();
                def suffix = ( it.suffix ? it.suffix : "" ).toString();

                if( entity.info.fullname == null || entity.info.fullname == '' ) 
                    entity.info.fullname = "$prefix $it.taxpayername $suffix";
                else entity.info.fullname += ", $prefix $it.taxpayername $suffix";
            }
        }
        binding.refresh('entity.info.fullname');
    }
    
    void copyFullName() {
        entity.entityname = entity.info.fullname;
        binding.refresh('entity.entityname');
    }
    
    def getItemNo() {
        def num;
        
        if( members.size() == 0 ) num = 1;
        else {
            def last = members.last();
            num = last.itemno + 1;
        }
        
        return num;
    }
    
    void required( caption, value ) {
        if( !value ) throw new Exception( caption + ' is required.')
    }
    
    void clearError() {
        errorMsg = null
        binding.refresh( 'errorMsg' )
    }
}        

]]>
    </code>
    <pages>
        <page template="etracs2.entity.MultiplePage"/>
    </pages>
</workunit>