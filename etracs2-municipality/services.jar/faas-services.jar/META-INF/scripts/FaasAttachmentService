import com.rameses.annotations.*;
import com.rameses.io.*;
import com.rameses.eserver.*;
import com.rameses.invoker.client.*;
import java.rmi.server.UID;

class FaasAttachmentService {

	@PersistenceContext("etracs2")
	def em2;
	
	@Service('Var')
	def var;
	
	@ProxyMethod
	public void uploadAttachment( info, data ) {
		try {
		def fis = new FileOutputStream( findFile(var.lgu_name + replaceSpecialChar(info.ftInfo.tempId) + "." + info.ftInfo.fileExt ).absolutePath, true );
		fis.write( data );
		fis.close();
		} catch ( ex ) { ex.printStackTrace(); throw ex; }
	}
	
	@ProxyMethod
	public def downloadAttachment( objid ) {
		try {
		print "DOWNLOADING ATTACHMENTS";
		def file = findFile( objid );
		if ( !file ) throw new Exception("File not found.");
		
		def ftis = new FileTransferInputStream( file );
		ftis.byteSize = 1024 * 32;
		def data = [
			bytes 	: ftis.readNext(),
			eof 	: ftis.fileTransferInfo.eof,
			refId	: objid
		];
		ftis.fileTransferInfo.save();
		
		if (ftis.fileTransferInfo.eof)
			ftis.fileTransferInfo.delete();
			
		ftis.close();
		return data;
		} catch (ex) { ex.printStackTrace(); throw ex; } 
	}
	
	@ProxyMethod
	public def downloadAttachment2( fileName, info ) {
		try {
		def file = findFile( fileName );
		if ( !file ) throw new Exception("File not found.");
		
		def ftis = new FileTransferInputStream( file, info );
		if (!info)
			ftis.fileTransferInfo.tempFileName = replaceSpecialChar( "TMP" +  new UID() );
		ftis.byteSize = 1024 * 32;
		def data = [
			bytes : ftis.readNext()
		];
		ftis.fileTransferInfo.save();
		data.info = ftis.fileTransferInfo;
		
		if (ftis.fileTransferInfo.eof)
			ftis.fileTransferInfo.delete();
			
		ftis.close();
		return data;	
		} catch ( ex ) { ex.printStackTrace(); throw ex; }
	}
	
	private def findFile( fileName ) {
		print "FILE NAME >> " + fileName; 
		def fileDir = new File( var.faas_attachments_temp_dir );
		if ( !fileDir.exists() )
			fileDir.mkdirs();
		fileDir.eachFileMatch( fileName ) { f ->
			return f;
		}
		def file = new File(var.faas_attachments_temp_dir + File.separator + fileName );
		file.createNewFile();
		return file;
	}
	
	@ProxyMethod
	public void createFaasAttachment( info ) {
		em2.create("faasattachment:faasAttachment", [
			objid : var.lgu_name + info.ftInfo.tempId,
			schemaName : 'faasattachment:faasAttachment',
			schemaVersion : 1.0,
			refId : info.refId,
			lguName : var.lgu_name,
			documentType : info.documentType,
			remarks : info.remarks,
			fileName : info.ftInfo.name, 
			fileType : info.ftInfo.fileExt, 
			fileSize : info.ftInfo.size,
			tmpFileName : (replaceSpecialChar( var.lgu_name + info.ftInfo.tempId ) + "." + info.ftInfo.fileExt)
		]);
	}
	
	@ProxyMethod
	public def open( objid ) {
		def attachment = em2.sqlContext.createNamedQuery( "faasattachment:findAttachmentById" ).setParameters( [ objid:objid ] ).singleResult;
		if( !attachment ) throw new Exception( "Attachment not found." );
		return attachment;
	}
	
	@ProxyMethod
	public def getAttachments( refId ) {
		try {
		print "ATTACHMENTS FOR " + refId;
		def params = [ refId : refId ];
		return em2.sqlContext.createNamedQuery( "faasattachment:findAttachmentByRefId" ).setParameters( params ).resultList;
		} catch(ex) { ex.printStackTrace(); } 
	}
	
	@ProxyMethod
	public void remove( attachment ) {
		removeFile( attachment );
		em2.delete( "faasattachment:faasAttachment", attachment );
	}
	
	private void removeFile( attachment ) {
		def file = findFile( attachment.tmpFileName );
		file.delete();
	}
	
	@ProxyMethod
	public void removeAttachment( attachmentId ) {
		remove( open( attachmentId ) );
	}
	
	@ProxyMethod
	public void transmitAttachmentToRemote( objid ) {
		def attachment = open( objid );
		def info = null;
		while ( ! info?.eof ) {
			def data = downloadAttachment2( attachment.tmpFileName, info );
			info = data.info;
			transmitToRemote( "FAASAttachmentService", "uploadAttachment", [ attachment.tmpFileName, data.bytes ] as Object[] );
		}
		
		transmitToRemote( "FAASAttachmentService", "createFaasAttachment", [ attachment ] as Object[] );
	}
	
	private def transmitToRemote( serviceName, methodName, params ) {
		def remote = new DynamicHttpInvoker( var.remoteHost, var.remoteContext, false );
		def svc = remote.create( serviceName );
		return svc.invoke( methodName, params );		
	}
	
	private def replaceSpecialChar( tmpFileName ) {
		tmpFileName = tmpFileName.replace(":", "_");
		return tmpFileName;
	}

}
