import com.rameses.scripting.annotations.*;
import com.rameses.tracs.rpt.service.RPTUtilService;
import java.rmi.server.UID;
import com.rameses.tracs.rpt.domain.*;
import java.text.SimpleDateFormat;

public class TransmittalBldgService
{
	@Resource("defaultPU")
	def em;
	
	@ProxyMethod
	public def buildItem( td , item) {
		item.faas.rpu.rpuType        = "rpubldg:bldg";
		buildBldgInfo( td, item );
		buildBldgUses( td, item );
		buildBldgStructures( td, item ); 
		return item;
	}
	
	private void buildBldgStructures( td, item ) {
		def structs = [];
		td.rpu.bldgRPUStructures.each {
			structs.add([
				objid          : it.objid,
				structureCode  : it.structureCode,
				structureTitle : it.structureTitle,
				materialCode   : it.materialCode,
				materialTitle  : it.materialTitle,
			]);
		}
		item.faas.rpu.info.bldgStructures = structs;
	}
	
	private void buildBldgUses( td, item ) {
		def uses = [];
		td.rpu.bldgUses.each {
			uses.add([	
				objid          : it.objid,
				area           : it.area,
				baseValue      : it.baseValue,
				adjustment     : it.adjustment,
				marketValue    : it.marketValue,
				adjMarketValue : it.adjMarketValue,
				assessLevel    : it.assessLevel,
				assessedValue  : it.assessedValue,
				bldgAssessLevelId  : it.bldgAssessLevelId,
				specialLevel   : it.specialLevel,
				actualUseId    : it.actualUseId,
				actualUseCode  : it.actualUseCode,
				actualUseTitle : it.actualUseTitle,
				bldgFloors     : buildBldgFloors( it.bldgFloors ),
			]);
		}
		item.faas.rpu.info.bldgUses = uses;
	}
	
	private def buildBldgFloors( bldgFloors ) {
		def floors = [];
		bldgFloors.each {
			floors.add( [	
				objid       : it.objid,
				floorNo     : it.floorNo,
				adjustment  : it.adjustment,
				area        : it.area,
				storeyRate  : it.storeyRate,
				baseValue   : it.baseValue,
				unitValue   : it.unitValue,
				marketValue : it.marketValue,
				adjMarketValue : it.adjMarketValue,
				assessedValue  : it.assessedValue,
				assessLevel    : it.assessLevel,
				depreciateCoreAndItemsSeparately : it.depreciateCoreAndItemsSeparately,
				adjustments : buildBldgAdjustments( it.bldgFloorAdditionals ),
			] );
		}
		return floors;
	}
	
	private def buildBldgAdjustments( additionals ) {
		def adjs = [];
		additionals.each {
			adjs.add( [	
				objid  : it.objid,
				unit   : it.unit,
				amount : it.amount,
				bldgAdditionalItemId    : it.bldgAdditionalItemId,
				bldgAdditionalItemCode  : it.bldgAdditionalItemCode,
				bldgAdditionalItemTitle : it.bldgAdditionalItemTitle,
				params : buildParams( it.parameters ),
			] );
		}
		return adjs;
	}
		
	private def buildParams( parameters ) {
		def params = [];
		parameters.each { 
			params.add( [
				objid : it.objid,
				code  : it.parameter.name,
				name  : it.parameter.name,
				value : it.value,
			] );
		}
		return params;
	}
	
	private void buildBldgInfo( td, item )  {
		def rpuInfo = item.faas.rpu.info;
		rpuInfo.psic             = td.rpu.psic;
		rpuInfo.permitNo         = td.rpu.permitNo;
		rpuInfo.permitDate       = td.rpu.permitDate;
		rpuInfo.permitIssuedBy   = td.rpu.permitIssuedBy;
		rpuInfo.title            = td.rpu.title;
		rpuInfo.dtBldgCompleted  = td.rpu.dtBldgCompleted;
		rpuInfo.dtBldgOccupied   = td.rpu.dtBldgOccupied;
		rpuInfo.constructionCost = td.rpu.constructionCost;
		rpuInfo.totalArea        = td.rpu.totalArea;
		rpuInfo.depreciation     = td.rpu.depreciation;
		rpuInfo.totalAdjustment  = td.rpu.totalAdjustment;
		rpuInfo.swornStatement   = td.rpu.swornStatement;
		rpuInfo.swornAmount      = td.rpu.swornAmount;
		rpuInfo.additionalInfo   = td.rpu.additionalInfo;
		rpuInfo.predominant      = td.rpu.predominant;
		rpuInfo.firstFloorBaseValue  = td.rpu.firstFloorBaseValue;
		rpuInfo.bldgAge          = td.rpu.bldgAge;
		rpuInfo.bldgTypeId       = td.rpu.bldgTypeId;
		rpuInfo.bldgTypeCode     = td.rpu.bldgTypeCode;
		rpuInfo.bldgTypeTitle    = td.rpu.bldgTypeTitle;
		rpuInfo.bldgTypeClassificationId = td.rpu.bldgTypeClassificationId;
		rpuInfo.bldgKindId       = td.rpu.bldgKindId;
		rpuInfo.baseValue        = td.rpu.baseValue;
		rpuInfo.bldgKindCode     = td.rpu.bldgKindCode;
		rpuInfo.bldgKindTitle    = td.rpu.bldgKindTitle;
		rpuInfo.bldgBaseValueType  = td.rpu.bldgBaseValueType.toString();
		rpuInfo.bldgAssessLevelId  = td.rpu.bldgAssessLevelId;
		rpuInfo.assessLevel      = td.rpu.assessLevel; 
		rpuInfo.specialLevel     = td.rpu.specialLevel;
		rpuInfo.condominium      = td.rpu.condominium;
		rpuInfo.bldgRpuId        = td.rpu.bldgRpuId;
		rpuInfo.autoComputeBldgDepreciation = td.rpu.autoComputeBldgDepreciation;
		rpuInfo.bldgClass        = td.rpu.bldgClass;
	}
	
}	

