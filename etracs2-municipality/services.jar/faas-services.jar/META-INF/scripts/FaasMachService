import com.rameses.annotations.*
import com.rameses.eserver.*;
import java.text.SimpleDateFormat;

public class FaasMachService
{
	
	@PersistenceContext("etracs")
	def em;
	
	@ProxyMethod
	public def build( faas, rpu ) {
		def mach = em.sqlContext.createNamedQuery( "faas:getMachRpuById" )
						.setParameter( "objid", rpu.objid ).singleResult;
		faas.rpu.rpuType = "rpumach:mach";
		
		faas.rpu.info.machineUses = buildMachUses( mach );
		
		return faas;
	}
	
	private def buildMachUses( mach ) {
		def machUses = em.sqlContext.createNamedQuery( "faas:getMachUseByRpuId" )
						.setParameter( "rpuId", mach.objid ).resultList;
		def uses = [];
		machUses.each { use ->
			uses += [
				objid				: use.objid,
				actualUseId			: use.actualUseId,
				actualUseCode		: use.actualUseCode,
				actualUseTitle		: use.actualUseTitle,
				machAssessLevelId	: use.machAssessLevelId,
				specialLevel		: use.specialLevel as boolean,
				marketValue			: use.marketValue,
				adjMarketValue		: use.adjMarketValue,
				assessLevel			: use.assessLevel,
				assessedValue		: use.assessedValue,
				machineDetails		: buildMachDetails( use )
			];
		}
		
		return uses;
	}
	
	private def buildMachDetails( use ) {
		def machDetails = em.sqlContext.createNamedQuery( "faas:getMachDetailByUseId" )
						.setParameter( "useId", use.objid ).resultList;
		def details = [];
		machDetails.each { detail ->
			details += [
				objid				: detail.objid,
				operationYear		: detail.operationYear,
				replacementCost		: detail.replacementCost,
				depreciation		: detail.depreciation,
				depreciationValue	: detail.depreciationValue,
				marketValue			: detail.marketValue,
				adjMarketValue		: detail.adjMarketValue,
				assessLevel			: detail.assessLevel,
				assessedValue		: detail.assessedValue,
				brand				: detail.brand,
				capacity			: detail.capacity,
				model				: detail.model,
				serialNo			: detail.serialNo,
				status				: detail.status,
				yearAcquired		: detail.yearAcquired,
				estimatedLife		: detail.estimatedLife,
				remainingLife		: detail.remainingLife,
				yearInstalled		: detail.yearInstalled,
				yearsUsed			: detail.yearsUsed,
				originalCost		: detail.originalCost,
				freightCost			: detail.freightCost,
				insuranceCost		: detail.insuranceCost,
				installationCost	: detail.installationCost,
				brokerageCost		: detail.brokerageCost,
				arrastreCost		: detail.arrastreCost,
				otherCost			: detail.otherCost,
				acquisitionCost		: detail.acquisitionCost,
				ferac				: detail.ferac,
				forex				: detail.forex,
				machineId			: detail.machineId,
				machineCode			: detail.machineCode,
				machineTitle		: detail.machineTitle,
				useSwornAmount		: detail.useSwornAmount as boolean,
				swornAmount			: detail.swornAmount,
				imported			: detail.imported as boolean,
				residualRate		: detail.residualRate,
				localIndex			: detail.localIndex,
				newlyInstalled		: detail.newlyInstalled as boolean,
				autoDepreciate		: detail.autoDepreciate as boolean
			];
		}
		
		return details;
	}

}	

