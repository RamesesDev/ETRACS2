import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.invoker.client.*;
import java.text.SimpleDateFormat;

class FaasService
{
	@PersistenceContext("etracs")
	def em;
	
	@PersistenceContext("etracs2")
	def em2;
	
	@Env
	def env;
	
	@Service("Var")
	def vars;
	
	@Service("DateService")
	def dateService;
	
	@Service("FaasLandService")
	def landService;
	
	@Service("FaasBldgService")
	def bldgService;
	
	@Service("FaasMachService")
	def machService;
	
	@Service("FaasTreeService")
	def treeService;
	
	@Service("FaasMiscService")
	def miscService;
	
	@Service("FaasAttachmentService")
	def attachmentService;
	
    
    @ProxyMethod
    public def testRemote( lgu ) {
        def ret = invokeRemoteFaasService("testRemotePost", [lgu] as Object[]);
        return ret;
    }
    
	@ProxyMethod
	public void transmit( objid ) {
		try {
		if( existsFaas(objid) ) throw new Exception("FAAS has already been transmitted.");
		
		def faas = createFaas( objid );
		em2.validate("faas:faas", faas);
		faas.transmitted = true;
		faas.sys_dtCreated = dateService.getServerDate();
		transmitToRemote( faas );
		em2.create("faas:faas", faas);
		em.sqlContext.createNamedExecutor("faas:updateTransmittedTaxDeclaration")
			.setParameter("objid", faas.objid)
			.setParameter("transmittalState", 1)
			.execute();
		} catch (ex) { print "transmit"; ex.printStackTrace(); throw ex; }
	}
	
	private void transmitToRemote( faas ) {
		invokeRemoteService( "FAASService", "create", [faas] as Object[] );
		attachmentService.getAttachments( faas.objid ).each() { it ->
			attachmentService.transmitAttachmentToRemote( it.objid );	
		}
	}
	
	@ProxyMethod
	public def getList( search, params ) {
		if( ! search.textSearch ) return getListByNamed("faas:getProvApprovalList", [], params);
		def result = null;
		if( (result = getListByNamed("faas:findTdByTdNo", [tdNo:search.textSearch], params))) return result;
		if( (result = getListByNamed("faas:findTdByPin", [pin:search.textSearch], params))) return result;
		if( (result = getListByNamed("faas:findTdByTaxpayerName", [taxpayerName:search.textSearch], params))) return result;
		return [];
	}
	
	@ProxyMethod
	public def open( objid ) {
		def faas = em.sqlContext.createNamedQuery("faas:findTdById").setParameters([objid:objid]).singleResult;
		if( ! faas ) throw new Exception("FAAS not found.");
		return faas;
	}
	
	private def invokeRemoteFaasService( methodName, params ) {
		def conf = [
			"host"        : vars.remoteHost,
			"app.context" : vars.remoteContext,
		];
		// name, method, params[], env
		def remote = new DynamicHttpInvoker(vars.remoteHost, vars.remoteContext, false);
		def svc = remote.create("FAASService");
		print "SVC == " + svc; 
		return svc.invoke(methodName, params);
	}
	
	private def invokeRemoteService( serviceName, methodName, params ) {
		try {
		def remote = new DynamicHttpInvoker( vars.remoteHost, vars.remoteContext, false );
		def svc = remote.create( serviceName );
		return svc.invoke( methodName, params );
		} catch (ex) { print "invokeRemoteService"; ex.printStackTrace(); throw ex; }
	}
	
	private def getListByNamed( namedQuery, searchParams, params ) {
		return em.sqlContext.createNamedQuery(namedQuery)
					.setParameters( searchParams )
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList;
	}
	
	@ProxyMethod
	public def createFaas( objid ) {
		def td = em.sqlContext.createNamedQuery("faas:getTdById").setParameter("objid", objid).singleResult;
		def rpu = em.sqlContext.createNamedQuery("faas:getRpuById").setParameter("objid", td.rpuid).singleResult;
		def rp  = em.sqlContext.createNamedQuery("faas:getRealPropertyById").setParameter("objid", rpu.realpropertyid).singleResult;
		def brgy = em.sqlContext.createNamedQuery("faas:getLguById").setParameter("objid", rp.barangayId).singleResult;
		def parentLgu = em.sqlContext.createNamedQuery("faas:getLguById").setParameter("objid", brgy.parentid).singleResult;
		def parentParentLgu = em.sqlContext.createNamedQuery("faas:getLguById").setParameter("objid", parentLgu.objid).singleResult;

		def faas = [
			objid         : td.objid,
			schemaName    : "faas:faas",
			schemaVersion : "1.0",
			transmittalId : "system",
			state    : td.state,
			tdNo 	 : td.tdno,
			barangay : rp.location,
			rpuId    : rpu.objid,
			rpId     : rp.objid,
			info     : buildTdInfo(td),
			rpu      : buildRpuInfo(td, rpu),
			rp       : buildRealPropertyInfo( rp, brgy, parentLgu, parentParentLgu ),
			previousTds : buildPreviousTds( td ),
			transmitted	: ( (td.transmitted == 1) ? true : false)
		];
		if ( rpu.type == "LAND" ) 
			faas = landService.build( faas, rpu );
		else if ( rpu.type == "BLDG" )
			faas = bldgService.build( faas, rpu );
		else if ( rpu.type == "MACH" )
			faas = machService.build( faas, rpu );
		else if ( rpu.type == "TREE" )
			faas = treeService.build( faas, rpu );
		else if ( rpu.type == "MISC" )
			faas = miscService.build( faas, rpu );
		else
			throw new Exception("Invalid Property Type for TD No. $td.tdno");
		
		return faas;
		
	}
	
	private def buildRealPropertyInfo( rp, brgy, parentLgu, parentParentLgu ) {
		return [ 
			 objid         : rp.objid,
			 schemaName    : "rp:rp",
			 schemaVersion : "1.0",
			 state         : rp.state,
			 info       : [
				 txnType      : rp.txnType,
				 dtCreated    : formatDate("yyyy-MM-dd", rp.createDate),
				 provCity     : parentParentLgu?.name,
				 muniDistrict : parentLgu.name,
				 barangay     : brgy.name,
				 pin          : rp.pin,
				 provCityIndex     : rp.provCityIndex,
				 muniDistrictIndex : rp.muniDistrictIndex,
				 brgyIndex         : rp.brgyIndex,
				 sectionNo         : rp.sectionNo,
				 parcelNo          : rp.parcelNo,
				 claimNo           : rp.claimNo,
				 cadastralLotNo    : rp.cadastralLotNo,
				 barangayId        : rp.barangayId,
				 boundary : [north: rp.northBoundary, south: rp.southBoundary, east: rp.eastBoundary, west: rp.westBoundary],
			 ]
		]    
	}
	
	private def buildRpuInfo( td, rpu ) {
		return [ 
			objid         : rpu.objid,
			schemaName    : "rpu:rpu",
			schemaVersion : "1.0",        
			state      : td.state,
			info       : [
				 txnType    : td.txnType,
				 ry         : rpu.ry,
				 type       : rpu.type,
				 pin        : rpu.pin,
				 suffix     : rpu.suffix,
				 special    : rpu.special,
				 taxable    : rpu.taxable as boolean,
				 totalMV    : rpu.totalMV,
				 totalAMV   : rpu.totalAMV,
				 totalAV    : rpu.totalAV,
				 areaSqm    : rpu.areaInSqm,
				 areaHec    : rpu.areaInHec,
				 useSwornAmount : rpu.useSwornAmount,
				 classId        : rpu.classificationId,
				 classCode      : rpu.classCode,
				 classTitle     : rpu.classTitle,
				 exemptId       : rpu.exemptionTypeId,
				 exemptCode     : rpu.exemptCode,
				 exemptTitle    : rpu.exemptTitle,
				 cancelReason   : rpu.cancelReason,
				 cancelDate     : formatDate("yyyy-MM-dd",rpu.dtCancelled),
			],
		];
	}
	
	private def buildTdInfo( td ) {
		return [
			tdNo             : td.tdno,
			txnType          : td.txnType,
			issueDate        : formatDate("yyyy-MM-dd",td.issueDate),
			effectivityYear  : td.effectivityYear,
			effectivityQtr   : td.effectivityQtr,
			title            : (td.titleNo == null ? null : [titleNo: td.titleNo, titleDate: td.titleDate, titleType: td.titleType.name]),
			taxpayer         : [taxpayerId: td.taxpayerId, taxpayerName: td.taxpayerName, taxpayerAddress: td.taxpayerAddress],
			appraisedBy      : [name: td.appraisedBy, title: td.appraisedByPosition, dtSigned: formatDate("yyyy-MM-dd",td.issueDate),],
			recommendedBy    : [name: td.recommendedBy, title: td.recommendedByPosition, dtSigned: formatDate("yyyy-MM-dd",td.issueDate),],                
			approvedBy       : [name: td.approvedBy, title: td.approvedByPosition, dtSigned: formatDate("yyyy-MM-dd",td.issueDate),],        
			previousInfo     : [prevTdNo:td.previousTdNo, prevPin:td.previousPin, prevOwner:td.previousOwner,prevAssessedValue:td.previousAssessedValue, prevMarketValue:td.previousMarketValue ], //previousinfo
		];
	}
	
	private def buildPreviousTds( td ) {
		def prevTds = em.sqlContext.createNamedQuery( "faas:getPreviousTaxDeclarationByParentId" )
						.setParameter( "parentId", td.objid ).resultList;
		def prevFaas = [];
		prevTds.each { prevTd ->
			prevFaas += [
				faasId	: prevTd.taxDeclarationId,
				tdNo	: prevTd.tdNo
			];
		}
		
		return prevFaas;
	}

	private def formatDate( format, dt ) {
		if( ! dt ) return null;
		return (new SimpleDateFormat(format)).format( dt );
	}
	
	private def existsFaas( objid ) {
		def data = em2.sqlContext.createNamedQuery("faas:findById").setParameter("objid", objid ).singleResult;
		if( data ) 
			return true;
		return false;
	}
}

