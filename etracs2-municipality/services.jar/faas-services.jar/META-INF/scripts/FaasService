import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.invoker.client.*;
import java.text.SimpleDateFormat;
import java.rmi.server.UID;

class FaasService
{
	@PersistenceContext("etracs")
	def em;
	
	@PersistenceContext("etracs2")
	def em2;
	
	@Env
	def env;
	
	@Service("Var")
	def vars;
	
	@Service("DateService")
	def dateService;
	
	@Service("FaasLandService")
	def landService;
	
	@Service("FaasBldgService")
	def bldgService;
	
	@Service("FaasMachService")
	def machService;
	
	@Service("FaasTreeService")
	def treeService;
	
	@Service("FaasMiscService")
	def miscService;
	
	@Service("FaasAttachmentService")
	def attachmentService;
	
	def CURRENT_STATE = 'CURRENT';
	def CANCELLED_STATE = 'CANCELLED';
	def DISAPPROVED_STATE = 'DISAPPROVED';
	
	@ProxyMethod
	public def create( faas ) {
		faas.sys_dtCreated = new Date();
		em2.validate("faas:faas", faas);
		em2.create("faas:faas", faas);
		def list = em2.indexer.getIndexFor("faas:faas");
		em2.indexer.fire( list, faas );
		return faas;
	}
	
	@ProxyMethod
	public def approve( faasId, userName, tdNo, pin, issueDate ) {
		def faas = em2.read("faas:faas", [objid:faasId]);
		if( !faas ) throw new Exception("FAAS not found.");
		if( faas.state == CURRENT_STATE) throw new Exception("FAAS has already been approved.");

		faas.state           = CURRENT_STATE;
		faas.tdNo            = tdNo;
		faas.sys_dtApproved  = issueDate;
		faas.info.issueDate  = issueDate;
		faas.rp.info.pin     = pin;
		faas.rpu.info.pin    = pin 
		if( faas.rpu.info.suffix != 0 ) {
			faas.rpu.info.pin = pin + '-' + faas.rpu.info.suffix
		}
		cancelPreviousTds( faas );
		em2.update("faas:faas", faas);
	}
	
	@ProxyMethod
	public def disapprove( faasId, remarks, disapprovedBy, disapprovedByTitle )  {
		def faas = em2.read("faas:faas", [objid:faasId]);
		if( !faas ) throw new Exception("FAAS not found.")
		if( faas.state == CURRENT_STATE ) throw new Exception("FAAS is already $faas.state.");
		
		em.sqlContext.createNamedExecutor("faas:updateTransmittedTaxDeclaration")
			.setParameter("objid", faas.objid)
			.setParameter("transmittalState", false)
			.execute();
			
		def currDate = dateService.serverDate;
		faas.state = DISAPPROVED_STATE;
		faas.remarks = remarks;
		faas.sys_dtCreated = currDate;
		faas.sys_dtApproved = currDate;
		faas.info.reviewedBy  = [name:disapprovedBy, title:disapprovedByTitle, dtSigned:currDate];
		
		def oid = 'F' + new UID();
		faas.oid = oid;
		em2.create("faas:disapproved-faas", faas);
		em2.delete("faas:faas", faas);
		
		def faasInfo = em2.read("faas:faas-list", faas );		
		if( faasInfo ) {
			faasInfo.oid = oid;
			faasInfo.state = DISAPPROVED_STATE;
			em2.create("faas:faas-disapproved", faasInfo );
			em2.delete("faas:faas-list", faasInfo );
		}
	}
	
	@ProxyMethod
	public void transmit( objid ) {
		try {
		if( existsFaas(objid) ) throw new Exception("FAAS has already been transmitted.");
		
		def faas = createFaas( objid );
		em2.validate("faas:faas", faas);
		faas.transmitted = true;
		faas.sys_dtCreated = dateService.getServerDate();
		transmitToRemote( faas );
		create( faas );
		em.sqlContext.createNamedExecutor("faas:updateTransmittedTaxDeclaration")
			.setParameter("objid", faas.objid)
			.setParameter("transmittalState", 1)
			.execute();
		} catch (ex) { ex.printStackTrace(); throw ex; }
	}
	
	
	@ProxyMethod
	public def getList( search, params ) {
		if( ! search.textSearch ) return getListByNamed("faas:getProvApprovalList", [], params);
		def result = null;
		if( (result = getListByNamed("faas:findTdByTdNo", [tdNo:search.textSearch], params))) return result;
		if( (result = getListByNamed("faas:findTdByPin", [pin:search.textSearch], params))) return result;
		if( (result = getListByNamed("faas:findTdByTaxpayerName", [taxpayerName:search.textSearch], params))) return result;
		return [];
	}
	
	@ProxyMethod
	public def open( objid ) {
		def faas = em.sqlContext.createNamedQuery("faas:findTdById").setParameters([objid:objid]).singleResult;
		if( ! faas ) throw new Exception("FAAS not found.");
		return faas;
	}
	
	private void cancelPreviousTds( faas ) {
		faas.previousFaasIds.each { item ->
			def prevFaas = em2.read("faas:faas", [objid:item.faasId]);
			if( prevFaas ) {
				prevFaas.state = CANCELLED_STATE;
				prevFaas.info.cancelInfo = [cancelReason:faas.info.txnType, cancelDate:faas.sys_dtApproved, cancelledByTdNo:faas.tdNo];
				em2.update("faas:faas", prevFaas);
			}
		}
	}
	
	@ProxyMethod
	public def createFaas( objid ) {
		def td = em.sqlContext.createNamedQuery("faas:getTdById").setParameter("objid", objid).singleResult;
		def rpu = em.sqlContext.createNamedQuery("faas:getRpuById").setParameter("objid", td.rpuid).singleResult;
		def rp  = em.sqlContext.createNamedQuery("faas:getRealPropertyById").setParameter("objid", rpu.realpropertyid).singleResult;
		def brgy = em.sqlContext.createNamedQuery("faas:getLguById").setParameter("objid", rp.barangayId).singleResult;
		def parentLgu = em.sqlContext.createNamedQuery("faas:getLguById").setParameter("objid", brgy.parentid).singleResult;
		def parentParentLgu = em.sqlContext.createNamedQuery("faas:getLguById").setParameter("objid", parentLgu.objid).singleResult;

		def faas = [
			objid         : td.objid,
			schemaName    : "faas:faas",
			schemaVersion : "1.0",
			transmittalId : "system",
			state    : td.state,
			tdNo 	 : td.tdno,
			pin      : rpu.pin,
			barangay : rp.location,
			rpuId    : rpu.objid,
			rpId     : rp.objid,
			info     : buildTdInfo(td),
			rpu      : buildRpuInfo(td, rpu),
			rp       : buildRealPropertyInfo( rp, brgy, parentLgu, parentParentLgu ),
			previousFaasIds : buildPreviousTds( td ),
			transmitted	: ( ( !td.transmitted || td.transmitted == 0 ) ? false : true)
		];
		if ( rpu.type == "LAND" ) 
			faas = landService.build( faas, rpu );
		else if ( rpu.type == "BLDG" )
			faas = bldgService.build( faas, rpu );
		else if ( rpu.type == "MACH" )
			faas = machService.build( faas, rpu );
		else if ( rpu.type == "TREE" )
			faas = treeService.build( faas, rpu );
		else if ( rpu.type == "MISC" )
			faas = miscService.build( faas, rpu );
		else
			throw new Exception("Invalid Property Type for TD No. $td.tdno");
		
		return faas;
		
	}
	
	private void transmitToRemote( faas ) {
		invokeRemoteService( "FAASService", "create", [faas] as Object[] );
		attachmentService.getAttachments( faas.objid ).each() { it ->
			attachmentService.transmitAttachmentToRemote( it.objid );	
		}
	}
	
	private def buildRealPropertyInfo( rp, brgy, parentLgu, parentParentLgu ) {
		return [ 
			 objid         : rp.objid,
			 schemaName    : "rp:rp",
			 schemaVersion : "1.0",
			 state         : rp.state,
			 info       : [
				 txnType      : rp.txnType,
				 dtCreated    : dateService.format("yyyy-MM-dd", rp.createDate),
				 provCity     : parentParentLgu?.name,
				 muniDistrict : parentLgu.name,
				 barangay     : brgy.name,
				 pin          : rp.pin,
				 provCityIndex     : rp.provCityIndex,
				 muniDistrictIndex : rp.muniDistrictIndex,
				 brgyIndex         : rp.brgyIndex,
				 sectionNo         : rp.sectionNo,
				 parcelNo          : rp.parcelNo,
				 claimNo           : rp.claimNo,
				 cadastralLotNo    : rp.cadastralLotNo,
				 barangayId        : rp.barangayId,
				 north   : rp.northBoundary,
				 south   : rp.southBoundary,
				 east    : rp.eastBoundary,
				 west    : rp.westBoundary,
			 ]
		]    
	}
	
	private def buildRpuInfo( td, rpu ) {
		return [ 
			objid         : rpu.objid,
			schemaName    : "rpu:rpu",
			schemaVersion : "1.0",        
			state      : td.state,
			info       : [
				 txnType    : td.txnType,
				 ry         : rpu.ry,
				 type       : rpu.type,
				 pin        : rpu.pin,
				 suffix     : rpu.suffix,
				 special    : rpu.special as boolean,
				 taxable    : rpu.taxable as boolean,
				 totalMV    : rpu.totalMV,
				 totalAMV   : rpu.totalAMV,
				 totalAV    : rpu.totalAV,
				 areaSqm    : rpu.areaInSqm,
				 areaHec    : rpu.areaInHec,
				 useSwornAmount : rpu.useSwornAmount,
				 classId        : rpu.classificationId,
				 classCode      : rpu.classCode,
				 classTitle     : rpu.classTitle,
				 exemptId       : rpu.exemptionTypeId,
				 exemptCode     : rpu.exemptCode,
				 exemptTitle    : rpu.exemptTitle,
				 cancelReason   : rpu.cancelReason,
				 cancelDate     : dateService.format("yyyy-MM-dd",rpu.dtCancelled),
			],
		];
	}
	
	private def buildTdInfo( td ) {
		return [
			tdNo             : td.tdno,
			txnType          : td.txnType,
			issueDate        : dateService.format("yyyy-MM-dd",td.issueDate),
			effectivityYear  : td.effectivityYear,
			effectivityQtr   : td.effectivityQtr,
			titleNo          : td.titleNo,
			titleDate        : (td.titleDate ? dateService.format('yyyy-MM-dd', td.titleDate) : null ) ,
			titleType        : (td.titleType ? td.titleType : null ),
			taxpayerId       : td.taxpayerId,
			taxpayerName     : td.taxpayerName,
			taxpayerAddress  : td.taxpayerAddress,
			administratorId  : td.administratorId,
			administratorName : td.administratorName,
			administratorAddress : td.administratorAddress,
			
			appraisedBy        : td.appraisedBy,
			appraisedByTitle   : td.appraisedByPosition,
			dtAppraised        : dateService.format('yyyy-MM-dd', td.issueDate),
			recommendedBy      : td.recommendedBy,
			recommendedByTitle : td.recommendedByPosition,
			dtRecommended      : dateService.format('yyyy-MM-dd', td.issueDate),
			approvedBy         : td.approvedBy,
			approvedByTitle    : td.appraisedByPosition,
			dtApproved         : dateService.format('yyyy-MM-dd', td.issueDate),
			
			prevTdNo           : td.previousTdNo,
			prevPin            : td.previousPin,
			prevOwner          : td.previousOwner,
			prevAssessedValue  : td.previousAssessedValue,
			prevMarketValue    : td.previousMarketValue,
		];
	}
	
	private def buildPreviousTds( td ) {
		def prevTds = em.sqlContext.createNamedQuery( "faas:getPreviousTaxDeclarationByParentId" )
						.setParameter( "parentId", td.objid ).resultList;
		def prevFaas = [];
		prevTds.each { prevTd ->
			prevFaas.add([
				faasId	: prevTd.taxDeclarationId,
				tdNo	: prevTd.tdNo
			]);
		}
		return prevFaas;
	}
	
	private def invokeRemoteService( serviceName, methodName, params ) {
		try {
		def remote = new DynamicHttpInvoker( vars.remote_host, vars.remote_context, false );
		def svc = remote.create( serviceName );
		return svc.invoke( methodName, params );
		} catch (ex) { ex.printStackTrace(); throw ex; }
	}
	
	private def getListByNamed( namedQuery, searchParams, params ) {
		return em.sqlContext.createNamedQuery(namedQuery)
					.setParameters( searchParams )
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList;
	}

	private def existsFaas( objid ) {
		def data = em2.sqlContext.createNamedQuery("faas:findById").setParameter("objid", objid ).singleResult;
		if( data ) 
			return true;
		return false;
	}
}

