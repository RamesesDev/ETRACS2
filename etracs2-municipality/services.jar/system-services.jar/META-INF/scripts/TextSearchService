import com.rameses.annotations.*;
import com.rameses.eserver.*;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.index.CorruptIndexException;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

class TextSearchService {

	public void register(def param){
		def content = param.content;
		def id = param.id;
	}

	@ProxyMethod
	public void index() {
		def indexDir = getClass().classLoader.getResource("index");
		def url = getClass().classLoader.getResource("files");
		
		def sourceDir = new File( url.toURI() );
		def indexFile = new File( indexDir.toURI() );
		
        Directory index = null;
        IndexWriter w = null;
        //String files[] = directory.list();
        try {
			def analyzer = new StandardAnalyzer(Version.LUCENE_30);
            index = FSDirectory.open(indexFile);
            w = new IndexWriter(index, analyzer,  IndexWriter.MaxFieldLength.UNLIMITED);
            for ( f in sourceDir.listFiles() ) {
                String fullPath = f.getPath();
                Document document = new Document();
                document.add(new Field("content", new FileReader(fullPath)));
                document.add(new Field("filepath", fullPath, Field.Store.YES, Field.Index.ANALYZED));
                w.addDocument(document);
            }
        } catch( ex ) {
            ex.printStackTrace();
        } finally {
            try {
                w.close();
                index.close();
            } catch(e) { e.printStackTrace(); }
        }
	}
   
	@ProxyMethod
	public def search( def keywords ) {
		def indexDir = getClass().classLoader.getResource("index");
		def indexFile = new File( indexDir.toURI() )
	    Directory index = FSDirectory.open(indexFile);
		
        int resultSize = 10;
        def searcher = new IndexSearcher( index, true);
        def collector = TopScoreDocCollector.create(resultSize, true);
        try {
			def analyzer = new StandardAnalyzer(Version.LUCENE_30);
            Query q = new QueryParser(Version.LUCENE_30, "content", analyzer).parse(keywords);
            searcher.search(q, collector);
            ScoreDoc[] hits = collector.topDocs().scoreDocs;
			def results = [];
			for(int i=0;i<hits.length;++i) {
                int docId = hits[i].doc;
                Document d = searcher.doc(docId);
				results.add( d.filepath );
            }
			return results;		
        } catch (ex) { 
			ex.printStackTrace();
        } finally {
            searcher.close();
            index.close();
        }
	}

	
}