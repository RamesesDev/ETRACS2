import com.rameses.annotations.*;
import com.rameses.util.*;

public class LoginService {

    @PersistenceContext("java:main")
    def em;

	@Service("LoginProfileService")
	def profileSvc;

	@Service("LoginSessionService")
	def sessionSvc;
	
	@Env
	def env;
	
	@Service("Var")
	def VARS;
	
	@Service("DateService")
	def dateSvc;

	//if above number of retries, apply the penalty.
	//What penalty should we apply? should we suspend indefinitely the account? or just move it to a later date.
	private boolean validatePassword( def req, String pwd ) {
		def usr = req.login_info;
		def updates = req.login_updates;
		
		if ( usr.pwd != pwd ) {
			int maxRetries = VARS.getProperty( "invalid_login_max_retries", 3).toInteger();
			if( usr.retrycount >= (maxRetries-1) ) {
				updates.retrycount = 0;
				int penalty  = VARS.getProperty( "invalid_login_action", 0 ).toInteger();
				if( penalty ==0 ) {
					updates.active = false;
				}	
				else {
					def timeInterval = VARS.getProperty("invalid_login_access_date_interval", "1d");
					updates.accessdate = dateSvc.findNextDate( timeInterval );
				}
			}
			else {
				updates.retrycount = (usr.retrycount ? usr.retrycount : 0) + 1;
			}
			return false;
		}
		else {
			updates.retrycount = 0;
			return true;
		}	
	}	
	
	
	@ProxyMethod
    public def login( usr ) {
		assert usr.uid;
		assert usr.pwd;
		
		def o = em.read( "loginaccount", usr );
        if ( !o ) throw new Exception('Account does not exist.');
		if ( !o.active ) throw new Exception('User account is not active.');
		if( o.checkterminal && !(env.TERMINALID )) throw new Exception("Terminal registration is required");
		if( o.accessdate!=null && o.accessdate.after( dateSvc.serverDate )) throw new Exception("Access is not allowed at this time");

		/**	
		* request object has the ff. attributes:
		* login_info = the original login account
		* login_updates = login attributes we need to update
		* out = the result object to be returned to the user. contains env and permissions
		*/

		def req = [:];
		req.login_info = o;											
		req.login_updates = [uid:usr.uid];
		req.out = [:];
		req.out.env = [USER:usr.uid, CHANGE_PWD_ON_LOGIN: o.changepwdonlogin, USERID: o.userid, USERTYPE: o.usertype  ];
		
		if( validatePassword( req, usr.pwd ) == false ) {
			em.update( "loginaccount", req.login_updates );
			return new Exception('Invalid password entered.');
		}

		//create a request object and pass through different phases.
		req = profileSvc.loadProfile( req );
		req = sessionSvc.createSession( req );
		
		//persist successful login values and return packed env
		em.update( "loginaccount", req.login_updates );
        return req.out;
    }

    @ProxyMethod
    public def logout( usr ) {
		sessionSvc.removeSession(usr);
        return null;
    }

}
