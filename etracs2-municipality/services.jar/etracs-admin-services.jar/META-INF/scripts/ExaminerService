import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.UID;

class ExaminerService 
{

    @PersistenceContext("java:main")
    def em;
	
	@ProxyMethod
	public def getList( searchText, params ) {
		if( ! searchText ) return getListByName("examiner:getList", [:], params);
		def result = [];
		if( (result = getListByName("examiner:findByUid", [uid:searchText], params)) ) return result;
		if( (result = getListByName("examiner:findByLastName", [lastname:searchText], params)) ) return result;
		return result;
	}
    
    @ProxyMethod
    public def open( objid ) {
        def examiner = em.read("examiner:examiner", [objid:objid]);
		if( ! examiner ) throw new Exception("User is not an examiner.");
        examiner = examiner + em.sqlContext.createNamedQuery("examiner:findByUid").setParameter("uid", examiner.uid).singleResult;
        return examiner;
    }
    
    @ProxyMethod
    public void save( examiner ) {
        if (exists( examiner ) ) throw new Exception("Examiner already created.");
        examiner.schemaName = "examiner:examiner";
        examiner.schemaVersion = "1.0";
        em.validate("examiner:examiner", examiner);
        em.create("examiner:examiner", examiner);
    }
    
    @ProxyMethod
    public void update( examiner ) {
        if (! exists( examiner ) ) throw new Exception("Examiner does not exists.");
        em.validate("examiner:examiner", examiner);
        em.update("examiner:examiner", examiner);
    }
    
    
    /* --------------------------------------------------------------------
    **  REASSIGN SUPPORT
    -------------------------------------------------------------------- */
    @ProxyMethod
    public def getReassignList( searchText, params ) {
        if( ! searchText ) return getListByName("examiner:getReassignList", [:], params);
        def result = [];
		if( (result = getListByName("examiner:getReassignListByFrom", [assignedFrom:searchText], params)) ) return result;
		if( (result = getListByName("examiner:getReassignListByTo", [assignedTo:searchText], params)) ) return result;
		return result;
    }
    
    @ProxyMethod
    public def getActiveReassigns( params ) {
        return getListByName("examiner:getActiveReassignList", [:], params);
    }
    
    @ProxyMethod
    public void saveReassign( reassign ) {
        reassign.objid = "R" + new UID();
        reassign.schemaName = "examiner:reassign";
        reassign.schemaVersion = "1.0";
        reassign.validUntil = new Date();
        reassign.state = "DRAFT";
        em.validate("examiner:reassign", reassign);
        em.create("examiner:reassign", reassign);
    }
    
    @ProxyMethod
    public void updateReassign( reassign ) {
        em.validate("examiner:reassign", reassign);
        em.update("examiner:reassign", reassign);
    }
    
    @ProxyMethod
    public def openReassign( objid ) {
         def reassign = em.read("examiner:reassign", [objid:objid]);
         if( ! reassign ) throw new Exception("Record not found.");
         return reassign;
    }
    
    
    @ProxyMethod
    public def approve( objid ) {
        def reassign = openReassign( objid );
        if( reassign.state != 'DRAFT' ) throw new Exception("Document has already been $reassign.state." );
        reassignLgu( reassign, reassign.assignedFromId, reassign.assignedToId );
        reassign.state = "ACTIVE";
        em.update("examiner:reassign", reassign);
    }
    
    @ProxyMethod
    public void closeReassign() {
        def list = em.sqlContext.createNamedQuery("examiner:getClosedReassignList").resultList;
        list.each { data -> 
			closeReassignById( data.objid );
        }   
    }
	
	@ProxyMethod
	public void closeReassignById( objid ) {
		def reassign = em.read("examiner:reassign", [objid:objid]);
		reassignLgu( reassign, reassign.assignedToId, reassign.assignedFromId );
		reassign.state = "CLOSED";
		em.update("examiner:reassign", reassign)
	}
    
    private void reassignLgu( reassign, assignedFromId, assignedToId ) {
        def fromExaminer = em.read("examiner:examiner", [objid:assignedFromId]);
        if( ! fromExaminer ) throw new Exception("Examiner From does not exists.");
        def toExaminer = em.read("examiner:examiner", [objid:assignedToId]);
        if( ! toExaminer ) throw new Exception("Examiner To does not exists.");
        
        def reassignedLgus = reassign.municipalities.findAll { a -> return a.reassigned == true; }
        def forRemoveList = [];
        reassignedLgus.each { lgu -> 
            def list = fromExaminer.municipalities.findAll { m -> return m.name == lgu.name };
            if( list ) {
                forRemoveList.addAll( list );
            }
        }
        fromExaminer.municipalities.removeAll( forRemoveList );
        em.update("examiner:examiner", fromExaminer);
        
        toExaminer.municipalities.addAll( reassignedLgus );
        em.update("examiner:examiner", toExaminer);
    }
	
	private def getListByName( namedQuery, values, params ) {
		return em.sqlContext.createNamedQuery( namedQuery )
					.setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList;
	}
    
    private def exists( examiner ) {
        if( em.read("examiner:examiner", examiner) )
            return true;
        return false;
    }

}
