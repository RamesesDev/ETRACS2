import com.rameses.annotations.*;
import com.rameses.invoker.client.*;
import com.rameses.etracs1.invoker.*;

class OldETRACSService {

	
	@Service("Var")
	def var;
	
	@Service("FaasService")
	def faasSvc;
	
	@ProxyMethod
	public void approveTaxDeclaration( params ) {
		if (acceptMsg( params ) ) {
			invokeRPTService("approveTaxDeclaration", [ params.DOMAIN, params.USERNAME, params.txnType, params.faasId, params.tdNo, params.pin]);
			faasSvc.approve( params.faasId, params.USERNAME, params.tdNo, params.pin );
		}
	}
	
	@ProxyMethod
	public def findLedgerByTdId2( params ) {
		if ( acceptMsg( params ) ) {
			return invokeRPTService( "findLedgerByTdId" , [ params.faasId ] );
		}
	}
	
	
	private def invokeRPTService( methodName, params ) {
		return invokeService("remote/RemoteRPTService", methodName, params as Object[]);
	}

	private def invokeService( serviceName, methodName, params ) {
		def invoker = new HttpServiceInvoker( var.version1_host, null );
		def svc = invoker.create( serviceName );
		return svc.invoke( methodName, params );
	}
	
	
	private def acceptMsg( params ) {
		return true;
		return ( params.DOMAIN == var.lgu_name );
	}
	
}
