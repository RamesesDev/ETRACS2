<workunit>
    
    <invokers>
        <invoker type="home.action" permission="transmittal.create" caption="Transmittal (Create)" target="window" action="init" icon="images/folder.png"/>
        <invoker folderid="/menu/file" permission="transmittal.create" caption="Transmittal (Create)" target="window" action="init"/>
        <invoker type="transmittal_municipality:quickView" action="openQuickView"/>
        <invoker type="transmittal_municipality:open" action="open"/>
        <invoker type="formActions" tooltip="Close" mnemonic="c" action="_close" visibleWhen="#{ state == 'VIEW' }" icon="images/remove24.png"/>
        <invoker type="formActions" permission="transmittal.save" tooltip="Save" mnemonic="s" action="save" visibleWhen="#{ state == 'VIEW' and bean.state == 'DRAFT'}" icon="images/save24.png"/>
        <invoker type="formActions" permission="transmittal.export" tooltip="Export Transmittal" mnemonic="e" action="export" visibleWhen="#{ state == 'VIEW' and bean.state == 'ACTIVE'}" icon="images/export24.png"/>
        <invoker type="formActions" permission="transmittal.import" tooltip="Close Transmittal" mnemonic="i" action="importTransmittal" visibleWhen="#{ state == 'VIEW' and bean.state == 'ACTIVE'}" icon="images/import24.png"/>
    </invokers>
    
    <code>
        <![CDATA[
        
            import com.rameses.rcp.common.*;
            import com.rameses.rcp.annotations.*;
            import com.rameses.osiris2.client.*;
            import javax.swing.filechooser.*;
            import javax.swing.*;
            import com.rameses.util.*;
            import etracs2.municipality.transmittal.TransmittalWriter;

            public class TransmittalController
            {

                @Binding
                def binding;
                
                def state = "VIEW";
                
                def bean = [state:"DRAFT"];
                def location;
                
                @FormTitle
                def title = "Transmittal";

                def message = "";
                
                @Service("TransmittalService")
                def svc;
                
                @Service("ImportTransmittalService")
                def importService;
                
                def listHandler = [
                    getRows    : { return 25; },
                    getColumns : {
                        return [
                            new Column( name:"item.state", caption:"State", width:50),
                            new Column( name:"item.type", caption:"Type", width:50),
                            new Column( name:"item.txnType", caption:"Txn", width:50),
                            new Column( name:"item.tdNo", caption:"TD No.", width:120),
                            new Column( name:"item.pin", caption:"PIN", width:120),
                            new Column( name:"item.taxpayerName", caption:"Taxpayer"),
                            new Column( name:"item.remarks", caption:"Remarks"),
                        ]
                    },

                    fetchList  : {
                        return svc.getProvinceForApprovalList( it );
                    }

                ] as PageListModel;
                
                def itemsHandler = [
                    getRows    : { return 25; },
                    getColumns : {
                        return [
                            new Column( name:"item.type", caption:"Type", width:50),
                            new Column( name:"item.txnType", caption:"Txn", width:50),
                            new Column( name:"item.tdNo", caption:"TD No.", width:120),
                            new Column( name:"item.pin", caption:"PIN", width:120),
                            new Column( name:"item.taxpayerName", caption:"Taxpayer"),
                        ]
                    },

                    fetchList  : {
                        return svc.getItems( bean.objid , it);
                    }
                ] as PageListModel;
                
                def refreshHandler = {
                    listHandler.load();
                    selectedItem = listHandler.selectedItem;
                    binding.refresh();
                }
                
                def init(){ return "init"; }

                def save(){
                    bean = svc.save( bean.remarks );
                    return "default";
                }
                
                def openQuickView(){
                    open();
                    state = "QUICKVIEW";
                    return "quick-view";
                }
                
                void open(){
                    state = "VIEW";
                    bean = svc.open(bean.objid);
                }
                
                def importTransmittal(){
                    def jfc = new JFileChooser();
                    def ret = jfc.showOpenDialog(null);
                    message = "";
                    if( ret == JFileChooser.APPROVE_OPTION ){
                    
                        def file = new File( jfc.selectedFile.absolutePath ); 
                        def ois = new ObjectInputStream( new BufferedInputStream( new FileInputStream( file )));
                        def chunk = [eof:false, transmittalId: bean.objid];
                        def count = 0;
                        def cancelled = false;
                        def onExecute = {
                            try{
                                count += 1;
                                def data = ois.readObject();
                                chunk.data = data;
                                chunk = importService.importTransmittal( chunk );
                                message = "Importing transmittal [$count]";
                                
                                return chunk.eof;
                            }catch(e){
                                e.printStackTrace();
                                message = "ERROR: " + ExceptionManager.getOriginal( e ).message;
                                cancelled = true;
                                return true;
                            }finally{
                                binding.refresh("message");
                            }
                        };

                        def onEnd = { 
                            if( !cancelled ) {
                                message = "Import successful.";
                                binding.refresh("message");
                            }
                            try{ ois.close(); }catch(e){;} 
                        };
                        
                        def task = new CloseTransmittalTask( onExecute:onExecute, onEnd:onEnd );
                        OsirisContext.clientContext.taskManager.addTask( task  );
                        
                        return "wait";
                    }
                    
                    return null;
                }
                
                def export(){
                    def jfc = new JFileChooser();
                    jfc.fileSelectionMode = JFileChooser.DIRECTORIES_ONLY;
                    jfc.acceptAllFileFilterUsed = false;
                    def ret = jfc.showOpenDialog(null);
                    if( ret == JFileChooser.APPROVE_OPTION ){
                        def file = new File( jfc.selectedFile.absolutePath + File.separator + bean.docNo  ); 
                        if( file.exists() ) file.delete();
                        
                        location = file.absolutePath;

                        def task = new TransmittalTask( caller: this, header: bean );
                        OsirisContext.clientContext.taskManager.addTask( task  );
                        return "wait";
                    }
                    
                    return null;
                }
            }
            
            class CloseTransmittalTask extends Task {
                def onExecute;
                def onEnd;
                
                public boolean accept(){ return true; }
                public void execute(){ ended = onExecute(); }
                public void end(){ onEnd(); }
            }
            
            class TransmittalTask extends Task{
                
                def header;
                def writer;
                def bytes = 0;
                def caller;
                def chunk;
                
                public void start(){
                    if(! writer ){
                        try{
                            writer = new TransmittalWriter( caller.location );
                            caller.message = "Exporting byte transfer $bytes";
                            caller.binding.refresh("message");
                            chunk = [transmittalId: header.objid, eof: false, state:"TRANSMITTAL" ];
                        }catch(e){
                            caller.message = e.message;
                            caller.binding.refresh("message");
                        }
                        ended = false;
                    }
                }
                
                public boolean accept() { return true; }
                public void execute(){
                    try{
                       def bytes = 0;
                       
                       chunk = caller.svc.exportTransmittal( chunk );
                       ended = chunk.eof;
                       
                       if( !chunk.eof ){
                           if( chunk.state.matches("TRANSMITTAL|HEADER") ){
                                bytes = writer.write( chunk.data );
                                caller.message = "Exporting Transmittal ( $bytes )";
                           } else {
                                def part = chunk.data;
                                bytes = writer.writeAttachment( part.filename, part.bytes ); 
                                caller.message = "Exporting Attachment $part.filename ( $bytes )";
                           }
                       }
                       
                       chunk.data = null;
                    }catch(e){
                        caller.message = e.cause?.message;
                        cancelled = true;
                        ended = true;
                        throw e;
                    }

                    caller.binding.refresh("message");
                    Thread.sleep(100);
                }
                
                public void end(){
                    if( !cancelled ) caller.message = "Export successful.";
                    try{ writer.close(); }catch(ign){;}
                    caller.binding.refresh("message");
                }
            }
        ]]>
        
    </code>
    
    <pages>
        <page template="etracs2.municipality.transmittal.TransmittalPage"/>
        <page name="quick-view" template="etracs2.municipality.transmittal.TransmittalQuickViewPage"/>
        <page name="init" template="etracs2.municipality.transmittal.TransmittalInitPage"/>
        <page name="wait" template="etracs2.municipality.WaitPage"/>
    </pages>
</workunit>